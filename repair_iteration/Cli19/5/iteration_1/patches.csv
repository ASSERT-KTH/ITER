bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  Token  token  =  new  Token(token.charAt(0),  token.length());  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Token  token  =  new  Token(token.charAt(0),  token.length());	      Token    token    =    new    Token(token.charAt(0));    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  -  1));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  Token  token  =  new  Token(token.substring(0,  token.length()  -  1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Token  token  =  new  Token(token.substring(0,  token.length()  -  1));	      Token    token    =    new    Token(token.charAt(0));    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  Token  token  =  new  Token(token.substring(1));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  Token  token  =  new  Token(token.substring(1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Token  token  =  new  Token(token.substring(1));	      Token    token    =    new    Token(token.charAt(0));    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  token.length()  -  1;  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  For(int  i  =  0;  i  <  token.length()  -  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	For(int  i  =  0;  i  <  token.length()  -  1;  i++)  {	  For(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  token.length()  +  1;  i++)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  For(int  i  =  0;  i  <  token.length()  +  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	For(int  i  =  0;  i  <  token.length()  +  1;  i++)  {	  For(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  tokens.length();  i++)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  For(int  i  =  0;  i  <  tokens.length();  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	For(int  i  =  0;  i  <  tokens.length();  i++)  {	  For(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  token.length();  i++)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  For(int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	For(int  i  =  1;  i  <  token.length();  i++)  {	  For(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  tokens.add(token.substring(1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add(token.substring(1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add(token.substring(1));	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
9	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(1));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
10	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(2));  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(2));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(2));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "- "  +  i);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "-n "  +  ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "-n "  +  ch);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  options.add( "- "  +  ch);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  options.add( "- "  +  ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	options.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(i  +  1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add(token.substring(i  +  1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add(token.substring(i  +  1));	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  ters.add(token.substring(i  +  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  ters.add(token.substring(i  +  1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	ters.add(token.substring(i  +  1));	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(i,  stopAtNonOption));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
20	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  +  2);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  +  2);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	TokenBuffer  token  =  new  TokenBuffer(token.length()  +  2);	      TokenBuffer    token    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  final  TokenBuffer  token  =  new  TokenBuffer(token.length());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  final  TokenBuffer  token  =  new  TokenBuffer(token.length());  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	final  TokenBuffer  token  =  new  TokenBuffer(token.length());	      TokenBuffer    token    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  token.length()  -  1;  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  for(int  i  =  0;  i  <  token.length()  -  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	for(int  i  =  0;  i  <  token.length()  -  1;  i++)  {	  for(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.length();  i++)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  for(int  i  =  0;  i  <  tokens.length();  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	for(int  i  =  0;  i  <  tokens.length();  i++)  {	  for(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  token.length()  +  1;  i++)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  for(int  i  =  0;  i  <  token.length()  +  1;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	for(int  i  =  0;  i  <  token.length()  +  1;  i++)  {	  for(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  token.length()  -  2;  i++)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  for(int  i  =  0;  i  <  token.length()  -  2;  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	for(int  i  =  0;  i  <  token.length()  -  2;  i++)  {	  for(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.length());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(Token.length());  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	TokenBuffer  token  =  new  TokenBuffer(Token.length());	      TokenBuffer    token    =    new    TokenBuffer(token.length()    -    1);    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  tokens.add(token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add(token);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
28	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
29	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add(token);  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add(token);  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption  &&  token.length()  >  0)  {  tokens.add(token);  }	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
31	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  continue;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "- "  +  ch);  continue;  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "- "  +  ch);  continue;	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  options.add( "- "  +  ch);  continue;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    {    [BUGGY]  options.add( "- "  +  ch);  continue;  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	options.add( "- "  +  ch);  continue;	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- ");	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  ch);	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  Token  token  =  new  Token(token.charAt(0),  stopAtNonOption);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  Token  token  =  new  Token(token.charAt(0),  stopAtNonOption);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Token  token  =  new  Token(token.charAt(0),  stopAtNonOption);	      Token    token    =    new    Token(token.charAt(0));    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  Token  token  =  new  Token(token.trim());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  Token  token  =  new  Token(token.trim());  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Token  token  =  new  Token(token.trim());	      Token    token    =    new    Token(token.charAt(0));    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  Option  currentOption  =  options.getOption(i);  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Option  currentOption  =  options.getOption(i);	      	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- ");  }	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(i  +  1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
45	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  -  2);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	TokenBuffer  token  =  new  TokenBuffer(token.length()  -  2);	      TokenBuffer    token    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	While(stopAtNonOption)  {  tokens.add(token.substring(0,  stopAtNonOption));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  Option  currentOption  =  options.getOption(ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Option  currentOption  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
48	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  Option  options  =  options.getOption(ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Option  options  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  Option  option  =  options.getOption(ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Option  option  =  options.getOption(ch);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  options.add(token);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  options.add(token);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	options.add(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  [Delete]  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	[Delete]	      if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  continue;  }	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    continue;    }    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  tors.add( "- "  +  ch);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tors.add( "- "  +  ch);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tors.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  tokens.size();  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  for(int  i  =  0;  i  <  tokens.size();  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	for(int  i  =  0;  i  <  tokens.size();  i++)  {	  for(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  Joiner.on( "- ").join(token.charAt(0))  {  tokens.add(token.substring(1));  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  Joiner.on( "- ").join(token.charAt(0))  {  tokens.add(token.substring(1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Joiner.on( "- ").join(token.charAt(0))  {  tokens.add(token.substring(1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
56	[BUG]  [BUGGY]  Joiner.on( "- ").join(token.length())  {  tokens.add(token.substring(1));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    {    [BUGGY]  Joiner.on( "- ").join(token.length())  {  tokens.add(token.substring(1));  }  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Joiner.on( "- ").join(token.length())  {  tokens.add(token.substring(1));  }	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
57	[BUG]  [BUGGY]  tors.add(token.substring(1));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    {    [BUGGY]  tors.add(token.substring(1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tors.add(token.substring(1));	      if(stopAtNonOption)    {    tokens.add(token.substring(1));    }    	non-compiled	[CE]  	16	None	replace
58	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  tokens.size();  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  For(int  i  =  0;  i  <  tokens.size();  i++)  {  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	For(int  i  =  0;  i  <  tokens.size();  i++)  {	  For(int    i    =    0;    i    <    token.length();    i++)    {    	non-compiled	[CE]  	13	None	replace
59	[BUG]  [BUGGY]  tors.add(token.substring(i  +  1));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  tors.add(token.substring(i  +  1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tors.add(token.substring(i  +  1));	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
60	[BUG]  [BUGGY]  tries.add(token.substring(i  +  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tries.add(token.substring(i  +  1));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tries.add(token.substring(i  +  1));	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    }    	non-compiled	[CE]  	14	None	replace
61	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  +  1,  token.length());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(token.length()  +  1,  token.length());  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	TokenBuffer  token  =  new  TokenBuffer(token.length()  +  1,  token.length());	      TokenBuffer    token    =    new    TokenBuffer(token.length());    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  tokens.add( "- "  +  Token.name(ch));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "- "  +  Token.name(ch));  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "- "  +  Token.name(ch));	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  tokens.add( "- "  +  0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  tokens.add( "- "  +  0);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	tokens.add( "- "  +  0);	      tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	4	None	replace
64	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    {    [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]    for  (int  i  =  1;  i  <  token.length();  i++)  {  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	Option  currentOption  =  options.getOption(token);	      if(stopAtNonOption)    {    tokens.add(token);    }    	non-compiled	[CE]  	15	None	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  token);  }  [BUGGY]    {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	269	270	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  token);  }	      	non-compiled	[CE]  	3	None	replace
