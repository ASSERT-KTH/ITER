bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  token  =  token.substring(2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.substring(2);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.substring(2);	      token    =    token.substring(1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  token  =  token.substring(0,  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.substring(0,  1);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.substring(0,  1);	      token    =    token.substring(1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  token  =  token.substring(0,  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.substring(0,  2);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.substring(0,  2);	      token    =    token.substring(1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  token  =  token.substring(1).trim();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.substring(1).trim();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.substring(1).trim();	      token    =    token.substring(1);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  token  =(String)iter.nextToken();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)iter.nextToken();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)iter.nextToken();	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
6	[BUG]  [BUGGY]  token  =(String)iter.next(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)iter.next(),  stopAtNonOption);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)iter.next(),  stopAtNonOption);	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
7	[BUG]  [BUGGY]  tokens  =(String)iter.next();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens  =(String)iter.next();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens  =(String)iter.next();	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  if  (stopAtNonOption.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.length()  ==  1)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.length()  ==  1)  {	  if    (stopAtNonOption.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  if  (stopAtNonOption.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.length()  ==  0)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.length()  ==  0)  {	  if    (stopAtNonOption.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  if  (stopAtNonOption.length()  ==  1  ||  stopAtNonOption.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.length()  ==  1  ||  stopAtNonOption.length()  ==  2)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.length()  ==  1  ||  stopAtNonOption.length()  ==  2)  {	  if    (stopAtNonOption.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  token);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "- "  +  token);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add( "- "  +  token);	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  tokens.add( "-n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "-n ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add( "-n ");	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  token  :  stopAtNonOption;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  token  :  stopAtNonOption;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
14	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  token;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  null  :  token;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  null  :  token;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption  ||  stopAtNonOption  :  token;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption  ||  stopAtNonOption  :  token;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
16	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  1;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  tokens.size()  :  1;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  token  =(String)options.get( "stopOption ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)options.get( "stopOption ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)options.get( "stopOption ");	      token    =(String)options.get(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  token  =(String)options.get( "stopOptionToken ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)options.get( "stopOptionToken ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)options.get( "stopOptionToken ");	      token    =(String)options.get(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption  ||  options.hasOption(token))  {	  if    (stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption  &&  options.hasOption(token))  {	  if    (stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption  ||  arguments.contains(token))  {	  if    (stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption  ||  arguments.contains( "- "))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption  ||  arguments.contains( "- "))  {	  if    (stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
23	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  + "- ";  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.toString()  + "- ";  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.toString()  + "- ";	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  + "n ";  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.toString()  + "n ";  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.toString()  + "n ";	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString(),  arguments;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.toString(),  arguments;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.toString(),  arguments;	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
26	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  1)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  1)  {	  if    (stopAtNonOption    ||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  0)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  0)  {	  if    (stopAtNonOption    ||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  tokens.add(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add(token,  stopAtNonOption);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add(token,  stopAtNonOption);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  tokens.add('-');  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add('-');  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add('-');	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArg()  ||  stopAtNonOption.hasArg())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.hasArg()  ||  stopAtNonOption.hasArg())  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.hasArg()  ||  stopAtNonOption.hasArg())  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.length  >  0)  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption.hasArg()  &&  arguments.length  >  0)  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption.hasArg()  &&  arguments.contains( "- "))  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  null  :  stopAtNonOption;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  null  :  stopAtNonOption;	      token    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
34	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  arguments;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  arguments;	      token    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
35	[BUG]  [BUGGY]  token  =  stopAtNonOption?  token  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  token  :  null;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  token  :  null;	      token    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
36	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
38	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
39	[BUG]  [BUGGY]  token  =  token.trim().toLowerCase();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.trim().toLowerCase();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.trim().toLowerCase();	      token    =    token.trim();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  token  =  token.trim().trim();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.trim().trim();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.trim().trim();	      token    =    token.trim();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
42	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	Iterator  <  String>  iter  =  currentOptions.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString()  +  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.toString()  +  1;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.toString()  +  1;	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
44	[BUG]  [BUGGY]  token  =  stopAtNonOption.toString( "- ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.toString( "- ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.toString( "- ");	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
45	[BUG]  [BUGGY]  token  =  stopAtNonOption.chompTo( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption.chompTo( "- ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption.chompTo( "- ");	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
46	[BUG]  [BUGGY]  token  =(String)iter.next()  &&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)iter.next()  &&  options.hasOption(token);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)iter.next()  &&  options.hasOption(token);	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  token  =(String)iter.next()  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)iter.next()  &&  stopAtNonOption;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)iter.next()  &&  stopAtNonOption;	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
48	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  tokens;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  tokens;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  tokens;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
49	[BUG]  [BUGGY]  token  =  token.toLowerCase();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.toLowerCase();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.toLowerCase();	      token    =    token.trim();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  2  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption  ||  token.length()  ==  2  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption  ||  token.length()  ==  2  &&  options.hasOption(token))  {	  if    (stopAtNonOption    ||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArgs())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.hasArgs())  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.hasArgs())  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
52	[BUG]  [BUGGY]  if  (stopAtNonOption.hasArg()  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if  (stopAtNonOption.hasArg()  &&  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if  (stopAtNonOption.hasArg()  &&  options.hasOption(token))  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
53	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add( "-- ");  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add( "-- ");	      tokens.add(   "-   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
54	[BUG]  [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  options;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  stopAtNonOption  :  options;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  stopAtNonOption  :  options;	      token    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
55	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  tokens.size()  :  stopAtNonOption;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  tokens.size()  :  stopAtNonOption;	      token    =    stopAtNonOption?    stopAtNonOption    :    token;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption  &&  arguments.contains(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption  &&  arguments.contains(token))  {	  if    (stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  token  =  token.toString();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  token.toString();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  token.toString();	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
58	[BUG]  [BUGGY]  token  =  arguments.toString();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  arguments.toString();  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  arguments.toString();	      token    =    stopAtNonOption.toString();    	non-compiled	[CE]  <identifier>  expected	16	None	replace
59	[BUG]  [BUGGY]  token  =(String)options.get( "stopAtNonOption ",  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =(String)options.get( "stopAtNonOption ",  stopAtNonOption);  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =(String)options.get( "stopAtNonOption ",  stopAtNonOption);	      token    =(String)options.get(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  tokens.add((  String)iter.next());  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  tokens.add((  String)iter.next());  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	tokens.add((  String)iter.next());	      token    =(String)iter.next();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption.hasArg()  ||  options.hasOption(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption.hasArg()  ||  options.hasOption(token))  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  &&(token.startsWith( "- ")||  token.startsWith( "-- ")))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption.hasArg()  &&(token.startsWith( "- ")||  token.startsWith( "-- ")))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption.hasArg()  &&(token.startsWith( "- ")||  token.startsWith( "-- ")))  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  if(stopAtNonOption.hasArg()  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  if(stopAtNonOption.hasArg()  ||  arguments.contains(token))  {  [BUGGY]    {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	if(stopAtNonOption.hasArg()  ||  arguments.contains(token))  {	  if    (stopAtNonOption.hasArg())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
64	[BUG]  [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[token.size()  ]):  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    }  }  else  if  (   "-   ".equals(token))  {  tokens.add(token);  }  else  if  (token.startsWith(   "-   "))  {    [BUGGY]  token  =  stopAtNonOption?  tokens.toArray(new  String[token.size()  ]):  null;  [BUGGY]    if  (token.length()  ==  2)    {  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.2773500981126146	132	133	1	replace	token  =  stopAtNonOption?  tokens.toArray(new  String[token.size()  ]):  null;	      token    =    stopAtNonOption?    stopAtNonOption    :    null;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
