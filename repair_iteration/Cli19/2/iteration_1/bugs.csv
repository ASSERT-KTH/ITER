bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  ')'  expected	4	None	add
2	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    tokens.add( "- "  +  ch);  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    tokens.add( "- "  +  ch);		non-compiled	[CE]  ')'  expected	4	None	add
3	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);		non-compiled	[CE]  ')'  expected	4	None	add
4	[BUG]  [BUGGY]    tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  ')'  expected	4	None	add
5	[BUG]  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(ch);  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    tokens.add( "- ");  currentOption  =  options.getOption(ch);		non-compiled	[CE]  ')'  expected	4	None	add
6	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add( "- "  +  token.substring(i  +  1));	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add(token.substring(0,  i  +  1));	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
8	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  }  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  }  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  }		non-compiled	[CE]  ')'  expected	4	None	add
9	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  }  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  }  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  }		non-compiled	[CE]  ')'  expected	4	None	add
10	[BUG]  [BUGGY]  tokens.add(token.substring(i));  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add(token.substring(i));	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption);	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
12	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }		non-compiled	[CE]  ')'  expected	4	None	add
13	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }		non-compiled	[CE]  ')'  expected	4	None	add
14	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring		non-compiled	[CE]  ')'  expected	4	None	add
15	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getArg()));  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add(token.substring(i,  currentOption.getArg()));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getArg()));	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
16	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [BUGGY]    break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.5	280	280	1	replace	tokens.add(token.substring(i,  i  +  1));	tokens.add(token.substring(i  +  1));  	non-compiled	[CE]  ')'  expected	3	None	replace
