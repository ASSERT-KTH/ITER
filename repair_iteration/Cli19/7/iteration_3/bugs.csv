bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  currentOption  =  options.getOption(ch,  i  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  currentOption  =  options.getOption(ch,  i  +  1);	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  	36	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  	36	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  	36	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  tokens.add( "- "  +  ch);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  	36	None	replace
5	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  tokens.contains(ch))  {  tokens.add( "- "  +  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  ||  stopAtNonOption  &&  tokens.contains(ch))  {  tokens.add( "- "  +  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	||  stopAtNonOption  &&  tokens.contains(ch))  {  tokens.add( "- "  +  ch);	  ||    stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	50	None	replace
6	[BUG]  [BUGGY]  ||  eatTheRest)  {  tokens.add( "- "  +  ch);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  ||  eatTheRest)  {  tokens.add( "- "  +  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	||  eatTheRest)  {  tokens.add( "- "  +  ch);	  ||    stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	50	None	replace
7	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  options.getOption(ch,  i  +  1);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch,  i);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOption(ch,  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOption(ch,  i);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  options  =  options.getOption(ch,  i  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options  =  options.getOption(ch,  i  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options  =  options.getOption(ch,  i  +  1);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  Options  options  =  options.getOption(ch,  i  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Options  options  =  options.getOption(ch,  i  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Options  options  =  options.getOption(ch,  i  +  1);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add( "- "  +  ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add( "- "  +  ch,  stopAtNonOption);	  tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  tokens.add( "-n "  +  ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add( "-n "  +  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add( "-n "  +  ch);	  tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	1	None	replace
13	[BUG]  [BUGGY]  AssertionFailedToken(ch,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(ch,  stopAtNonOption);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
14	[BUG]  [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(token,  stopAtNonOption);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
15	[BUG]  [BUGGY]  AssertionFailedToken(currentOption,  eatTheRest);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(currentOption,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(currentOption,  eatTheRest);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
16	[BUG]  [BUGGY]  AssertionFailedToken(token,  currentOption);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(token,  currentOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(token,  currentOption);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
17	[BUG]  [BUGGY]  tokens.add(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add(ch);	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	42	None	replace
18	[BUG]  [BUGGY]  tokens.add(ch.substring(i  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add(ch.substring(i  +  1));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add(ch.substring(i  +  1));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	42	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add(token.substring(i  +  1),  ch);	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	42	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)!=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)!=  null)  {	  if(stopAtNonOption    &&    options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	22	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  &&  options.hasOption(ch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  &&  options.hasOption(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.hasArg()  &&  options.hasOption(ch))  {	  if(stopAtNonOption    &&    options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	22	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  ||  options.hasOption(ch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  ||  options.hasOption(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.hasArg()  ||  options.hasOption(ch))  {	  if(stopAtNonOption    &&    options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)  ==  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)  ==  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.hasArg()  &&  options.getOption(ch)  ==  null)  {	  if(stopAtNonOption    &&    options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	22	None	replace
24	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  options.getOption(ch,  eatTheRest);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
25	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOption(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOption(ch,  stopAtNonOption);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	4	None	replace
26	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  token;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  token;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  token;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
27	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  false;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  false;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  false;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
28	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  currentOption;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  currentOption;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  currentOption;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg(ch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.hasArg(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.hasArg(ch))  {	  if(stopAtNonOption    &&    options.hasArg(ch))    {    	non-compiled	[CE]  	48	None	replace
30	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!token.equals(ch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(!stopAtNonOption  &&!token.equals(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(!stopAtNonOption  &&!token.equals(ch))  {	  if(stopAtNonOption    ||!token.equals(ch))    {    	non-compiled	[CE]  	55	None	replace
31	[BUG]  [BUGGY]  if(stopAtNonOption  ||!token.equals( "- "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||!token.equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||!token.equals( "- "))  {	  if(stopAtNonOption    ||!token.equals(ch))    {    	non-compiled	[CE]  	55	None	replace
32	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	34	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(options.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(options.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	33	None	replace
34	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch,  token);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOption(ch,  token);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOption(ch,  token);	  Option    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption.hasArg())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  currentOption.hasArg())  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  currentOption.hasArg())  {	  if(stopAtNonOption    &&    currentOption.hasArg())    {    	non-compiled	[CE]  	10	None	replace
36	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  currentOption  =  options.getOption(i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    if(!stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  	52	None	replace
37	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	31	None	replace
38	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add( "- "  +  i);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  Options  options  =  options.getOption(ch,  eatTheRest);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Options  options  =  options.getOption(ch,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Options  options  =  options.getOption(ch,  eatTheRest);	  Options    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	38	None	replace
40	[BUG]  [BUGGY]  Options  options  =  options.getOption(ch,  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Options  options  =  options.getOption(ch,  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Options  options  =  options.getOption(ch,  i);	  Options    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	38	None	replace
41	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  eatTheRest);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  currentOption  =  options.getOption(ch,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  currentOption  =  options.getOption(ch,  eatTheRest);	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	17	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	17	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	17	None	replace
44	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  i  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  i  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  i  +  1);	  Option    option    =    options.getOption(ch,    i);    	non-compiled	[CE]  	20	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  1);	  Option    option    =    options.getOption(ch,    i);    	non-compiled	[CE]  	20	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  0);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  0);	  Option    option    =    options.getOption(ch,    i);    	non-compiled	[CE]  	20	None	replace
47	[BUG]  [BUGGY]  Integer  currentOption  =  options.getOption(i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Integer  currentOption  =  options.getOption(i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Integer  currentOption  =  options.getOption(i);	  Integer    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
48	[BUG]  [BUGGY]  Integer  currentOption  =  options.getOption(ch  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Integer  currentOption  =  options.getOption(ch  -  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Integer  currentOption  =  options.getOption(ch  -  1);	  Integer    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
49	[BUG]  [BUGGY]  Integer  currentOption  =  options.getOption(ch  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Integer  currentOption  =  options.getOption(ch  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Integer  currentOption  =  options.getOption(ch  +  1);	  Integer    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
50	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption);	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
52	[BUG]  [BUGGY]  AssertionFailedToName(token,  eatTheRest);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  eatTheRest);	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  &&!token.equals( "- "))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&!token.equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&!token.equals( "- "))  {	  if(stopAtNonOption    &&!token.equals(ch))    {    	non-compiled	[CE]  	54	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption  &&!token.equals( " "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&!token.equals( " "))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&!token.equals( " "))  {	  if(stopAtNonOption    &&!token.equals(ch))    {    	non-compiled	[CE]  	54	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	13	None	replace
58	[BUG]  [BUGGY]  Options  options  =  currentOption.getOption(ch,  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Options  options  =  currentOption.getOption(ch,  token);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Options  options  =  currentOption.getOption(ch,  token);	  Options    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	28	None	replace
59	[BUG]  [BUGGY]  Options  options  =  currentOption.getOption(ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Options  options  =  currentOption.getOption(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Options  options  =  currentOption.getOption(ch,  stopAtNonOption);	  Options    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	28	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  eatTheRest);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  eatTheRest);	  Option    option    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	19	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  -  1  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch  -  1  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch  -  1  +  1);	  Option    option    =    options.getOption(ch    -    1);    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch  -  1L);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch  -  1L);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch  -  1L);	  Option    option    =    options.getOption(ch    -    1);    	non-compiled	[CE]  	39	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  tokens[i]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  tokens[i]);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  tokens[i]);	  Option    option    =    options.getOption(ch,    token);    	non-compiled	[CE]  	21	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.getOption(i,  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(i,  token);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(i,  token);	  Option    option    =    options.getOption(ch,    token);    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	49	None	replace
66	[BUG]  [BUGGY]  if  (options.hasArg()  &&  options.getOption(ch)  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if  (options.hasArg()  &&  options.getOption(ch)  ==  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if  (options.hasArg()  &&  options.getOption(ch)  ==  null)  {	  if    (options.hasArg()    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	23	None	replace
67	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(ch);	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.substring(i    +    1));    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.substring(i  +  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.substring(i  +  1));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.substring(i  +  1));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.substring(i    +    1));    	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch.substring(i  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch.substring(i  +  1));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(ch.substring(i  +  1));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.substring(i    +    1));    	non-compiled	[CE]  	6	None	replace
70	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  token.length());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  token.length());  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  token.length());	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.substring(i    +    1));    	non-compiled	[CE]  	6	None	replace
71	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  currentOption  =  options.getOption(ch  -  1  +  1);	  Option    currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  	35	None	replace
72	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  currentOption  =  options.getOption(ch  +  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  currentOption  =  options.getOption(ch  +  1);	  Option    currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  	35	None	replace
73	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
74	[BUG]  [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
75	[BUG]  [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
76	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
77	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch))  {	  if(stopAtNonOption    ||    options.getOption(ch))    {    	non-compiled	[CE]  	27	None	replace
78	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(!stopAtNonOption  &&  options.getOption(ch))  {	  if(stopAtNonOption    ||    options.getOption(ch))    {    	non-compiled	[CE]  	27	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption  &&  eatTheRest)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  eatTheRest)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  stopAtNonOption)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  stopAtNonOption)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption  ||  currentOption)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  currentOption)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  currentOption)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
83	[BUG]  [BUGGY]  options.put(ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options.put(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options.put(ch,  stopAtNonOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	15	None	replace
84	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  currentOption.hasArg())  {	  if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  	37	None	replace
85	[BUG]  [BUGGY]  AssertionFailedToName.append(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(ch);	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
86	[BUG]  [BUGGY]  AssertionFailedToName.append(token.substring(i  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(token.substring(i  +  1));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(token.substring(i  +  1));	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
87	[BUG]  [BUGGY]  AssertionFailedToName.append(ch,  token.substring(i));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(ch,  token.substring(i));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(ch,  token.substring(i));	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
88	[BUG]  [BUGGY]  AssertionFailedToName.append(token.substring(i,  ch));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(token.substring(i,  ch));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(token.substring(i,  ch));	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
89	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(0));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(0));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(0));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
91	[BUG]  [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
92	[BUG]  [BUGGY]  AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
93	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.charAt(i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.charAt(i));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(ch,  token.charAt(i));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.charAt(i));    	non-compiled	[CE]  	11	None	replace
94	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  token.length()  -  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  token.length()  -  1));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  token.length()  -  1));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.charAt(i));    	non-compiled	[CE]  	11	None	replace
95	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
96	[BUG]  [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
97	[BUG]  [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
98	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(0));  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(0));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(0));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
99	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  >  0)  {	  if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
100	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOption(i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOption(i);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  options  =  options.getOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options  =  options.getOption(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options  =  options.getOption(ch);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  	14	None	replace
102	[BUG]  [BUGGY]  options.add( "- "  +  ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options.add( "- "  +  ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options.add( "- "  +  ch,  stopAtNonOption);	  options.add(   "-   "    +    ch);    	non-compiled	[CE]  	2	None	replace
103	[BUG]  [BUGGY]  AssertionFailedToName(token,  stopAtNonOption,  eatTheRest);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  stopAtNonOption,  eatTheRest);	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
104	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  i++);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  i++);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  i++);	  Option    option    =    options.getOption(ch,    i);    	non-compiled	[CE]  	20	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)  >=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)  >=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.getOption(ch)  >=  null)  {	  if(stopAtNonOption    ||    options.getOption(ch))    {    	non-compiled	[CE]  	27	None	replace
106	[BUG]  [BUGGY]  AssertionFailedToName.append(ch  +  token.substring(i));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(ch  +  token.substring(i));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(ch  +  token.substring(i));	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
107	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	17	None	replace
108	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.charAt(i));    	non-compiled	[CE]  	11	None	replace
109	[BUG]  [BUGGY]  options.add( "- "  +  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options.add( "- "  +  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options.add( "- "  +  i);	  options.add(   "-   "    +    ch);    	non-compiled	[CE]  	2	None	replace
110	[BUG]  [BUGGY]  ||  stopAtNonOption  &&  options.getOption(ch)!=  null)  {  tokens.add( "- "  +  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  ||  stopAtNonOption  &&  options.getOption(ch)!=  null)  {  tokens.add( "- "  +  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	||  stopAtNonOption  &&  options.getOption(ch)!=  null)  {  tokens.add( "- "  +  ch);	  ||    stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    	non-compiled	[CE]  	50	None	replace
111	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch);  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  eattheRest);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  eattheRest);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  eattheRest);	  Option    option    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	19	None	replace
113	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	13	None	replace
114	[BUG]  [BUGGY]  Option  options  =(Option)options.getOption(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =(Option)options.getOption(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =(Option)options.getOption(ch);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  	14	None	replace
115	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(!stopAtNonOption  &&  options.getOption(ch)!=  null)  {	  if(!stopAtNonOption    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	18	None	replace
116	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	34	None	replace
117	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	34	None	replace
118	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  >=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  >=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)  >=  null)  {	  if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
119	[BUG]  [BUGGY]  options.setOption(currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options.setOption(currentOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options.setOption(currentOption);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	15	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  (token.length()!=  (i  +  1)))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	24	None	replace
121	[BUG]  [BUGGY]  Option  options  =  currentOption.hasArg()?  options.getOption(ch):  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.hasArg()?  options.getOption(ch):  null;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.hasArg()?  options.getOption(ch):  null;	  Option    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	3	None	replace
122	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(ch  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOption(ch  -  1);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOption(ch  -  1);	  Option    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	3	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  i);	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  	36	None	replace
124	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  ||  eatTheRest)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  ||  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)  ==  null  ||  eatTheRest)  {	  if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  	37	None	replace
125	[BUG]  [BUGGY]  AssertionFailedToken(i,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(i,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(i,  stopAtNonOption);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
126	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.hasArg()  ||  options.hasOption(ch))  {	  if(stopAtNonOption    &&    options.hasArg()    &&    options.hasOption(ch))    {    	non-compiled	[CE]  	22	None	replace
127	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch.charAt(i  +  1));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch.charAt(i  +  1));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(ch.charAt(i  +  1));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
128	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  +  1;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption  +  1;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
129	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.charAt(i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.charAt(i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.charAt(i);	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
130	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.equals(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.equals(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.equals(ch);	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
131	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
132	[BUG]  [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
133	[BUG]  [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(ch)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(ch);  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
134	[BUG]  [BUGGY]  tokens.add(token.substring(i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add(token.substring(i));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add(token.substring(i));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	42	None	replace
135	[BUG]  [BUGGY]  Integer  currentOption  =  options.getOption(ch,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Integer  currentOption  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Integer  currentOption  =  options.getOption(ch,  stopAtNonOption);	  Integer    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
136	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	45	None	replace
137	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch,  stopAtNonOption);  if(currentOption!=  null)  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  	17	None	replace
138	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  ch  =  String.valueOf(token.charAt(i  +  1));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    ch    =    String.valueOf(token.charAt(i    +    1));    }    	non-compiled	[CE]  	47	None	replace
139	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(options.hasArg()    &&    (token.length()!=    (i    +    1)))    {    tokens.add(token.substring    	non-compiled	[CE]  	33	None	replace
140	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)!=  null  &&  token.length()  ==  0)  {	  if(stopAtNonOption    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
141	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i  +  1),  ch);	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.substring(i    +    1));    	non-compiled	[CE]  	6	None	replace
142	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(!stopAtNonOption  &&  options.getOption(ch)  ==  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(!stopAtNonOption  &&  options.getOption(ch)  ==  null)  {	  if(stopAtNonOption    ||    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  	41	None	replace
143	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  option  =  options.getOption(ch,  null);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  option  =  options.getOption(ch,  null);	  Option    option    =    options.getOption(ch,    token);    	non-compiled	[CE]  	21	None	replace
144	[BUG]  [BUGGY]  AssertionFailedToken(i,  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken(i,  currentOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken(i,  currentOption);	  AssertionFailedToken(currentOption,    stopAtNonOption);    	non-compiled	[CE]  	30	None	replace
145	[BUG]  [BUGGY]  options.add(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  options.add(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	options.add(ch);	  options.add(   "-   "    +    ch);    	non-compiled	[CE]  	2	None	replace
146	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.getOption(ch)!=  null  &&  token.length()  >  0)  {	  if(stopAtNonOption    ||    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	40	None	replace
147	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption?  token  :  ch;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption?  token  :  ch;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption?  token  :  ch;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
148	[BUG]  [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.length()  ==  0;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.length()  ==  0;  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  eatTheRest  =  stopAtNonOption  &&  token.length()  ==  0;	  AssertionFailedToken    eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  	32	None	replace
149	[BUG]  [BUGGY]  AssertionFailedToName.append(ch,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName.append(ch,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName.append(ch,  stopAtNonOption);	  AssertionFailedToName.append(token.substring(i));    	non-compiled	[CE]  	44	None	replace
150	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption)  {  AssertionFailedToName(token,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
151	[BUG]  [BUGGY]  AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(ch,  stopAtNonOption)  {  for(int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  }	  AssertionFailedToName(token,    stopAtNonOption)    {    for(int    i    =    1;    i    <    token.length();    i++)    {    String    ch    =    String.valueOf(token.charAt(i));    }    	non-compiled	[CE]  	46	None	replace
152	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.length()  >  0)  {	  if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  	37	None	replace
153	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.equals( "- "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  &&  options.getOption(ch)  ==  null  &&  token.equals( "- "))  {	  if(stopAtNonOption    &&    options.getOption(ch)    ==    null)    {    	non-compiled	[CE]  	37	None	replace
154	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  tokens.add(token.substring(i,  ch));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	tokens.add(token.substring(i,  ch));	  tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  	42	None	replace
155	[BUG]  [BUGGY]  if  (options.hasOption(ch)&&  options.getOption(ch)!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if  (options.hasOption(ch)&&  options.getOption(ch)!=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if  (options.hasOption(ch)&&  options.getOption(ch)!=  null)  {	  if    (options.hasArg()    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	23	None	replace
156	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  &&  options.getOption(ch)!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  options.hasArg()  &&  options.getOption(ch)!=  null)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  options.hasArg()  &&  options.getOption(ch)!=  null)  {	  if    (options.hasArg()    &&    options.getOption(ch)!=    null)    {    	non-compiled	[CE]  	23	None	replace
157	[BUG]  [BUGGY]  AssertionError(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionError(token,  stopAtNonOption);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionError(token,  stopAtNonOption);	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
158	[BUG]  [BUGGY]  AssertionFailedToName(token,  i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  i);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  i);	  AssertionFailedToName(token,    stopAtNonOption);    	non-compiled	[CE]  	43	None	replace
159	[BUG]  [BUGGY]  Option  options  =  currentOption.getOptions(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  Option  options  =  currentOption.getOptions(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	Option  options  =  currentOption.getOptions(ch);	  Option    options    =    currentOption.getOption(ch);    	non-compiled	[CE]  	3	None	replace
160	[BUG]  [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  ch));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  ch));  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToken  ch  =  new  AssertionFailedToken(token.substring(i,  ch));	  AssertionFailedToken    ch    =    new    AssertionFailedToken(token.charAt(i));    	non-compiled	[CE]  	11	None	replace
161	[BUG]  [BUGGY]  if(stopAtNonOption  ||  eatTheRest  ||  token.charAt(i)!=  '-')  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||  eatTheRest  ||  token.charAt(i)!=  '-')  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||  eatTheRest  ||  token.charAt(i)!=  '-')  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
162	[BUG]  [BUGGY]  if(stopAtNonOption  ||!eatTheRest)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  if(stopAtNonOption  ||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	if(stopAtNonOption  ||!eatTheRest)  {	  if(stopAtNonOption    ||    eatTheRest)    {    	non-compiled	[CE]  	51	None	replace
163	[BUG]  [BUGGY]  AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	15	None	replace
164	[BUG]  [BUGGY]  AssertionFailedToName(token,  i)  ==  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  i)  ==  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  i)  ==  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	15	None	replace
165	[BUG]  [BUGGY]  AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));      [BUGGY]  AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      if  (options.hasOption(ch))    {  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli19/src/java/org/apache/commons/cli/PosixParser.java	0.3779644730092272	273	274	1	replace	AssertionFailedToName(token,  i),  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    Option    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	15	None	replace
