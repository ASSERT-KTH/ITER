bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  tType  =  0.25  *  dN;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.25  *  dN;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.25  *  dN;	  double    tType    =    0.5    *    dN;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
2	[BUG]  [BUGGY]  double  tType  =  0.5;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5;	  double    tType    =    0.0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  double  tType  =  1.0;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  1.0;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  1.0;	  double    tType    =    0.0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  tType  =  Math.max(tType,  deflated);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  Math.max(tType,  deflated);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  Math.max(tType,  deflated);	  tType    =    Math.min(tType,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
5	[BUG]  [BUGGY]  double  tType  =  1.0  *  dMin;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  1.0  *  dMin;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  1.0  *  dMin;	  double    tType    =    1.25    *    dMin;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
6	[BUG]  [BUGGY]  double  tType  =  5.0  *  dMin;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  5.0  *  dMin;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  5.0  *  dMin;	  double    tType    =    1.25    *    dMin;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
7	[BUG]  [BUGGY]  double  tType  =  0.25  *  Math.sqrt(a3);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.25  *  Math.sqrt(a3);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.25  *  Math.sqrt(a3);	  double    tType    =    0.5    *    Math.sqrt(a3);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  double  tType  =  0.5  *  Math.log(a3);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5  *  Math.log(a3);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5  *  Math.log(a3);	  double    tType    =    0.5    *    Math.sqrt(a3);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  tType  =  DEFAULT_TYPE  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  DEFAULT_TYPE  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  DEFAULT_TYPE  +  1;	  tType    =    DEFAULT_TYPE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  tType  =  T_TYPE;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  T_TYPE;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  T_TYPE;	  tType    =    DEFAULT_TYPE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
11	[BUG]  [BUGGY]  tType  =  DEFAULT_TYPE  *  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  DEFAULT_TYPE  *  2;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  DEFAULT_TYPE  *  2;	  tType    =    DEFAULT_TYPE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
12	[BUG]  [BUGGY]  tType  =  TYPE_INT;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  TYPE_INT;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  TYPE_INT;	  tType    =    TYPE_ARRAY;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  tType  =  TYPE_ARRAY  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  TYPE_ARRAY  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  TYPE_ARRAY  +  1;	  tType    =    TYPE_ARRAY;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
14	[BUG]  [BUGGY]  tType  =  TYPE_OBJECT;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  TYPE_OBJECT;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  TYPE_OBJECT;	  tType    =    TYPE_ARRAY;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
15	[BUG]  [BUGGY]  double  tType  =  0.5  *  Math.rint(a2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5  *  Math.rint(a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5  *  Math.rint(a2);	  double    tType    =    0.5    *    Math.log(a2);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  double  tType  =  0.25  *  Math.log(a2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.25  *  Math.log(a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.25  *  Math.log(a2);	  double    tType    =    0.5    *    Math.log(a2);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  double  tType  =  0.25  *  dMin  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.25  *  dMin  +  1;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.25  *  dMin  +  1;	  double    tType    =    0.25    *    dMin;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  double  tType  =  0.5  *  dMin  +  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5  *  dMin  +  2;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5  *  dMin  +  2;	  double    tType    =    0.5    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  double  tType  =  0.5  *  dMin  +  3;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5  *  dMin  +  3;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5  *  dMin  +  3;	  double    tType    =    0.5    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  double  tType  =  2.0  *  Math.log(a2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  Math.log(a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  Math.log(a2);	  double    tType    =    2.0    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  tType  =  Math.max(tType,  tau);  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  Math.max(tType,  tau);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  Math.max(tType,  tau);	  tType    =    Math.max(tType,    dN2);    	non-compiled	[CE]  >  expected	7	None	replace
22	[BUG]  [BUGGY]  double  tType  =  0.25  *  dN2;  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.25  *  dN2;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.25  *  dN2;	  double    tType    =    0.5    *    dN2;    	non-compiled	[CE]  >  expected	18	None	replace
23	[BUG]  [BUGGY]  double  tType  =  2.0  *  dMin;  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  dMin;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  dMin;	  double    tType    =    0.25    *    dMin;    	non-compiled	[CE]  >  expected	11	None	replace
24	[BUG]  [BUGGY]  tType  =  DEFAULT_TYPE  +  2;  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  DEFAULT_TYPE  +  2;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  DEFAULT_TYPE  +  2;	  tType    =    DEFAULT_TYPE;    	non-compiled	[CE]  >  expected	16	None	replace
25	[BUG]  [BUGGY]  double  tType  =  2.0  *  Math.sqrt(a3);  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  Math.sqrt(a3);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  Math.sqrt(a3);	  double    tType    =    2.0    *    Math.sqrt(a2);    	non-compiled	[CE]  >  expected	20	None	replace
26	[BUG]  [BUGGY]  double  tType  =  2.0  *  dMin  +  1;  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  dMin  +  1;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  dMin  +  1;	  double    tType    =    0.5    *    dMin    +    1;    	non-compiled	[CE]  >  expected	12	None	replace
27	[BUG]  [BUGGY]  double  tType  =  0.5  *  Math.pow(10,  a2);  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  0.5  *  Math.pow(10,  a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  0.5  *  Math.pow(10,  a2);	  double    tType    =    0.5    *    Math.log(a2);    	non-compiled	[CE]  >  expected	5	None	replace
28	[BUG]  [BUGGY]  tType  =  Math.min(tType,  cnst1);  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  Math.min(tType,  cnst1);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  Math.min(tType,  cnst1);	  tType    =    Math.min(tType,    a2);    	non-compiled	[CE]  >  expected	15	None	replace
29	[BUG]  [BUGGY]  double  tType  =  2.0  *  dN2;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  dN2;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  dN2;	  double    tType    =    0.5    *    dN2;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
30	[BUG]  [BUGGY]  double  tType  =  5.0  *  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  5.0  *  Math.sqrt(a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  5.0  *  Math.sqrt(a2);	  double    tType    =    0.25    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  double  tType  =  2.0;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0;	  double    tType    =    0.0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  double  tType  =  2.0  *  dN;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  2.0  *  dN;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  2.0  *  dN;	  double    tType    =    0.5    *    dN;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  double  tType  =  1.5  *  dMin  +  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  1.5  *  dMin  +  1;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  1.5  *  dMin  +  1;	  double    tType    =    0.5    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
34	[BUG]  [BUGGY]  double  tType  =  1.25  *  dMin  +  1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  1.25  *  dMin  +  1;  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  1.25  *  dMin  +  1;	  double    tType    =    0.5    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
35	[BUG]  [BUGGY]  double  tType  =  1.0  *  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  double  tType  =  1.0  *  Math.sqrt(a2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	double  tType  =  1.0  *  Math.sqrt(a2);	  double    tType    =    0.25    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  tType  =  DEFAULT_TYPE  ||  deflated;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  DEFAULT_TYPE  ||  deflated;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  DEFAULT_TYPE  ||  deflated;	  tType    =    DEFAULT_TYPE;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
37	[BUG]  [BUGGY]  tType  =  Math.min(tType,  tN2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {        [BUGGY]  tType  =  Math.min(tType,  tN2);  [BUGGY]      tType  =  -5;  double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1529	1529	1	replace	tType  =  Math.min(tType,  tN2);	  tType    =    Math.min(tType,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
