bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i];		non-compiled	[CE]  ';'  expected	20	None	add
2	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i]		non-compiled	[CE]  ';'  expected	20	None	add
3	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  main[i];		non-compiled	[CE]  ';'  expected	20	None	add
4	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary  =  squaredSecondary[i		non-compiled	[CE]  ';'  expected	20	None	add
5	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvectors  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);		non-compiled	[CE]  ';'  expected	20	None	add
6	[BUG]  [BUGGY]  decompose(this.splitTolerance);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(this.splitTolerance);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(this.splitTolerance);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
7	[BUG]  [BUGGY]  decompose(squaredSecondary);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(squaredSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
8	[BUG]  [BUGGY]  decompose(s);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(s);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(s);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
9	[BUG]  [BUGGY]  decompose(quadSecondary);  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(quadSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quadSecondary);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
10	[BUG]  [BUGGY]  decompose(quardSecondary);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(quardSecondary);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(quardSecondary);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
11	[BUG]  [BUGGY]  decompose(squaredSecondary.length);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  decompose(squaredSecondary.length);  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	decompose(squaredSecondary.length);	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
12	[BUG]  [BUGGY]    ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[secondary.length];  for(int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double[]  secondary[]  =  primary[i];		non-compiled	[CE]  ';'  expected	20	None	add
13	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.length]);		non-compiled	[CE]  ';'  expected	20	None	add
14	[BUG]  [BUGGY]  rehashTable();  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  rehashTable();  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	rehashTable();	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
15	[BUG]  [BUGGY]  reset();  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  reset();  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	reset();	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
16	[BUG]  [BUGGY]  rehashCode();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]  rehashCode();  [BUGGY]    }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	rehashCode();	decompose();  	non-compiled	[CE]  ';'  expected	19	None	replace
17	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvectors();  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvectors();  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvectors();		non-compiled	[CE]  ';'  expected	20	None	add
18	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[squaredSecondary.size()  ]);		non-compiled	[CE]  ';'  expected	20	None	add
19	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();		non-compiled	[CE]  ';'  expected	20	None	add
20	[BUG]  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  [BUGGY]    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);  [BUGGY]  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	205	205	1	replace	    ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);		non-compiled	[CE]  ';'  expected	20	None	add
