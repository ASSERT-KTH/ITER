bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  a2  =  1.0  *  gam;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  1.0  *  gam;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  1.0  *  gam;	  a2    =    1.0;    	non-compiled	[CE]  ';'  expected	6	None	replace
2	[BUG]  [BUGGY]  a2  =  dN;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  dN;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  dN;	  a2    =    dN1;    	non-compiled	[CE]  ';'  expected	12	None	replace
3	[BUG]  [BUGGY]  a2  =  gam;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  gam;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  gam;	  a2    =    dN1;    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  a2  =  dN2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  dN2;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  dN2;	  a2    =    dN1;    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  tType  =  -2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  -2;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  -2;	      tType    =    -1;    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  tType  =  0;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  0;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  0;	      tType    =    -1;    	non-compiled	[CE]  ';'  expected	3	None	replace
7	[BUG]  [BUGGY]  tType  =  s  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  s  +  1;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  s  +  1;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
8	[BUG]  [BUGGY]  tType  =  s.length;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  s.length;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  s.length;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  tType  =  s  +  2;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  s  +  2;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  s  +  2;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  np  =  Math.min(tType,  s);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(tType,  s);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(tType,  s);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
11	[BUG]  [BUGGY]  np  =  Math.min(tType,  pingPong);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(tType,  pingPong);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(tType,  pingPong);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
12	[BUG]  [BUGGY]  np  =  Math.max(tType,  gam);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(tType,  gam);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(tType,  gam);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
13	[BUG]  [BUGGY]  np  =  Math.min(tType,  gam  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(tType,  gam  +  1);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(tType,  gam  +  1);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
14	[BUG]  [BUGGY]  np  =  np  -  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  np  -  2;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  np  -  2;	      np    =    np    -    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  np  =  np  -  3;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  np  -  3;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  np  -  3;	      np    =    np    -    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  np  =  np  -  4;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  np  -  4;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  np  -  4;	      np    =    np    -    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
17	[BUG]  [BUGGY]  tType  =  2;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  2;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  2;	      tType    =    -4;    	non-compiled	[CE]  ';'  expected	1	None	replace
18	[BUG]  [BUGGY]  tType  =  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  1;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  1;	      tType    =    -4;    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  tType  =  1.0  *  dMin;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  1.0  *  dMin;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  1.0  *  dMin;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  tType  =  0.5  *  dMin;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  0.5  *  dMin;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  0.5  *  dMin;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
21	[BUG]  [BUGGY]  tType  =  0.0  *  dMin;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  0.0  *  dMin;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  0.0  *  dMin;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
22	[BUG]  [BUGGY]  tType  =  0.0;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  0.0;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  0.0;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
23	[BUG]  [BUGGY]  tType  =  1.0;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  1.0;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  1.0;	      tType    =    2.0;    	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  tType  =  0.5;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  0.5;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  0.5;	      tType    =    2.0;    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  tType  =  4.0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  4.0;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  4.0;	      tType    =    2.0;    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  np  =  Math.max(s,  tType,  deflated);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(s,  tType,  deflated);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(s,  tType,  deflated);	      np    =    Math.max(s,    tType);    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  np  =  Math.min(s,  tType);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(s,  tType);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(s,  tType);	      np    =    Math.max(s,    tType);    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  np  =  Math.max(tType,  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(tType,  2);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(tType,  2);	      np    =    Math.max(tType,    s);    	non-compiled	[CE]  ';'  expected	16	None	replace
29	[BUG]  [BUGGY]  np  =  Math.min(tType,  np);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(tType,  np);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(tType,  np);	      np    =    Math.max(tType,    np);    	non-compiled	[CE]  ';'  expected	10	None	replace
30	[BUG]  [BUGGY]  np  =  Math.max(tType,  np  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(tType,  np  +  1);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(tType,  np  +  1);	      np    =    Math.max(tType,    np);    	non-compiled	[CE]  ';'  expected	10	None	replace
31	[BUG]  [BUGGY]  a2  =  0.5  *  gam;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  0.5  *  gam;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  0.5  *  gam;	  a2    =    0.5;    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(tType  >  0.0)  {  tType  =  -4;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(tType  >  0.0)  {  tType  =  -4;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(tType  >  0.0)  {  tType  =  -4;  }	      if(gam    >    0.0)    {    tType    =    -4;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  if(gam  >  0.0)  {  tType  =  -1;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(gam  >  0.0)  {  tType  =  -1;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(gam  >  0.0)  {  tType  =  -1;  }	      if(gam    >    0.0)    {    tType    =    -4;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
34	[BUG]  [BUGGY]  a2  =  dN1  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  dN1  +  1;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  dN1  +  1;	  a2    =    dN1;    	non-compiled	[CE]  ';'  expected	12	None	replace
35	[BUG]  [BUGGY]  tType  =  -2.0;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  -2.0;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  -2.0;	      tType    =    2.0;    	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  if(gam  >  0.0)  {  tType  =  -3;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(gam  >  0.0)  {  tType  =  -3;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(gam  >  0.0)  {  tType  =  -3;  }	      if(gam    >    0.0)    {    tType    =    -4;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
37	[BUG]  [BUGGY]  np  =  Math.max(s,  gam);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(s,  gam);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(s,  gam);	      np    =    Math.max(s,    tType);    	non-compiled	[CE]  ';'  expected	14	None	replace
38	[BUG]  [BUGGY]  tType  =  -gam;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  -gam;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  -gam;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  tType  =  dN;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  dN;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  dN;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
40	[BUG]  [BUGGY]  np  =  Math.min(gam,  tType);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(gam,  tType);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(gam,  tType);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  tType  =  4.0  *  dMin;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  4.0  *  dMin;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  4.0  *  dMin;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
42	[BUG]  [BUGGY]  if(gam  >  0.0)  {  a2  =  0.0;  }  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(gam  >  0.0)  {  a2  =  0.0;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(gam  >  0.0)  {  a2  =  0.0;  }	      a2    =    0.0;    	non-compiled	[CE]  ';'  expected	2	None	replace
43	[BUG]  [BUGGY]  if(gam  >  0)  {  a2  =  0.0;  }  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(gam  >  0)  {  a2  =  0.0;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(gam  >  0)  {  a2  =  0.0;  }	      a2    =    0.0;    	non-compiled	[CE]  ';'  expected	2	None	replace
44	[BUG]  [BUGGY]  np  =  Math.max(tType,  np  -  1);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(tType,  np  -  1);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(tType,  np  -  1);	      np    =    Math.max(tType,    np);    	non-compiled	[CE]  ';'  expected	10	None	replace
45	[BUG]  [BUGGY]  np  =  Math.max(s,  np);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.max(s,  np);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.max(s,  np);	      np    =    Math.max(tType,    np);    	non-compiled	[CE]  ';'  expected	10	None	replace
46	[BUG]  [BUGGY]  tType  =  s  *  gam;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  s  *  gam;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  s  *  gam;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  tType  =  dN1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  dN1;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  dN1;	      tType    =    s;    	non-compiled	[CE]  ';'  expected	5	None	replace
48	[BUG]  [BUGGY]  a2  =  0.5  *  s;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  0.5  *  s;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  0.5  *  s;	  a2    =    0.5;    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  np  =  Math.min(tType,  gam  -  1);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  Math.min(tType,  gam  -  1);  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  Math.min(tType,  gam  -  1);	      np    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	13	None	replace
50	[BUG]  [BUGGY]  tType  =  -3;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  -3;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  -3;	      if(gam    >    0.0)    {    tType    =    -4;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  if(tType  >  0.0)  {  tType  =  -3;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  if(tType  >  0.0)  {  tType  =  -3;  }  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	if(tType  >  0.0)  {  tType  =  -3;  }	      if(gam    >    0.0)    {    tType    =    -4;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
52	[BUG]  [BUGGY]  np  =  np  -  1  *  gam;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  np  =  np  -  1  *  gam;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	np  =  np  -  1  *  gam;	      np    =    np    -    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
53	[BUG]  [BUGGY]  tType  =  2.0  *  dMin;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  tType  =  2.0  *  dMin;  [BUGGY]    a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	tType  =  2.0  *  dMin;	      tType    =    0.25    *    dMin;    	non-compiled	[CE]  ';'  expected	9	None	replace
54	[BUG]  [BUGGY]  a2  =  dMin;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;    [BUGGY]  a2  =  dMin;  [BUGGY]    if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1480	1480	1	replace	a2  =  dMin;	  a2    =    dN1;    	non-compiled	[CE]  ';'  expected	12	None	replace
