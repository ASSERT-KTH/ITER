bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  b1  =  b2  *  4  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  4  +  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  4  +  1;	  b1    =    b2    *    4;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
2	[BUG]  [BUGGY]  b1  =  b2  *  4  +  pingPong;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  4  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  4  +  pingPong;	  b1    =    b2    *    4;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
3	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  1);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  1);	  ArrayDecompositionImpl    work[]    =    computeShiftIncrement(b2,    i4);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
4	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  -  2);	  ArrayDecompositionImpl    work[]    =    computeShiftIncrement(b2,    i4);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
5	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  3;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  3;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  1]  /  3;	  b1    =    b2    *    work[i4    -    1]    +    3;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
6	[BUG]  [BUGGY]  for(int  i4  =  np;  i4  >=  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  np;  i4  >=  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  np;  i4  >=  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
7	[BUG]  [BUGGY]  for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  2]  /  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  2]  /  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  2]  /  1;	  b1    =    b2    *    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
10	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  2]  +  3;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  2]  +  3;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  2]  +  3;	  b1    =    b2    *    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
11	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  2]  +  4;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  2]  +  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  2]  +  4;	  b1    =    b2    *    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
12	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement();  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeShiftIncrement();	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
13	[BUG]  [BUGGY]  b1  =  b2  *  start  +  2  +  pingPong;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  start  +  2  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  start  +  2  +  pingPong;	  b1    =    b2    *    2    +    pingPong;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
14	[BUG]  [BUGGY]  b1  =  b2  *  2  +  start;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  2  +  start;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  2  +  start;	  b1    =    b2    *    2    +    pingPong;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
15	[BUG]  [BUGGY]  b1  =  b2  *  2  +  start  +  pingPong;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  2  +  start  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  2  +  start  +  pingPong;	  b1    =    b2    *    2    +    pingPong;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
16	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  4;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  1]  /  4;	  b1    =    b2    *    work[i4    -    1]    +    4;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
17	[BUG]  [BUGGY]  b1  =  a2  +  b2.doubleValue()  *  4;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2.doubleValue()  *  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2.doubleValue()  *  4;	  b1    =    a2    +    b2.doubleValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  2]  +  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  2]  +  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  *  work[i4  -  2]  +  1);	  b2    =    Math.max(b2,    work[i4]    *    work[i4    -    2]);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
19	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  3]);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  3]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  *  work[i4  -  3]);	  b2    =    Math.max(b2,    work[i4]    *    work[i4    -    2]);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
20	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  deflated);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  deflated);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2,  deflated);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  2,  deflated);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
23	[BUG]  [BUGGY]  b1  =  a2  *  b3;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b3;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b3;	  b1    =    a2    +    b3;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
24	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  2;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  1]  /  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  1]  /  2;	  b1    =    b2    *    work[i4    -    1]    +    2;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
25	[BUG]  [BUGGY]  b1  =  1.0;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  1.0;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  1.0;	  b1    =    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  b2  =  0.0;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  0.0;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  0.0;	  b1    =    0.0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  b1  =  0.5  *  Math.log(b2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  0.5  *  Math.log(b2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  0.5  *  Math.log(b2);	  b1    =    0.0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(1);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1])+  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1])+  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1])+  2;	  b1    =    b2    *(work[i4]    /    work[i4    -    1])+    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
30	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  4]);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  *  work[i4  -  4]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  *  work[i4  -  4]);	  b2    =    Math.max(b2,    work[i4]    *    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  *  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  *  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  *  1);	  b2    =    Math.max(b2,    work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
32	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  +  3);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  +  3);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  /  work[i4  -  2]  +  3);	  b2    =    Math.max(b2,    work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
33	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1.length);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1.length);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1.length);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2.length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
34	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  +  1);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  +  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  +  1);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2.length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
35	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  1);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  1);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2.length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
36	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length,  deflated);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length,  deflated);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2.length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
37	[BUG]  [BUGGY]  b1  =  a2  *  b4;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b4;	  b1    =    a2    +    b4;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  b1  =  a2  +  b2  *  end;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  *  end;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  *  end;	  b1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
39	[BUG]  [BUGGY]  b1  =  a2  +  b2  *  start;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  *  start;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  *  start;	  b1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
40	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  2]  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  2]  +  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  *  work[i4  -  2]  +  1);	  b2    =    Math.max(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
41	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  2]  *  1);  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  2]  *  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  /  work[i4  -  2]  *  1);	  b2    =    Math.max(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
42	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  2]  +  3);  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  2]  +  3);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  /  work[i4  -  2]  +  3);	  b2    =    Math.max(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  not  a  statement	26	None	replace
43	[BUG]  [BUGGY]  b1  =  a2  +  2;  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  2;	  b1    =    b2    +    2;    	non-compiled	[CE]  not  a  statement	67	None	replace
44	[BUG]  [BUGGY]  b1  =  b2  +  1;  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  +  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  +  1;	  b1    =    b2    +    2;    	non-compiled	[CE]  not  a  statement	67	None	replace
45	[BUG]  [BUGGY]  b1  =  b2  +  4;  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  +  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  +  4;	  b1    =    b2    +    2;    	non-compiled	[CE]  not  a  statement	67	None	replace
46	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  1);  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  1);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2,    i4);    	non-compiled	[CE]  not  a  statement	48	None	replace
47	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  2);  [CE]  not  a  statement  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4  -  2);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2,    i4);    	non-compiled	[CE]  not  a  statement	48	None	replace
48	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }  [CE]  not  a  statement  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
49	[BUG]  [BUGGY]  for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [CE]  not  a  statement  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
50	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  deflated);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  deflated);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  not  a  statement	22	None	replace
51	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  end);  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  end);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  end);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  not  a  statement	22	None	replace
52	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  1]);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  1]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  *  work[i4  -  1]);	  b2    =    Math.max(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  not  a  statement	25	None	replace
53	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  4]);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  4]);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  4]);	  b1    =    b2    *(work[i4]    /    work[i4    -    3]);    	non-compiled	[CE]  not  a  statement	31	None	replace
54	[BUG]  [BUGGY]  b2  =  1;  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  1;	  b2    =    0;    	non-compiled	[CE]  not  a  statement	57	None	replace
55	[BUG]  [BUGGY]  b2  =  4;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  4;	  b2    =    0;    	non-compiled	[CE]  not  a  statement	57	None	replace
56	[BUG]  [BUGGY]  b2  =  2;  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  2;	  b2    =    0;    	non-compiled	[CE]  not  a  statement	57	None	replace
57	[BUG]  [BUGGY]  b2  =  work[i4]  *  work[i4  -  4];  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  work[i4]  *  work[i4  -  4];  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  work[i4]  *  work[i4  -  4];	  b2    =    work[i4]    /    work[i4    -    4];    	non-compiled	[CE]  not  a  statement	43	None	replace
58	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	45	None	replace
59	[BUG]  [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  deflated);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  deflated);	  ArrayDecompositionImpl    b1    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	69	None	replace
60	[BUG]  [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1);  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1);	  ArrayDecompositionImpl    b1    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	69	None	replace
61	[BUG]  [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  i4);  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  i4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  i4);	  ArrayDecompositionImpl    b1    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	69	None	replace
62	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  deflated);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  deflated);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	53	None	replace
63	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  i4);  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  i4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  i4);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	53	None	replace
64	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1);  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  not  a  statement	53	None	replace
65	[BUG]  [BUGGY]  b1  =  a2  *  b2  +  1;  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b2  +  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b2  +  1;	  b1    =    a2    *    b2;    	non-compiled	[CE]  not  a  statement	34	None	replace
66	[BUG]  [BUGGY]  b1  =  b2  *  a2;  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  a2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  a2;	  b1    =    a2    *    b2;    	non-compiled	[CE]  not  a  statement	34	None	replace
67	[BUG]  [BUGGY]  b1  =  a2  *  cnst1;  [CE]  not  a  statement  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  cnst1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  cnst1;	  b1    =    a2    *    b2;    	non-compiled	[CE]  not  a  statement	34	None	replace
68	[BUG]  [BUGGY]  b2  =  Math.max(b1,  work[i4]  *  work[i4  -  2]);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b1,  work[i4]  *  work[i4  -  2]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b1,  work[i4]  *  work[i4  -  2]);	  b2    =    Math.max(b1,    work[i4]    /    work[i4    -    2]);    	non-compiled	[CE]  not  a  statement	70	None	replace
69	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  4);  [CE]  not  a  statement  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  4);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  4);	  b1    =    b2    *(work[i4]    /    work[i4    -    1]    +    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
70	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  3);  [CE]  not  a  statement  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  3);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  3);	  b1    =    b2    *(work[i4]    /    work[i4    -    1]    +    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
71	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);  [CE]  not  a  statement  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);	  b1    =    b2    *(work[i4]    /    work[i4    -    1]    +    2);    	non-compiled	[CE]  not  a  statement	50	None	replace
72	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }  [CE]  not  a  statement  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  2)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
73	[BUG]  [BUGGY]  for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  1;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
74	[BUG]  [BUGGY]  b1  =  a2  +  b2  *  4;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  *  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  *  4;	  b1    =    a2    +    b2    *    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
75	[BUG]  [BUGGY]  b1  =  a2  +  b2  *  1;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  *  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  *  1;	  b1    =    a2    +    b2    *    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
76	[BUG]  [BUGGY]  for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  np;  i4  <  work.length;  i4  -=  2)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
77	[BUG]  [BUGGY]  for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  start;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
78	[BUG]  [BUGGY]  b1  =  a2  +  b3.doubleValue();  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b3.doubleValue();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b3.doubleValue();	  b1    =    a2    +    b1.doubleValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
79	[BUG]  [BUGGY]  b1  =  a2  *  b1.doubleValue();  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b1.doubleValue();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b1.doubleValue();	  b1    =    a2    +    b1.doubleValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
80	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(end);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(end);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(end);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(deflated);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
81	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(6);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(6);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(6);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(4);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
82	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  3]);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  *  work[i4  -  3]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  *  work[i4  -  3]);	  b2    =    Math.max(work[i4]    /    work[i4    -    3]);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
83	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  3);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  3);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  3);	  b1    =    b2    *(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
84	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  4);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  4);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  2]  +  4);	  b1    =    b2    *(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  2);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i4    -    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
86	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i4  -  1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i4  -  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i4  -  1);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i4    -    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
87	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  4);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  4);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i4    -    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
88	[BUG]  [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  2]);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  2]);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  b2  *(work[i4]  /  work[i4  -  2]);	  b2    =    b2    *(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
89	[BUG]  [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  3]);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  3]);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  b2  *(work[i4]  /  work[i4  -  3]);	  b2    =    b2    *(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
90	[BUG]  [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  1);	  b2    =    b2    *(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
91	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b1,  i2);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i2);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
92	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  a2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  a2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  a2);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i2);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
93	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])+  3;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])+  3;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  2])+  3;	  b1    =    b2    *(work[i4]    /    work[i4    -    2])+    1;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
94	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b1);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  b2,  deflated);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  b2,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b1,  b2,  deflated);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  i4);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  i4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  i4);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)b2.clone();  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)b2.clone();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[]  =(ArrayRealVector)b2.clone();	  ArrayRealVector    work[]    =(ArrayRealVector)b.clone();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
98	[BUG]  [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)this.work.clone();  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)this.work.clone();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[]  =(ArrayRealVector)this.work.clone();	  ArrayRealVector    work[]    =(ArrayRealVector)b.clone();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
99	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2.length);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2.length);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2.length);	  ArrayDecompositionImpl    b2    =    new    ArrayDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
100	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1.length);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1.length);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1.length);	  ArrayDecompositionImpl    b2    =    new    ArrayDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
101	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2,  deflated);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2,  deflated);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b2,  deflated);	  ArrayDecompositionImpl    b2    =    new    ArrayDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
102	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0,  deflated);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0,  deflated);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0,  deflated);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
103	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
104	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  4);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  4);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  4);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
105	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end,  deflated);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end,  deflated);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  end,  deflated);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
106	[BUG]  [BUGGY]  b2  =  work[i4]  *  work[i4  -  2]  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  work[i4]  *  work[i4  -  2]  +  1;  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  work[i4]  *  work[i4  -  2]  +  1;	  b2    =    work[i4]    /    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
107	[BUG]  [BUGGY]  b2  =  work[i4]  /  work[i4  -  2]  +  3;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  work[i4]  /  work[i4  -  2]  +  3;  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  work[i4]  /  work[i4  -  2]  +  3;	  b2    =    work[i4]    /    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
108	[BUG]  [BUGGY]  b2  =  work[i4]  /  work[i4  -  2]  *  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  work[i4]  /  work[i4  -  2]  *  1;  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  work[i4]  /  work[i4  -  2]  *  1;	  b2    =    work[i4]    /    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	68	None	replace
109	[BUG]  [BUGGY]  b1  =  a2  *  deflated;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  deflated;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  deflated;	  b1    =    a2    +    deflated;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
110	[BUG]  [BUGGY]  b1  =  a2  +  pingPong;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  pingPong;	  b1    =    a2    +    deflated;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
111	[BUG]  [BUGGY]  b1  =  a2  +  b2.length;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2.length;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2.length;	  b1    =    a2    +    deflated;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
112	[BUG]  [BUGGY]  b2  =  Math.max(b1,  work[i4]  *  work[i4  -  1]);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b1,  work[i4]  *  work[i4  -  1]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b1,  work[i4]  *  work[i4  -  1]);	  b2    =    Math.max(b1,    work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
113	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  0);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  0);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  0);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
114	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(i4);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(i4);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(i4);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
115	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  b2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  b2);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
116	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
117	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
118	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  i4);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  i4);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  i4);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
119	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  0);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
120	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  a2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  a2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[i4]  =  computeShiftIncrement(b2,  a2);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
121	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2.length  -  2);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2.length);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
122	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  >=  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  1)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
123	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  >=  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4  -=  4)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
124	[BUG]  [BUGGY]  b1  =  a2  +  b2  +  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  +  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  +  2;	  b1    =    a2    +    b2    +    1;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  b1  =  b2  *  work[i4  -  1]  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  work[i4  -  1]  +  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  work[i4  -  1]  +  1;	  b1    =    b2    *    work[i4    -    2]    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
126	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1,  b2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1,  b2);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
127	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  b2);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
128	[BUG]  [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1,  b2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b1,  b2);	  ArrayDecompositionImpl    b1    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
129	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1])/  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1])/  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1])/  2;	  b1    =    b2    *(work[i4]    /    work[i4    -    1])+    1;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
130	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])/  2;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])/  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  2])/  2;	  b1    =    b2    *(work[i4]    /    work[i4    -    2])+    1;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
131	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])/  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  2])/  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  2])/  1;	  b1    =    b2    *(work[i4]    /    work[i4    -    2])+    1;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
132	[BUG]  [BUGGY]  b1  =  b2  *  start  +  pingPong;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  start  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  start  +  pingPong;	  b1    =    b2    *    2    +    pingPong;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
133	[BUG]  [BUGGY]  b1  =  a2  *  2  +  pingPong;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  2  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  2  +  pingPong;	  b1    =    b2    *    2    +    pingPong;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
134	[BUG]  [BUGGY]  b1  =  b2  +  pingPong;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  +  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  +  pingPong;	  b1    =    b2    +    2;    	non-compiled	[CE]  <identifier>  expected	67	None	replace
135	[BUG]  [BUGGY]  b1  =  2.0;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  2.0;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  2.0;	  b1    =    0.0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
136	[BUG]  [BUGGY]  b1  =  a2  *  b2.doubleValue();  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b2.doubleValue();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b2.doubleValue();	  b1    =    a2    +    b2.doubleValue();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
137	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  0);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  0);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  0);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
138	[BUG]  [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)block.clone();  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)block.clone();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[]  =(ArrayRealVector)block.clone();	  ArrayRealVector    work[]    =(ArrayRealVector)b.clone();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
139	[BUG]  [BUGGY]  b1  =  a2  *  b2  +  2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b2  +  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b2  +  2;	  b1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
140	[BUG]  [BUGGY]  b1  =  a2  *  b2  +  4;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  *  b2  +  4;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  *  b2  +  4;	  b1    =    a2    *    b2;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
141	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(i4);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(i4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(i4);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(deflated);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
142	[BUG]  [BUGGY]  b1  =  b2  *  4  +  deflated;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *  4  +  deflated;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *  4  +  deflated;	  b1    =    b2    *    4;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
143	[BUG]  [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  b2  *(work[i4]  /  work[i4  -  1]  +  2);	  b2    =    b2    *(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
144	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  +  1);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  +  1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeShiftIncrement(b2,  i4  +  1);	  ArrayDecompositionImpl    work[]    =    computeShiftIncrement(b2,    i4);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
145	[BUG]  [BUGGY]  b1  =  2  *  Math.max(b2,  b2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  2  *  Math.max(b2,  b2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  2  *  Math.max(b2,  b2);	  b1    =    2;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
146	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  3);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  3);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  i4  -  3);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i4    -    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
147	[BUG]  [BUGGY]  b1  =  a2  +  b2  -  2;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  -  2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  -  2;	  b1    =    a2    +    b2    *    2;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
148	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(3);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(3);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(3);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(2);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
149	[BUG]  [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  1]  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(work[i4]  /  work[i4  -  1]  +  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(work[i4]  /  work[i4  -  1]  +  1);	  b2    =    Math.max(work[i4]    /    work[i4    -    2]    +    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
150	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(i4,  b1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(i4,  b1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(i4,  b1);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b1,    i4);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
151	[BUG]  [BUGGY]  b1  =  a2  +  b2  *  pingPong;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2  *  pingPong;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2  *  pingPong;	  b1    =    a2    +    b2    *    deflated;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
152	[BUG]  [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  4]);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.max(b2,  work[i4]  /  work[i4  -  4]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.max(b2,  work[i4]  /  work[i4  -  4]);	  b2    =    Math.max(b2,    work[i4]    /    work[i4    -    3]);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
153	[BUG]  [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1])+  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  b2  *(work[i4]  /  work[i4  -  1])+  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  b2  *(work[i4]  /  work[i4  -  1])+  1;	  b2    =    b2    *(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
154	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(5);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(5);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(5);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(4);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
155	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  new  ArrayDecompositionImpl(b1);	  ArrayDecompositionImpl    b2    =    new    ArrayDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
156	[BUG]  [BUGGY]  b1  =  a2  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  1;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  1;	  b1    =    a2    +    deflated;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
157	[BUG]  [BUGGY]  b1  =  a2  +  end;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  end;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  end;	  b1    =    a2    +    deflated;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
158	[BUG]  [BUGGY]  b2  =  Math.min(work[i4]  /  work[i4  -  1]);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  Math.min(work[i4]  /  work[i4  -  1]);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  Math.min(work[i4]  /  work[i4  -  1]);	  b2    =    Math.max(work[i4]    /    work[i4    -    1]);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
159	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(block,  i4  -  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(block,  i4  -  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(block,  i4  -  1);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    i4    -    1);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
160	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(deflated  +  1);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(deflated  +  1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(deflated  +  1);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(deflated);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
161	[BUG]  [BUGGY]  b1  =  b2  +  3;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  +  3;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  +  3;	  b1    =    b2    *    3;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
162	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
163	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  bp);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  bp);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  new  ArrayDecompositionImpl(b2,  bp);	  ArrayDecompositionImpl    cnst1    =    new    ArrayDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
164	[BUG]  [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  b2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b1  =  computeDecompositionImpl(b2,  b2);	  ArrayDecompositionImpl    b1    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
165	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  i4);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  i4);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b1,  i4);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b1,    i4);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
166	[BUG]  [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  bp);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  bp);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  cnst1  =  computeDecompositionImpl(b2,  bp);	  ArrayDecompositionImpl    cnst1    =    computeDecompositionImpl(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
167	[BUG]  [BUGGY]  b1  =  0.5  *  Math.max(b1,  b2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  0.5  *  Math.max(b1,  b2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  0.5  *  Math.max(b1,  b2);	  b1    =    0.0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
168	[BUG]  [BUGGY]  if(b2  >=  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  if(b2  >=  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	if(b2  >=  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  >=  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
169	[BUG]  [BUGGY]  ArrayRealVector  work[0]  =  computeShiftIncrement(b2,  deflated);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[0]  =  computeShiftIncrement(b2,  deflated);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[0]  =  computeShiftIncrement(b2,  deflated);	  ArrayRealVector    work[i4]    =    computeShiftIncrement(b2,    deflated);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
170	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4)  {  if(b2  ==  0.0)  {  break;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
171	[BUG]  [BUGGY]  if(b2  ==  0.0)  {  for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  if(b2  ==  0.0)  {  for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	if(b2  ==  0.0)  {  for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
172	[BUG]  [BUGGY]  b1  =  a2  +  b2.doubleValue()  *  deflated;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b2.doubleValue()  *  deflated;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b2.doubleValue()  *  deflated;	  b1    =    a2    +    b2.doubleValue();    	non-compiled	[CE]  ';'  expected	3	None	replace
173	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  cnst1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  cnst1);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  cnst1);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  ';'  expected	45	None	replace
174	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i2);	  ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2,    i4);    	non-compiled	[CE]  ';'  expected	48	None	replace
175	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  b2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  b2);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  b2);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
176	[BUG]  [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  cnst1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  cnst1);  [BUGGY]      b1  =  b2;  if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayDecompositionImpl  b2  =  computeDecompositionImpl(b2,  cnst1);	  ArrayDecompositionImpl    b2    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
177	[BUG]  [BUGGY]  b2  =  a2  +  b2;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b2  =  a2  +  b2;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b2  =  a2  +  b2;	  b1    =    a2    +    b4;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
178	[BUG]  [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  >  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  >  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	for(int  i4  =  0;  i4  <  work.length;  i4++)  {  if(b2  >  0.0)  {  break;  }	  for(int    i4    =    0;    i4    <    work.length;    i4++)    {    if(b2    >=    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
179	[BUG]  [BUGGY]  b1  =  a2  +  b1.doubleValue()  *  deflated;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  a2  +  b1.doubleValue()  *  deflated;  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  a2  +  b1.doubleValue()  *  deflated;	  b1    =    a2    +    b1.doubleValue();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
180	[BUG]  [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)this.workers.clone();  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  ArrayRealVector  work[]  =(ArrayRealVector)this.workers.clone();  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	ArrayRealVector  work[]  =(ArrayRealVector)this.workers.clone();	  ArrayRealVector    work[]    =(ArrayRealVector)b.clone();    	non-compiled	[CE]  <identifier>  expected	47	None	replace
181	[BUG]  [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  /  2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  b1  =  b2  *(work[i4]  /  work[i4  -  1]  /  2);  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	b1  =  b2  *(work[i4]  /  work[i4  -  1]  /  2);	  b1    =    b2    *(work[i4]    /    work[i4    -    1]    +    2);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
182	[BUG]  [BUGGY]  if(b2  ==  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      b2  =  work[nn  -  9]  /  work[nn  -  11];  np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }      [BUGGY]  if(b2  ==  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }  [BUGGY]      if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1507	1507	1	replace	if(b2  ==  0.0)  {  for(int  i4  =  np;  i4  <  work.length;  i4++)  {  if(b2  ==  0.0)  {  break;  }	  for(int    i4    =    np;    i4    <    work.length;    i4++)    {    if(b2    ==    0.0)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
