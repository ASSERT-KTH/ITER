bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  a2  =  Math.max(s,  1.0  *  dN);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  1.0  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  1.0  *  dN);	  a2    =    Math.max(s,    0.25    *    dN);    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  Gam  -=  dN2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  dN2;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  dN2;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
3	[BUG]  [BUGGY]  Gam  -=  dN1  *  gam;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  dN1  *  gam;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  dN1  *  gam;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
4	[BUG]  [BUGGY]  Gam  -=  gam;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  gam;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  gam;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
5	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.25  *  dMin  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.25  *  dMin  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.25  *  dMin  +  1);	  a2    =    Math.max(s,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  a2  =  Math.max(s,  2.0  *  dN  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  2.0  *  dN  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  2.0  *  dN  +  1);	  a2    =    Math.max(s,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin  +  2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin  +  2);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  2.0  *  dMin  +  2);	  a2    =    Math.max(s,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
8	[BUG]  [BUGGY]  gam  -=  tType  +  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  -=  tType  +  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  -=  tType  +  1;	  gam    -=    tType;    	non-compiled	[CE]  ';'  expected	12	None	replace
9	[BUG]  [BUGGY]  gam  =  dN2  +  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  =  dN2  +  2;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  =  dN2  +  2;	  gam    =    dN2    +    1;    	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  a2  =  Math.max(tType,  2.0  *  dN  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  2.0  *  dN  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  2.0  *  dN  +  1);	  a2    =    Math.max(tType,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
11	[BUG]  [BUGGY]  a2  =  Math.max(tType,  0.25  *  dMin  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  0.25  *  dMin  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  0.25  *  dMin  +  1);	  a2    =    Math.max(tType,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
12	[BUG]  [BUGGY]  a2  =  Math.max(s,  3.0  *  dN);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  3.0  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  3.0  *  dN);	  a2    =    Math.max(s,    2.0    *    dN);    	non-compiled	[CE]  ';'  expected	2	None	replace
13	[BUG]  [BUGGY]  a2  =  Math.max(tType,  0.25  *  dN);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  0.25  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  0.25  *  dN);	  a2    =    Math.max(tType,    2.0    *    dN);    	non-compiled	[CE]  ';'  expected	14	None	replace
14	[BUG]  [BUGGY]  a2  =  Math.max(tType,  0.0  *  dMin);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  0.0  *  dMin);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  0.0  *  dMin);	  a2    =    Math.max(tType,    0.333    *    dMin);    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  a2  =  Math.max(tType,  1.0  *  dN);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  1.0  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  1.0  *  dN);	  a2    =    Math.max(tType,    1.0    *    dMin);    	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.75  *  dMin  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.75  *  dMin  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.75  *  dMin  +  1);	  a2    =    Math.max(s,    0.5    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
17	[BUG]  [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin,  gam);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin,  gam);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  2.0  *  dMin,  gam);	  a2    =    Math.max(s,    2.0    *    dMin,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
18	[BUG]  [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin,  tType);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  2.0  *  dMin,  tType);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  2.0  *  dMin,  tType);	  a2    =    Math.max(s,    2.0    *    dMin,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
19	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.25  *  dMin,  tau);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.25  *  dMin,  tau);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.25  *  dMin,  tau);	  a2    =    Math.max(s,    2.0    *    dMin,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  a2  =  Math.max(s,  3.25  *  dMin,  tau);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  3.25  *  dMin,  tau);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  3.25  *  dMin,  tau);	  a2    =    Math.max(s,    2.0    *    dMin,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  gam  -=  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  -=  2;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  -=  2;	  gam    -=    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
22	[BUG]  [BUGGY]  gam  -=  3;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  -=  3;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  -=  3;	  gam    -=    1;    	non-compiled	[CE]  ';'  expected	20	None	replace
23	[BUG]  [BUGGY]  gam  -=  dN1  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  -=  dN1  +  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  -=  dN1  +  1;	  gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	9	None	replace
24	[BUG]  [BUGGY]  gam  =  dN1  +  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  =  dN1  +  2;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  =  dN1  +  2;	  gam    =    dN1    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
25	[BUG]  [BUGGY]  a2  =  Math.max(tType,  0.5  *  dN);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  0.5  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  0.5  *  dN);	  a2    =    Math.max(tType,    0.5    *    dMin);    	non-compiled	[CE]  ';'  expected	7	None	replace
26	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.5  *  dMin,  tau);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.5  *  dMin,  tau);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.5  *  dMin,  tau);	  a2    =    Math.max(s,    2.0    *    dMin,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
27	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.5  *  dN  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.5  *  dN  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.5  *  dN  +  1);	  a2    =    Math.max(s,    0.5    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
28	[BUG]  [BUGGY]  a2  =  Math.max(tType,  2.0  *  dMin  +  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(tType,  2.0  *  dMin  +  2);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(tType,  2.0  *  dMin  +  2);	  a2    =    Math.max(tType,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	18	None	replace
29	[BUG]  [BUGGY]  Gam  -=  dN1  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  dN1  +  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  dN1  +  1;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
30	[BUG]  [BUGGY]  gam  -=  dN2  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  -=  dN2  +  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  -=  dN2  +  1;	  gam    -=    dN2;    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  a2  =  Math.max(s,  0.333  *  dN);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  0.333  *  dN);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  0.333  *  dN);	  a2    =    Math.max(s,    0.25    *    dN);    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  Gam  -=  dN1  -  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  dN1  -  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  dN1  -  1;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
33	[BUG]  [BUGGY]  Gam  -=  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  Gam  -=  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	Gam  -=  1;	  Gam    -=    dN1;    	non-compiled	[CE]  ';'  expected	17	None	replace
34	[BUG]  [BUGGY]  a2  =  Math.max(dN,  2.0  *  tType);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(dN,  2.0  *  tType);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(dN,  2.0  *  tType);	  a2    =    Math.max(tType,    2.0    *    dN);    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  gam  =  dN  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  gam  =  dN  +  1;  [BUGGY]      a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	gam  =  dN  +  1;	  gam    =    dN1    +    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
36	[BUG]  [BUGGY]  a2  =  Math.max(s,  1.0  *  dMin  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      tau  =  Math.max(s,  0.333  *  dMin);  tType  =  -3;  }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {      [BUGGY]  a2  =  Math.max(s,  1.0  *  dMin  +  1);  [BUGGY]      gam  =  dN;  a2  =  0.0;  if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1479	1479	1	replace	a2  =  Math.max(s,  1.0  *  dMin  +  1);	  a2    =    Math.max(s,    2.0    *    dMin    +    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
