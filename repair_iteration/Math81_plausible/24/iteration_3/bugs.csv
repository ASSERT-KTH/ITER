bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  s  =  2.0  *  tType  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2.0  *  tType  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2.0  *  tType  +  1;	  double    s    =    2.0    *    tType;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
2	[BUG]  [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;	  s    =    0.5    *    dMin;    final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
3	[BUG]  [BUGGY]  s  =  0.75  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.75  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.75  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;	  s    =    0.5    *    dMin;    final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
4	[BUG]  [BUGGY]  double  s  =  0.5  *  tType  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  tType  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  tType  +  1;	  double    s    =    0.5    *    tType;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
5	[BUG]  [BUGGY]  double  s  =  0.5  *  tType  +  3;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  tType  +  3;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  tType  +  3;	  double    s    =    0.5    *    tType;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
6	[BUG]  [BUGGY]  tType  =  Math.min(tType,  deflated  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.min(tType,  deflated  +  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.min(tType,  deflated  +  1);	  tType    =    Math.min(tType,    deflated);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
7	[BUG]  [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);	  double    s    =    1.0    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
8	[BUG]  [BUGGY]  double  s  =  1.0;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0;	  double    s    =    1.0    *    dN2;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  double  s  =  0.5  *  dMin  +  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  dMin  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  dMin  +  1;	  double    s    =    0.25    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
10	[BUG]  [BUGGY]  double  s  =  0.25  *  dN  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.25  *  dN  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.25  *  dN  +  1;	  double    s    =    0.25    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
11	[BUG]  [BUGGY]  double  s  =  1.0  *  tType  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  *  tType  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  *  tType  +  1;	  double    s    =    0.25    *    tType    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  double  s  =  0.0  *  tType  +  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.0  *  tType  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.0  *  tType  +  1;	  double    s    =    0.25    *    tType    +    1;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
13	[BUG]  [BUGGY]  double  s  =  0.5  *  dMin2;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  dMin2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  dMin2;	  double    s    =    0.5    *    dN1;    	non-compiled	[CE]  <identifier>  expected	45	None	replace
14	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  *  Math.log(a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  *  Math.log(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  *  Math.log(a2);	  final    int    np    =    nn    -    1    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
15	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  Math.sqrt(a2);	  final    int    np    =    nn    -    1    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
16	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  *  Math.sqrt(a1);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  *  Math.sqrt(a1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  *  Math.sqrt(a1);	  final    int    np    =    nn    -    1    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
17	[BUG]  [BUGGY]  float  pingPong  =  Math.pow(10,  dN2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  float  pingPong  =  Math.pow(10,  dN2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	float  pingPong  =  Math.pow(10,  dN2);	  int    pingPong    =    Math.pow(10,    dN2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  double  pingPong  =  Math.pow(10,  dN2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  pingPong  =  Math.pow(10,  dN2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  pingPong  =  Math.pow(10,  dN2);	  int    pingPong    =    Math.pow(10,    dN2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
19	[BUG]  [BUGGY]  tType  =  Math.max(tType,  deflated  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  deflated  +  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  deflated  +  1);	  tType    =    Math.max(tType,    deflated);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  double  s  =  0.8  *  dN2;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.8  *  dN2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.8  *  dN2;	  double    s    =    0.7    *    dN2;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  double  s  =  2.0  *  dN1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2.0  *  dN1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2.0  *  dN1;	  double    s    =    2.0    *    dN;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
22	[BUG]  [BUGGY]  tType  =  Math.max(tType,  2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  2);	  tType    =    Math.max(tType,    3);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
23	[BUG]  [BUGGY]  tType  =  Math.max(tType,  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  1);	  tType    =    Math.max(tType,    3);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
24	[BUG]  [BUGGY]  tType  =  Math.max(tType,  4);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  4);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  4);	  tType    =    Math.max(tType,    3);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
25	[BUG]  [BUGGY]  double  s  =  1.0  *  dN1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  *  dN1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  *  dN1;	  double    s    =    1.0    *    dN;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  double  s  =  1.0  *  dN2  +  1;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  *  dN2  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  *  dN2  +  1;	  double    s    =    1.0    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  double  s  =  1.0  *  dN  +  1;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  *  dN  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  *  dN  +  1;	  double    s    =    1.0    *    dMin    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  tType  =  Math.min(tType,  a2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.min(tType,  a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.min(tType,  a2);	  tType    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
29	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  +  Math.log(a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  +  Math.log(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  +  Math.log(a2);	  final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
30	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  +  Math.sqrt(a1);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  +  Math.sqrt(a1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  +  Math.sqrt(a1);	  final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
31	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong.length;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  pingPong.length;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  pingPong.length;	  final    int    np    =    nn    -    2    *    tType;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
32	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  cnst1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  cnst1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  cnst1);	  int    pingPong    =    Math.pow(10,    dN);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  s  =  0.25  *  dMin;  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.25  *  dMin;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.25  *  dMin;	  s    =    1.0    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
34	[BUG]  [BUGGY]  s  =  1.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  1.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  1.25  *  dMin;  final  int  np  =  nn  -  1  +  Math.sqrt(a2);	  s    =    1.0    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
35	[BUG]  [BUGGY]  s  =  0.0;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.0;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.0;	  double    s    =    0.0;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
36	[BUG]  [BUGGY]  double  s  =  0.5;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5;	  double    s    =    0.0;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
37	[BUG]  [BUGGY]  double  s  =  1.0  *  tType  +  3;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  *  tType  +  3;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  *  tType  +  3;	  double    s    =    1.0    *    tType;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dN  -  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dN  -  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dN  -  1);	  int    pingPong    =    Math.pow(10,    dMin    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
39	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  -  2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  -  2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dMin  -  2);	  int    pingPong    =    Math.pow(10,    dMin    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
40	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  tau);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  tau);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  tau);	  int    pingPong    =    Math.pow(10,    tType);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  double  s  =  0.7  *  tType  +  1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.7  *  tType  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.7  *  tType  +  1;	  double    s    =    0.7    *    tType;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
42	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  *  1);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  *  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dMin  *  1);	  int    pingPong    =    Math.pow(10,    dMin    +    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dN  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dN  +  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dN  +  1);	  int    pingPong    =    Math.pow(10,    dMin    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
44	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  +  2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dMin  +  2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dMin  +  2);	  int    pingPong    =    Math.pow(10,    dMin    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
45	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  dMin;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  dMin;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  dMin;	  final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	35	None	replace
46	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  dN2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  dN2;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  dN2;	  final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	35	None	replace
47	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  s;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  s;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  s;	  final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	35	None	replace
48	[BUG]  [BUGGY]  double  s  =  0.5  *  dN2  +  tType;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  dN2  +  tType;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  dN2  +  tType;	  double    s    =    0.5    *    dN2;    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  double  s  =  0.5  *  dN2  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  dN2  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  dN2  +  1;	  double    s    =    0.5    *    dN2;    	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  tType  =  -1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  -1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  -1;	  tType    =    -4;    	non-compiled	[CE]  ';'  expected	43	None	replace
51	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  pingPong  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  pingPong  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  pingPong  +  1;	  s    =    1.0    *    dMin;    final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	37	None	replace
52	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dN1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dN1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dN1);	  int    pingPong    =    Math.pow(10,    dN2);    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  double  s  =  1  *  dN2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1  *  dN2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1  *  dN2;	  double    s    =    1.0    *    dN2;    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  final  int  np  =  nn  -  3  *  tType;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  3  *  tType;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  3  *  tType;	  final    int    np    =    nn    -    2    *    tType;    	non-compiled	[CE]  ';'  expected	36	None	replace
55	[BUG]  [BUGGY]  tType  =  Math.min(tType,  3);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.min(tType,  3);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.min(tType,  3);	  tType    =    Math.min(tType,    tau);    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  tType  =  Math.max(tType,  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  0);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  0);	  tType    =    Math.max(tType,    deflated);    	non-compiled	[CE]  ';'  expected	2	None	replace
57	[BUG]  [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  +  Math.sqrt(a2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  +  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  +  Math.sqrt(a2);	  s    =    1.0    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  ';'  expected	33	None	replace
58	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  +  Math.sqrt(a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  +  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  +  Math.sqrt(a2);	  final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  ';'  expected	30	None	replace
59	[BUG]  [BUGGY]  double  s  =  1  *  dMin1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1  *  dMin1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1  *  dMin1;	  double    s    =    0.5    *    dMin1;    	non-compiled	[CE]  ';'  expected	20	None	replace
60	[BUG]  [BUGGY]  double  s  =  2.0  *  dN2  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2.0  *  dN2  +  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2.0  *  dN2  +  1;	  double    s    =    2.0    *    dN2;    	non-compiled	[CE]  ';'  expected	28	None	replace
61	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  a2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  a2);	  int    pingPong    =    Math.pow(10,    dN);    	non-compiled	[CE]  ';'  expected	11	None	replace
62	[BUG]  [BUGGY]  tType  =  Math.min(tType,  dN2)+  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.min(tType,  dN2)+  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.min(tType,  dN2)+  1;	  tType    =    Math.min(tType,    dN2);    	non-compiled	[CE]  ';'  expected	22	None	replace
63	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  *  Math.sqrt(a2)+1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  *  Math.sqrt(a2)+1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  *  Math.sqrt(a2)+1;	  final    int    np    =    nn    -    1    *    Math.sqrt(a2);    	non-compiled	[CE]  ';'  expected	31	None	replace
64	[BUG]  [BUGGY]  Double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  Double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	Double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;	  double    s    =    1.0    *    dMin;    final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	42	None	replace
65	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  dPong;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  dPong;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  dPong;	  final    int    np    =    nn    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	35	None	replace
66	[BUG]  [BUGGY]  double  s  =  0.5  *  pingPong;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  pingPong;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  pingPong;	  double    s    =    0.5    *    dN;    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  double  s  =  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1;	  double    s    =    0.0;    	non-compiled	[CE]  ';'  expected	24	None	replace
68	[BUG]  [BUGGY]  int  pingPong  =  Math.pow(10,  dN  *  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  int  pingPong  =  Math.pow(10,  dN  *  1);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	int  pingPong  =  Math.pow(10,  dN  *  1);	  int    pingPong    =    Math.pow(10,    dMin    +    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
69	[BUG]  [BUGGY]  double  s  =  0.5  *  tType  +  2;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0.5  *  tType  +  2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0.5  *  tType  +  2;	  double    s    =    0.5    *    tType;    	non-compiled	[CE]  ';'  expected	18	None	replace
70	[BUG]  [BUGGY]  double  s  =  2.0  *  tType  +  3;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2.0  *  tType  +  3;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2.0  *  tType  +  3;	  double    s    =    2.0    *    tType;    	non-compiled	[CE]  ';'  expected	27	None	replace
71	[BUG]  [BUGGY]  double  s  =  2.0  *  tType  +  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2.0  *  tType  +  2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2.0  *  tType  +  2;	  double    s    =    2.0    *    tType;    	non-compiled	[CE]  ';'  expected	27	None	replace
72	[BUG]  [BUGGY]  tType  =  -6;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  -6;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  -6;	  tType    =    1;    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  double  s  =  1  *  dN1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1  *  dN1;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1  *  dN1;	  double    s    =    0.5    *    dN1;    	non-compiled	[CE]  ';'  expected	45	None	replace
74	[BUG]  [BUGGY]  double  s  =  1.0  /  dN2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  /  dN2;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  /  dN2;	  double    s    =    1.0    *    dN2;    	non-compiled	[CE]  ';'  expected	5	None	replace
75	[BUG]  [BUGGY]  double  s  =  1.0  /  dN;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1.0  /  dN;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1.0  /  dN;	  double    s    =    1.0    *    dN;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
76	[BUG]  [BUGGY]  s  =  0.5  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  0.5  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  0.5  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);	  s    =    0.5    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
77	[BUG]  [BUGGY]  double  s  =  0;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  0;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  0;	  double    s    =    0.0;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
78	[BUG]  [BUGGY]  final  int  np  =  nn  -  1  *  Math.cos(a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  1  *  Math.cos(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  1  *  Math.cos(a2);	  final    int    np    =    nn    -    1    *    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
79	[BUG]  [BUGGY]  double  s  =  2  *  tType;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  2  *  tType;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  2  *  tType;	  double    s    =    2.0    *    tType;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
80	[BUG]  [BUGGY]  final  int  np  =  a2  -  1  +  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  a2  -  1  +  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  a2  -  1  +  Math.sqrt(a2);	  final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
81	[BUG]  [BUGGY]  final  int  np  =  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  Math.sqrt(a2);	  final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
82	[BUG]  [BUGGY]  tType  =  Math.max(tType,  a2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  tType  =  Math.max(tType,  a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	tType  =  Math.max(tType,  a2);	  tType    =    Math.max(tType,    deflated);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
83	[BUG]  [BUGGY]  s  =  1.0  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  s  =  1.0  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	s  =  1.0  *  dMin;  final  int  np  =  nn  -  1  *  Math.sqrt(a2);	  s    =    1.0    *    dMin;    final    int    np    =    nn    -    1    +    Math.sqrt(a2);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
84	[BUG]  [BUGGY]  double  s  =  1  *  dN;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  double  s  =  1  *  dN;  [BUGGY]        final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	double  s  =  1  *  dN;	  double    s    =    0.5    *    dN;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
85	[BUG]  [BUGGY]  final  int  np  =  nn  -  2  *  tType  +  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (a2  <  cnst1)  {  s  =  gam  *  (1  -  Math.sqrt(a2))  /  (1  +  a2);  }  tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;      [BUGGY]  final  int  np  =  nn  -  2  *  tType  +  1;  [BUGGY]      double  s  =  0.25  *  dMin;  final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1530	1530	1	replace	final  int  np  =  nn  -  2  *  tType  +  1;	  final    int    np    =    nn    -    2    *    tType;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
