bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(b2  ==  dN)  {  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(b2  ==  dN)  {  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(b2  ==  dN)  {  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
2	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
3	[BUG]  [BUGGY]  if(work[np  -  4]  <  work[np  -  2])  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  <  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  <  work[np  -  2])  {	  if(work[np    -    5]    <    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	18	None	replace
4	[BUG]  [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
5	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(tType,  a2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(tType,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.min(tType,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  gam);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(s,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	11	None	replace
7	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[np  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[np  -  2])  {	  if(work[np    -    5]    <    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	67	None	replace
8	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2,  deflated);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2,  deflated);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2,  deflated);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    a2);    	non-compiled	[CE]  ';'  expected	27	None	replace
9	[BUG]  [BUGGY]  if(work[np  -  4]  ==  work[np  -  3])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  ==  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  ==  work[np  -  3])  {	  if(work[np    -    5]    ==    work[nn    -    3])    {    	non-compiled	[CE]  ';'  expected	52	None	replace
10	[BUG]  [BUGGY]  if(work[np  -  5]!=  work[nn  -  3])  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]!=  work[nn  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]!=  work[nn  -  3])  {	  if(work[np    -    5]    ==    work[nn    -    3])    {    	non-compiled	[CE]  ';'  expected	52	None	replace
11	[BUG]  [BUGGY]  if(work[np  -  4]  ==  work[np  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  ==  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  ==  work[np  -  2])  {	  if(work[nn    -    5]    ==    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	62	None	replace
12	[BUG]  [BUGGY]  if(np  -  4]  ==  work[np  -  2])  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(np  -  4]  ==  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(np  -  4]  ==  work[np  -  2])  {	  if(work[nn    -    5]    ==    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	62	None	replace
13	[BUG]  [BUGGY]  if(work[np  -  5]  ==  work[np  -  2])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  ==  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  ==  work[np  -  2])  {	  if(work[nn    -    5]    ==    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	62	None	replace
14	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2.length);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2.length);	  ArrayRealVector    work[nn    -    5]    =    Math.min(b2.length,    tType);    	non-compiled	[CE]  ';'  expected	29	None	replace
15	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  tType);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  tType);	  ArrayRealVector    work[nn    -    5]    =    Math.min(b2.length,    tType);    	non-compiled	[CE]  ';'  expected	29	None	replace
16	[BUG]  [BUGGY]  tType  =  s.length()  *  2  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.length()  *  2  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.length()  *  2  +  1;	  tType    =    s.length()    *    2;    	non-compiled	[CE]  ';'  expected	14	None	replace
17	[BUG]  [BUGGY]  tType  =  Math.max(tType,  a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  Math.max(tType,  a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  Math.max(tType,  a2);	  tType    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	69	None	replace
18	[BUG]  [BUGGY]  tType  =  Math.min(tType,  a2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  Math.min(tType,  a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  Math.min(tType,  a2);	  tType    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	69	None	replace
19	[BUG]  [BUGGY]  a2  =  Math.min(tType,  s);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(tType,  s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(tType,  s);	  a2    =    Math.max(tType,    s);    	non-compiled	[CE]  ';'  expected	42	None	replace
20	[BUG]  [BUGGY]  a2  =  Math.max(s,  gam);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.max(s,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.max(s,  gam);	  a2    =    Math.max(tType,    gam);    	non-compiled	[CE]  ';'  expected	40	None	replace
21	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  b2  =  dN1;  b2  =  a2;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  b2  =  dN1;  b2  =  a2;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  b2  =  dN1;  b2  =  a2;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    b2    =    dN1;    b2    =    a2;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
22	[BUG]  [BUGGY]  np  =  np  -  2  *  tType  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  tType  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  tType  +  1;	  np    =    np    -    2    *    tType;    	non-compiled	[CE]  ';'  expected	23	None	replace
23	[BUG]  [BUGGY]  if(b2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(b2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(b2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(a2    ==    0.0)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
24	[BUG]  [BUGGY]  np  =  np  -  1  *  gam;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  1  *  gam;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  1  *  gam;	  np    =    np    -    1    *    pingPong;    	non-compiled	[CE]  ';'  expected	33	None	replace
25	[BUG]  [BUGGY]  np  =  np  -  1  *  a2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  1  *  a2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  1  *  a2;	  np    =    np    -    1    *    pingPong;    	non-compiled	[CE]  ';'  expected	33	None	replace
26	[BUG]  [BUGGY]  np  =  np  -  1  *  tType;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  1  *  tType;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  1  *  tType;	  np    =    np    -    1    *    pingPong;    	non-compiled	[CE]  ';'  expected	33	None	replace
27	[BUG]  [BUGGY]  tType  =  s  *  Math.rint();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.rint();  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.rint();	  tType    =    s    *    Math.random();    	non-compiled	[CE]  ';'  expected	77	None	replace
28	[BUG]  [BUGGY]  tType  =  s  *  Math.round(gam);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.round(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.round(gam);	  tType    =    s    *    Math.random();    	non-compiled	[CE]  ';'  expected	77	None	replace
29	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  gam);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(work.length,    a2);    	non-compiled	[CE]  ';'  expected	86	None	replace
30	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(work.length,  a2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(work.length,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.min(work.length,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(work.length,    a2);    	non-compiled	[CE]  ';'  expected	86	None	replace
31	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
32	[BUG]  [BUGGY]  if(a2  <  work[np  -  5]  ||  a2  >  work[np  -  4])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  <  work[np  -  5]  ||  a2  >  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  <  work[np  -  5]  ||  a2  >  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
33	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  ==  work[np  -  4])  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  ==  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  7]  ||  a2  ==  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
34	[BUG]  [BUGGY]  if(work[np  -  4]!=  work[np  -  7])  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]!=  work[np  -  7])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]!=  work[np  -  7])  {	  if(work[nn    -    5]!=    work[nn    -    7])    {    	non-compiled	[CE]  ';'  expected	65	None	replace
35	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
36	[BUG]  [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
37	[BUG]  [BUGGY]  if(b2  ==  dN)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(b2  ==  dN)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(b2  ==  dN)  {  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
38	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  b2  =  dN1;  b2  =  a2;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  b2  =  dN1;  b2  =  a2;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  b2  =  dN1;  b2  =  a2;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_4)    {    b2    =    dN1;    b2    =    a2;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
39	[BUG]  [BUGGY]  tType  =  s[s.length()  ];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s[s.length()  ];  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s[s.length()  ];	  tType    =    s.length()    +    2;    	non-compiled	[CE]  ';'  expected	15	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.log(tType);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.log(tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.log(tType);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(tType);    	non-compiled	[CE]  ';'  expected	37	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.ceil(tType);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.ceil(tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.ceil(tType);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(tType);    	non-compiled	[CE]  ';'  expected	37	None	replace
42	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(tType);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.floor(tType);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(tType);    	non-compiled	[CE]  ';'  expected	37	None	replace
43	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  tType);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  tType);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ';'  expected	72	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam,  deflated);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam,  deflated);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam,  deflated);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ';'  expected	72	None	replace
45	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2.length);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  a2.length);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ';'  expected	72	None	replace
46	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(a2.length,  gam);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.min(a2.length,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.min(a2.length,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ';'  expected	72	None	replace
47	[BUG]  [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
48	[BUG]  [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
49	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2)  {  if(a2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
50	[BUG]  [BUGGY]  a2  =  Math.min(s,  tType);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(s,  tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(s,  tType);	  a2    =    Math.min(gam,    tType);    	non-compiled	[CE]  ';'  expected	43	None	replace
51	[BUG]  [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
52	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dMin)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(a2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
53	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
54	[BUG]  [BUGGY]  if(work[np  -  4]  >  work[np  -  2])  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  >  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  >  work[np  -  2])  {	  if(work[np    -    5]    >    work[np    -    2])    {    	non-compiled	[CE]  ';'  expected	20	None	replace
55	[BUG]  [BUGGY]  if(work[np  -  5]  >=  work[np  -  2])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  >=  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  >=  work[np  -  2])  {	  if(work[np    -    5]    >    work[np    -    2])    {    	non-compiled	[CE]  ';'  expected	20	None	replace
56	[BUG]  [BUGGY]  tType  =  4;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  4;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  4;	  tType    =    0;    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(a2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.floor(a2);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(a2);    	non-compiled	[CE]  ';'  expected	35	None	replace
58	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.log(a2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.log(a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.log(a2);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(a2);    	non-compiled	[CE]  ';'  expected	35	None	replace
59	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_4)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_4)    {    return;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
60	[BUG]  [BUGGY]  b2  =  a2;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  b2  =  a2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	b2  =  a2;	  b2    =    dN1;    b2    =    a2;    	non-compiled	[CE]  ';'  expected	5	None	replace
61	[BUG]  [BUGGY]  b2  =  dN;  b2  =  a2;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  b2  =  dN;  b2  =  a2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	b2  =  dN;  b2  =  a2;	  b2    =    dN1;    b2    =    a2;    	non-compiled	[CE]  ';'  expected	5	None	replace
62	[BUG]  [BUGGY]  b2  =  dN;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  b2  =  dN;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	b2  =  dN;	  b2    =    dN1;    b2    =    a2;    	non-compiled	[CE]  ';'  expected	5	None	replace
63	[BUG]  [BUGGY]  if(work[np  -  3]  ==  work[nn  -  4])  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  3]  ==  work[nn  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  3]  ==  work[nn  -  4])  {	  if(work[np    -    5]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	51	None	replace
64	[BUG]  [BUGGY]  if(work[np  -  2]  ==  work[np  -  4])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  2]  ==  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  2]  ==  work[np  -  4])  {	  if(work[np    -    5]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	51	None	replace
65	[BUG]  [BUGGY]  if(work[np  -  2]  ==  work[nn  -  4])  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  2]  ==  work[nn  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  2]  ==  work[nn  -  4])  {	  if(work[np    -    5]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	51	None	replace
66	[BUG]  [BUGGY]  if(work[np  -  4]  <  work[np  -  3])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  <  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  <  work[np  -  3])  {	  if(work[np    -    4]    <    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	16	None	replace
67	[BUG]  [BUGGY]  if(a2  ==  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
68	[BUG]  [BUGGY]  if(a2  ==  dN)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  dN)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  dN)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
69	[BUG]  [BUGGY]  if(a2!=  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2!=  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2!=  0.0)  {  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
70	[BUG]  [BUGGY]  if(work[np  -  4]  >  work[np  -  3])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  >  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  >  work[np  -  3])  {	  if(work[np    -    4]    >    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	19	None	replace
71	[BUG]  [BUGGY]  np  =  np  -  2  *  a2  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  a2  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  a2  +  1;	  np    =    np    -    2    *    a2;    	non-compiled	[CE]  ';'  expected	54	None	replace
72	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  a2);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    b2);    	non-compiled	[CE]  ';'  expected	56	None	replace
73	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  b2  =  dN1;  b2  =  a2;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  b2  =  dN1;  b2  =  a2;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  b2  =  dN1;  b2  =  a2;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_3)    {    b2    =    dN1;    b2    =    a2;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
74	[BUG]  [BUGGY]  if(work[np  -  5]  >=  work[nn  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  >=  work[nn  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  >=  work[nn  -  2])  {	  if(work[np    -    5]    ==    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	50	None	replace
75	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_4)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_4)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_4)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
76	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
77	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
78	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b2,  gam);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b2,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(b2,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  ';'  expected	12	None	replace
79	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(tType,  b2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  ';'  expected	12	None	replace
80	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  b2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  b2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(s,  b2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  ';'  expected	12	None	replace
81	[BUG]  [BUGGY]  np  =  np  -  4  *  pingPong;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  4  *  pingPong;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  4  *  pingPong;	  np    =    np    -    4;    	non-compiled	[CE]  ';'  expected	60	None	replace
82	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
83	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_1)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	85	None	replace
84	[BUG]  [BUGGY]  if(work[np  -  4]  ==  work[np  -  4])  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  ==  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  ==  work[np  -  4])  {	  if(work[np    -    4]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	49	None	replace
85	[BUG]  [BUGGY]  if(work[np  -  2]  ==  work[np  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  2]  ==  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  2]  ==  work[np  -  2])  {	  if(work[np    -    4]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	49	None	replace
86	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.floor(a2);	  ArrayRealVector    work[nn    -    3]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	38	None	replace
87	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(tType);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.floor(tType);	  ArrayRealVector    work[nn    -    3]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	38	None	replace
88	[BUG]  [BUGGY]  tType  =  s.substring(start,  end);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  end);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  end);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
89	[BUG]  [BUGGY]  tType  =  s.substring(0,  np);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(0,  np);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(0,  np);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
90	[BUG]  [BUGGY]  tType  =  s.substring(end,  np);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(end,  np);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(end,  np);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
91	[BUG]  [BUGGY]  tType  =  s.substring(start,  end  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  end  +  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  end  +  1);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
92	[BUG]  [BUGGY]  np  =  np  -  2  *  gam  +  3;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  gam  +  3;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  gam  +  3;	  np    =    np    -    2    *    gam    +    1;    	non-compiled	[CE]  ';'  expected	22	None	replace
93	[BUG]  [BUGGY]  tType  =  s[s.length()  -  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s[s.length()  -  1];  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s[s.length()  -  1];	  tType    =    s.length()    +    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
94	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  b2  =  dN1;  b2  =  a2;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  b2  =  dN1;  b2  =  a2;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TolerANCE_2)  {  b2  =  dN1;  b2  =  a2;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    b2    =    dN1;    b2    =    a2;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
95	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  b2  =  dN1;  b2  =  a2;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  b2  =  dN1;  b2  =  a2;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_3)  {  b2  =  dN1;  b2  =  a2;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    b2    =    dN1;    b2    =    a2;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
96	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  return;  }  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_3)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_3)    {    return;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
97	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
98	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  &&  a2  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
99	[BUG]  [BUGGY]  if(work[np  -  4]!=  work[np  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]!=  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]!=  work[np  -  2])  {	  if(work[np    -    4]    ==    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	31	None	replace
100	[BUG]  [BUGGY]  tType  =  tType  +  s  *  Math.log(gam);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  tType  +  s  *  Math.log(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  tType  +  s  *  Math.log(gam);	  tType    =    s    +    s    *    Math.log(gam);    	non-compiled	[CE]  ';'  expected	79	None	replace
101	[BUG]  [BUGGY]  tType  =  s  +  s  *  Math.rint(gam);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  s  *  Math.rint(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  s  *  Math.rint(gam);	  tType    =    s    +    s    *    Math.log(gam);    	non-compiled	[CE]  ';'  expected	79	None	replace
102	[BUG]  [BUGGY]  tType  =  s  +  s  *  Math.pow(10,  a2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  s  *  Math.pow(10,  a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  s  *  Math.pow(10,  a2);	  tType    =    s    +    s    *    Math.log(gam);    	non-compiled	[CE]  ';'  expected	79	None	replace
103	[BUG]  [BUGGY]  a2  =  Math.min(tType,  gam  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(tType,  gam  +  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(tType,  gam  +  1);	  a2    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	45	None	replace
104	[BUG]  [BUGGY]  ArrayRealVector  work[np  -  4]  =  Math.floor(gam);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[np  -  4]  =  Math.floor(gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[np  -  4]  =  Math.floor(gam);	  ArrayRealVector    work[nn    -    4]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	36	None	replace
105	[BUG]  [BUGGY]  ArrayRealVector  work[np  -  4]  =  Math.floor(a2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[np  -  4]  =  Math.floor(a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[np  -  4]  =  Math.floor(a2);	  ArrayRealVector    work[nn    -    4]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	36	None	replace
106	[BUG]  [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0.0)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
107	[BUG]  [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
108	[BUG]  [BUGGY]  tType  =  s  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  1;	  tType    =    s;    	non-compiled	[CE]  ';'  expected	82	None	replace
109	[BUG]  [BUGGY]  tType  =  a2;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  a2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  a2;	  tType    =    s;    	non-compiled	[CE]  ';'  expected	82	None	replace
110	[BUG]  [BUGGY]  tType  =  s.length;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.length;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.length;	  tType    =    s;    	non-compiled	[CE]  ';'  expected	82	None	replace
111	[BUG]  [BUGGY]  a2  =  Math.min(s,  a2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(s,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(s,  a2);	  a2    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	48	None	replace
112	[BUG]  [BUGGY]  if(work[np  -  4]  >=  work[np  -  2])  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  >=  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  >=  work[np  -  2])  {	  if(work[np    -    4]    >=    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	39	None	replace
113	[BUG]  [BUGGY]  tType  =  a2  *  Math.log(s);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  a2  *  Math.log(s);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  a2  *  Math.log(s);	  tType    =    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	4	None	replace
114	[BUG]  [BUGGY]  tType  =  s  *  Math.rint(a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.rint(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.rint(a2);	  tType    =    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	4	None	replace
115	[BUG]  [BUGGY]  tType  =  s  *  Math.pow(a2);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.pow(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.pow(a2);	  tType    =    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	4	None	replace
116	[BUG]  [BUGGY]  tType  =  s  *  Math.abs(a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.abs(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.abs(a2);	  tType    =    s    *    Math.abs(gam);    	non-compiled	[CE]  ';'  expected	78	None	replace
117	[BUG]  [BUGGY]  tType  =  a2  *  Math.abs(gam);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  a2  *  Math.abs(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  a2  *  Math.abs(gam);	  tType    =    s    *    Math.abs(gam);    	non-compiled	[CE]  ';'  expected	78	None	replace
118	[BUG]  [BUGGY]  tType  =  tType  *  Math.abs(gam);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  tType  *  Math.abs(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  tType  *  Math.abs(gam);	  tType    =    s    *    Math.abs(gam);    	non-compiled	[CE]  ';'  expected	78	None	replace
119	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b2.length,  a1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b2.length,  a1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(b2.length,  a1);	  ArrayRealVector    work[nn    -    5]    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  ';'  expected	28	None	replace
120	[BUG]  [BUGGY]  np  =  np  -  3  *  pingPong;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  3  *  pingPong;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  3  *  pingPong;	  np    =    np    -    3;    	non-compiled	[CE]  ';'  expected	34	None	replace
121	[BUG]  [BUGGY]  if(a2!=  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2!=  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2!=  0.0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(b2    ==    dN)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
122	[BUG]  [BUGGY]  if(a2  ==  0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  0)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(b2    ==    dN)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
123	[BUG]  [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(a2  ==  dN)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(b2    ==    dN)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
124	[BUG]  [BUGGY]  tType  =  tType  +  s  *  Math.log(a2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  tType  +  s  *  Math.log(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  tType  +  s  *  Math.log(a2);	  tType    =    s    +    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	80	None	replace
125	[BUG]  [BUGGY]  tType  =  s  +  s  *  Math.rint(a2);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  s  *  Math.rint(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  s  *  Math.rint(a2);	  tType    =    s    +    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	80	None	replace
126	[BUG]  [BUGGY]  tType  =  a2  +  s  *  Math.log(a2);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  a2  +  s  *  Math.log(a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  a2  +  s  *  Math.log(a2);	  tType    =    s    +    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	80	None	replace
127	[BUG]  [BUGGY]  tType  =  s  *  Math.log(gam);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.log(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.log(gam);	  tType    =    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	4	None	replace
128	[BUG]  [BUGGY]  tType  =  s  *  Math.pow(10,  a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.pow(10,  a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.pow(10,  a2);	  tType    =    s    *    Math.log(a2);    	non-compiled	[CE]  ';'  expected	4	None	replace
129	[BUG]  [BUGGY]  a2  =  Math.max(gam,  a2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.max(gam,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.max(gam,  a2);	  a2    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	48	None	replace
130	[BUG]  [BUGGY]  a2  =  Math.min(gam,  a2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(gam,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(gam,  a2);	  a2    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	48	None	replace
131	[BUG]  [BUGGY]  tType  =  s.substring(start,  np  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  np  +  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  np  +  1);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
132	[BUG]  [BUGGY]  tType  =  s.substring(start,  np  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  np  +  2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  np  +  2);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
133	[BUG]  [BUGGY]  tType  =  s.substring(start,  np  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  np  -  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  np  -  1);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  ';'  expected	81	None	replace
134	[BUG]  [BUGGY]  b2  =  dN1;  b2  =  gam;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  b2  =  dN1;  b2  =  gam;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	b2  =  dN1;  b2  =  gam;	  b2    =    dN1;    b2    =    a2;    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  b1  =  dN1;  b2  =  a2;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  b1  =  dN1;  b2  =  a2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	b1  =  dN1;  b2  =  a2;	  b2    =    dN1;    b2    =    a2;    	non-compiled	[CE]  ';'  expected	5	None	replace
136	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(s);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.floor(s);	  ArrayRealVector    work[nn    -    4]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	36	None	replace
137	[BUG]  [BUGGY]  if(work[np  -  2]  ==  work[nn  -  2])  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  2]  ==  work[nn  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  2]  ==  work[nn  -  2])  {	  if(work[np    -    4]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	49	None	replace
138	[BUG]  [BUGGY]  if(work[np  -  1]  ==  work[nn  -  1])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  1]  ==  work[nn  -  1])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  1]  ==  work[nn  -  1])  {	  if(work[np    -    4]    ==    work[nn    -    4])    {    	non-compiled	[CE]  ';'  expected	49	None	replace
139	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_1  &&  tType  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_1  &&  tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_1  &&  tType  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
140	[BUG]  [BUGGY]  if(work[np  -  5]!=  work[nn  -  2])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]!=  work[nn  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]!=  work[nn  -  2])  {	  if(work[nn    -    5]    ==    work[nn    -    2])    {    	non-compiled	[CE]  ';'  expected	62	None	replace
141	[BUG]  [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  >=  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(a2    ==    0.0)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
142	[BUG]  [BUGGY]  if(work[np  -  4]!=  work[nn  -  4])  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]!=  work[nn  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]!=  work[nn  -  4])  {	  if(work[np    -    5]    >>    work[nn    -    7])    {    	non-compiled	[CE]  ';'  expected	44	None	replace
143	[BUG]  [BUGGY]  tType  =  s  *  Math.random()  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.random()  +  1;  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.random()  +  1;	  tType    =    s    *    Math.random();    	non-compiled	[CE]  ';'  expected	77	None	replace
144	[BUG]  [BUGGY]  a2  =  Math.max(gam,  np);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.max(gam,  np);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.max(gam,  np);	  a2    =    Math.max(s,    np);    	non-compiled	[CE]  ';'  expected	66	None	replace
145	[BUG]  [BUGGY]  a2  =  Math.min(gam,  tType  -  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(gam,  tType  -  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(gam,  tType  -  1);	  a2    =    Math.min(gam,    tType);    	non-compiled	[CE]  ';'  expected	43	None	replace
146	[BUG]  [BUGGY]  a2  =  Math.min(gam,  s);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(gam,  s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(gam,  s);	  a2    =    Math.min(gam,    tType);    	non-compiled	[CE]  ';'  expected	43	None	replace
147	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[np  -  3])  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[np  -  3])  {	  if(work[np    -    5]    <    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	18	None	replace
148	[BUG]  [BUGGY]  np  =  np  -  2  *  s;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  s;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  s;	  np    =    np    -    2    *    pingPong;    	non-compiled	[CE]  ';'  expected	21	None	replace
149	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  2]  ||  a2  >  work[np  -  4])  {  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  2]  ||  a2  >  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  2]  ||  a2  >  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
150	[BUG]  [BUGGY]  if(work[np  -  5]  >=  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  >=  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  >=  work[nn  -  7]  ||  a2  >=  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
151	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  3]  ||  a2  >  work[np  -  4])  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  3]  ||  a2  >  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  3]  ||  a2  >  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
152	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  2])  {  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  2])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  ';'  expected	17	None	replace
153	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
154	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
155	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  tType);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  tType);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    gam);    	non-compiled	[CE]  ';'  expected	11	None	replace
156	[BUG]  [BUGGY]  tType  =  3;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  3;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  3;	  tType    =    1;    	non-compiled	[CE]  ';'  expected	9	None	replace
157	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_1  ||  tType  ==  TOLERANCE_1)  {  if(b2  ==  dN)  {  return;  }	  if(b2    ==    dN)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
158	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  2);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(work.length,  2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(work.length,    a2);    	non-compiled	[CE]  ';'  expected	86	None	replace
159	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  a2);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(s,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(s,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    a2);    	non-compiled	[CE]  ';'  expected	27	None	replace
160	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    a2);    	non-compiled	[CE]  ';'  expected	27	None	replace
161	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
162	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
163	[BUG]  [BUGGY]  tType  =  Math.max(s,  a2  -  gam);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  Math.max(s,  a2  -  gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  Math.max(s,  a2  -  gam);	  tType    =    Math.max(s,    a2);    	non-compiled	[CE]  ';'  expected	69	None	replace
164	[BUG]  [BUGGY]  a2  =  Math.max(gam,  s);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.max(gam,  s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.max(gam,  s);	  a2    =    Math.max(tType,    s);    	non-compiled	[CE]  ';'  expected	42	None	replace
165	[BUG]  [BUGGY]  tType  =  s  *  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  2;	  tType    =    s;    	non-compiled	[CE]  ';'  expected	82	None	replace
166	[BUG]  [BUGGY]  tType  =  dN;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  dN;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  dN;	  tType    =    s;    	non-compiled	[CE]  ';'  expected	82	None	replace
167	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(s);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.floor(s);	  ArrayRealVector    work[nn    -    3]    =    Math.floor(gam);    	non-compiled	[CE]  ';'  expected	38	None	replace
168	[BUG]  [BUGGY]  if(work[np  -  5]  ==  work[np  -  3])  {  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  ==  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  ==  work[np  -  3])  {	  if(work[np    -    5]    ==    work[np    -    7])    {    	non-compiled	[CE]  ';'  expected	64	None	replace
169	[BUG]  [BUGGY]  sType  =  s.length();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  sType  =  s.length();  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	sType  =  s.length();	  tType    =    s.length()    +    2;    	non-compiled	[CE]  ';'  expected	15	None	replace
170	[BUG]  [BUGGY]  a2  =  Math.max(gam,  tType);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.max(gam,  tType);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.max(gam,  tType);	  a2    =    Math.max(s,    tType);    	non-compiled	[CE]  ';'  expected	71	None	replace
171	[BUG]  [BUGGY]  tType  =  Math.min(gam,  a2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  Math.min(gam,  a2);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  Math.min(gam,  a2);	  tType    =    Math.min(s,    a2);    	non-compiled	[CE]  ';'  expected	68	None	replace
172	[BUG]  [BUGGY]  if(work[np  -  4]  ==  work[nn  -  3])  {  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  ==  work[nn  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  ==  work[nn  -  3])  {	  if(work[np    -    5]    ==    work[nn    -    3])    {    	non-compiled	[CE]  ';'  expected	52	None	replace
173	[BUG]  [BUGGY]  if(work[np  -  5]  >=  work[nn  -  3])  {  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  >=  work[nn  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  >=  work[nn  -  3])  {	  if(work[np    -    5]    ==    work[nn    -    3])    {    	non-compiled	[CE]  ';'  expected	52	None	replace
174	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  &&  tType  ==  TOLERANCE_2)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
175	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType!=  TOLERANCE_2)  {  return;  }  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType!=  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType!=  TOLERANCE_2)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
176	[BUG]  [BUGGY]  a2  =  Math.min(gam,  np  -  1);  [CE]  variable  np  might  not  have  been  initialized  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(gam,  np  -  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(gam,  np  -  1);	  a2    =    Math.min(gam,    np);    	non-compiled	[CE]  variable  np  might  not  have  been  initialized	75	None	replace
177	[BUG]  [BUGGY]  a2  =  Math.min(gam,  np  -  2);  [CE]  variable  np  might  not  have  been  initialized  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(gam,  np  -  2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(gam,  np  -  2);	  a2    =    Math.min(gam,    np);    	non-compiled	[CE]  variable  np  might  not  have  been  initialized	75	None	replace
178	[BUG]  [BUGGY]  a2  =  Math.min(s,  np);  [CE]  variable  np  might  not  have  been  initialized  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(s,  np);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(s,  np);	  a2    =    Math.min(gam,    np);    	non-compiled	[CE]  variable  np  might  not  have  been  initialized	75	None	replace
179	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  'else'  without  'if'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	58	None	replace
180	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.floor(s);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.floor(s);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.floor(s);	  ArrayRealVector    work[nn    -    5]    =    Math.floor(tType);    	non-compiled	[CE]  ']'  expected	37	None	replace
181	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b1.length,  gam);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b1.length,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(b1.length,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  ']'  expected	28	None	replace
182	[BUG]  [BUGGY]  if(work[np  -  4]  >=  work[np  -  3])  {  [CE]  'else'  without  'if'  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  >=  work[np  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  >=  work[np  -  3])  {	  if(work[np    -    4]    >=    work[np    -    7])    {    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
183	[BUG]  [BUGGY]  tType  =  2.0;  [CE]  possible  loss  of  precision  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  2.0;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  2.0;	  tType    =    0.0;    	non-compiled	[CE]  possible  loss  of  precision	76	None	replace
184	[BUG]  [BUGGY]  if(work[np  -  5]  >  work[nn  -  2])  {  [CE]  'else'  without  'if'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  >  work[nn  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  >  work[nn  -  2])  {	  if(work[np    -    5]    <    work[nn    -    2])    {    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
185	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  'else'  without  'if'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	73	None	replace
186	[BUG]  [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  'else'  without  'if'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  >=  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  >=  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	73	None	replace
187	[BUG]  [BUGGY]  np  =  np  -  2  *  g  +  1;  [CE]  possible  loss  of  precision  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  g  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  g  +  1;	  np    =    np    -    2    *    pingPong    +    1;    	non-compiled	[CE]  possible  loss  of  precision	53	None	replace
188	[BUG]  [BUGGY]  np  =  np  -  2  *  pingPong  +  2;  [CE]  variable  np  might  not  have  been  initialized  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  pingPong  +  2;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  pingPong  +  2;	  np    =    np    -    2    *    pingPong    +    1;    	non-compiled	[CE]  variable  np  might  not  have  been  initialized	53	None	replace
189	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  return;  }  [CE]  cannot  find  symbol  TOLERANCE_1  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_1  ||  tType  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  TOLERANCE_1	85	None	replace
190	[BUG]  [BUGGY]  if(work[np  -  5]!=  work[np  -  7])  {  [CE]  'else'  without  'if'  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]!=  work[np  -  7])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]!=  work[np  -  7])  {	  if(work[np    -    5]    >=    work[np    -    7])    {    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
191	[BUG]  [BUGGY]  if(work[np  -  4]  >=  work[np  -  4])  {  [CE]  'else'  without  'if'  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  4]  >=  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  4]  >=  work[np  -  4])  {	  if(work[np    -    5]    >=    work[np    -    7])    {    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
192	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2.length);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2.length);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(gam,  a2.length);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ']'  expected	72	None	replace
193	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ']'  expected	72	None	replace
194	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam  +  1);  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam  +  1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  gam  +  1);	  ArrayRealVector    work[nn    -    5]    =    Math.min(a2.length,    gam);    	non-compiled	[CE]  ']'  expected	72	None	replace
195	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  'else'  without  'if'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  &&  tType!=  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
196	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b,  gam);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(b,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  ']'  expected	12	None	replace
197	[BUG]  [BUGGY]  tType  =  dN.length();  [CE]  cannot  find  symbol  j  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  dN.length();  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  dN.length();	  tType    =    s.length()    +    1;    	non-compiled	[CE]  cannot  find  symbol  j	13	None	replace
198	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(gam,  a2);  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  4]  =  Math.floor(gam,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  4]  =  Math.floor(gam,  a2);	  ArrayRealVector    work[nn    -    4]    =    Math.floor(gam);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
199	[BUG]  [BUGGY]  tType  =  Math.min(s,  gam);  [CE]  'else'  without  'if'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  Math.min(s,  gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  Math.min(s,  gam);	  tType    =    Math.min(s,    a2);    	non-compiled	[CE]  'else'  without  'if'	68	None	replace
200	[BUG]  [BUGGY]  if(tType  <  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  orphaned  case  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  <  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  <  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_2    &&    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  orphaned  case	26	None	replace
201	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2)  {  return;  }  [CE]  'else'  without  'if'  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2)  {  return;  }	  if(tType!=    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
202	[BUG]  [BUGGY]  np  =  np  -  1  *  s;  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  1  *  s;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  1  *  s;	  np    =    np    -    1    *    pingPong;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
203	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TolerANCE_2)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_1  ||  tType  ==  TolerANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_1  ||  tType  ==  TolerANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
204	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
205	[BUG]  [BUGGY]  if(work[np  -  2]!=  work[np  -  2])  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  2]!=  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  2]!=  work[np  -  2])  {	  if(work[nn    -    5]!=    work[nn    -    7])    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
206	[BUG]  [BUGGY]  a2  =  Math.min(tType,  b2);  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  a2  =  Math.min(tType,  b2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	a2  =  Math.min(tType,  b2);	  a2    =    Math.min(tType,    gam);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
207	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_3)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_3)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_3)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_3)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
208	[BUG]  [BUGGY]  tType  =  s  *  gam;  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  gam;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  gam;	  tType    =    s;    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
209	[BUG]  [BUGGY]  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  <  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
210	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  if(b2  ==  dMin)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  if(b2  ==  dMin)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dMin)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
211	[BUG]  [BUGGY]  if(tType  ==  TolerANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TolerANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TolerANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
212	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  ||  tType  ==  TolerANCE_2)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TolerANCE_2)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
213	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work,  b2);  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(work,  b2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(work,  b2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
214	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b1,  gam);  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(b1,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(b1,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(gam,    b2);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
215	[BUG]  [BUGGY]  if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  ==  TOLERANCE_0  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    ==    TOLERANCE_1    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
216	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.min(tType,  gam);  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.min(tType,  gam);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.min(tType,  gam);	  ArrayRealVector    work[nn    -    5]    =    Math.min(tType,    gam);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
217	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.min(work.length,  a2);  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.min(work.length,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.min(work.length,  a2);	  ArrayRealVector    work[nn    -    5]    =    Math.min(work.length,    a2);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
218	[BUG]  [BUGGY]  tType  =  s  +  s  *  Math.pow(10,  np);  [CE]  illegal  start  of  expression  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  s  *  Math.pow(10,  np);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  s  *  Math.pow(10,  np);	  tType    =    s    +    s    *    Math.log(gam);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
219	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  4])  {  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  4])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  4]  ||  a2  >  work[np  -  4])  {	  if(work[np    -    5]    <    work[nn    -    7]    ||    a2    >    work[np    -    4])    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
220	[BUG]  [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_4)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_4)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType!=  TOLERANCE_2  ||  tType  ==  TOLERANCE_4)  {  return;  }	  if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_4)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
221	[BUG]  [BUGGY]  if(tType  >  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(tType  >  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(tType  >  TOLERANCE_2  ||  tType  >  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(tType    <    TOLERANCE_2    ||    tType    >    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
222	[BUG]  [BUGGY]  tType  =  s  *  Math.rint(gam);  [CE]  illegal  start  of  expression  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  *  Math.rint(gam);  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  *  Math.rint(gam);	  tType    =    s    *    Math.random();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
223	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(gam,  a2);  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  3]  =  Math.floor(gam,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  3]  =  Math.floor(gam,  a2);	  ArrayRealVector    work[nn    -    3]    =    Math.floor(gam);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
224	[BUG]  [BUGGY]  np  =  np  -  2  *  s  +  1;  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  np  =  np  -  2  *  s  +  1;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	np  =  np  -  2  *  s  +  1;	  np    =    np    -    2    *    pingPong    +    1;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
225	[BUG]  [BUGGY]  tType  =  1.0;  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  1.0;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  1.0;	  tType    =    0.0;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
226	[BUG]  [BUGGY]  tType  =  s  +  s;  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s  +  s;  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s  +  s;	  tType    =    0.0;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
227	[BUG]  [BUGGY]  tType  =  s.substring(start,  a2);  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  tType  =  s.substring(start,  a2);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	tType  =  s.substring(start,  a2);	  tType    =    s.substring(start,    np);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
228	[BUG]  [BUGGY]  if(b2  ==  dMin)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(b2  ==  dMin)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(b2  ==  dMin)  {  if(tType  ==  TOLERANCE_2  ||  tType  ==  TOLERANCE_2)  {  if(b2  ==  dN)  {  return;  }	  if(b2    ==    dN)    {    if(tType    ==    TOLERANCE_2    ||    tType    ==    TOLERANCE_2)    {    if(b2    ==    dN)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
229	[BUG]  [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b1);  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b1);  [BUGGY]      if  (work[nn  -  5]>work[nn  -  7])  {  return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	ArrayRealVector  work[nn  -  5]  =  Math.min(a2.length,  b1);	  ArrayRealVector    work[nn    -    5]    =    Math.min(b1.length,    a2);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
230	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >  work[np  -  2])  {  [CE]  illegal  start  of  expression  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  7]  ||  a2  >  work[np  -  2])  {	  if(work[nn    -    5]    <    work[nn    -    7])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
231	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  gam  >  work[np  -  2])  {  [CE]  illegal  start  of  expression  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  7]  ||  gam  >  work[np  -  2])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  7]  ||  gam  >  work[np  -  2])  {	  if(work[nn    -    5]    <    work[nn    -    7])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
232	[BUG]  [BUGGY]  if(work[np  -  5]  <  work[nn  -  3])  {  [CE]  illegal  start  of  expression  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  }  else  {  tType  =  -4;  double  s  =  0.25  *  dMin;  double  gam;  int  np;  if  (dMin  ==  dN)  {  gam  =  dN;  a2  =  0.0;      [BUGGY]  if(work[np  -  5]  <  work[nn  -  3])  {  [BUGGY]      return;  }  b2  =  work[nn  -  5]  /  work[nn  -  7];  np  =  nn  -  9;  }  else  {  np  =  nn  -  2  *  pingPong;  b2  =  work[np  -  2];  gam  =  dN1;  if  (work[np  -  4]>work[np  -  2])  {  return;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1481	1481	1	replace	if(work[np  -  5]  <  work[nn  -  3])  {	  if(work[np    -    5]    ==    work[nn    -    3])    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
