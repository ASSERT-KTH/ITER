bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
2	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]));  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]));  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]));	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
3	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
4	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  /  this.splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  /  this.splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  /  this.splitTolerance;	  final    double    s    =    squaredSecondary[i]    /    splitTolerance;    	non-compiled	[CE]  ';'  expected	45	None	replace
5	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  /  splitTolerance  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  /  splitTolerance  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  /  splitTolerance  +  1;	  final    double    s    =    squaredSecondary[i]    /    splitTolerance;    	non-compiled	[CE]  ';'  expected	45	None	replace
6	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)/  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)/  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)/  1;	  double[]    secondary    =    squaredSecondary.get(i)+    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
7	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  2;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  2;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)+  2;	  double[]    secondary    =    squaredSecondary.get(i)+    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
8	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  3;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  3;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)+  3;	  double[]    secondary    =    squaredSecondary.get(i)+    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
9	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	18	None	replace
10	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	18	None	replace
11	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  +  1);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  +  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
12	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
13	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
14	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  -  2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  -  2];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  -  2];	  squaredSecondary[i]    =    new    double[splitTolerance.length    -    1];    	non-compiled	[CE]  ';'  expected	24	None	replace
15	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  /  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  /  1];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  /  1];	  squaredSecondary[i]    =    new    double[splitTolerance.length    -    1];    	non-compiled	[CE]  ';'  expected	24	None	replace
16	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  i);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  i);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	84	None	replace
17	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	84	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary[i]);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
19	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary.length);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
20	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(secondary);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(secondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(secondary);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
21	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  /  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  /  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  /  1;	  final    double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	96	None	replace
22	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  1;	  final    double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	96	None	replace
23	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  -  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  -  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  -  2;	  final    double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	96	None	replace
24	[BUG]  [BUGGY]  s  *=  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary[i]  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i]  +  1;	  s    *=    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	52	None	replace
25	[BUG]  [BUGGY]  s  *=  squaredSecondary[i]  +  splitTolerance;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary[i]  +  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i]  +  splitTolerance;	  s    *=    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	52	None	replace
26	[BUG]  [BUGGY]  s  *=  squaredSecondary[i  +  1];  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary[i  +  1];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i  +  1];	  s    *=    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	52	None	replace
27	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues[i];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues[i];	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	58	None	replace
28	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i]  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i]  +  1;	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	58	None	replace
29	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary[i].doubleValue();	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	58	None	replace
30	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  *  squaredTolerance;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  *  squaredTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i]  *  squaredTolerance;	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
31	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i]  +  1;	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
32	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  +  splitTolerance;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  +  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i]  +  splitTolerance;	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
33	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue()  +  1;	  double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
34	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance;	  double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
35	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  *  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  *  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue()  *  1;	  double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
36	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  -  this.splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  -  this.splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  -  this.splitTolerance;	  final    double    s    =    squaredSecondary[i]    -    splitTolerance;    	non-compiled	[CE]  ';'  expected	80	None	replace
37	[BUG]  [BUGGY]  s  *=  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary.length  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary.length  +  1;	  s    *=    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
38	[BUG]  [BUGGY]  s  *=  squaredSecondary.length  +  2;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary.length  +  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary.length  +  2;	  s    *=    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
39	[BUG]  [BUGGY]  s  *=  squaredSecondary[i].length;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary[i].length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i].length;	  s    *=    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(splitTolerance);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(splitTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  primary  =  squaredSecondary[i].clone();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  primary  =  squaredSecondary[i].clone();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  primary  =  squaredSecondary[i].clone();	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
42	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance  -  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
43	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  -  2);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
44	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  /  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  /  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  /  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
45	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  -  1];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  -  1];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[squaredSecondary.length  -  1];	  squaredSecondary[i]    =    new    double[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	81	None	replace
46	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[scaledSecondary.length];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[scaledSecondary.length];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[scaledSecondary.length];	  squaredSecondary[i]    =    new    double[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	81	None	replace
47	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
48	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.imagEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
49	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[quadSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	39	None	replace
50	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  +  3]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[quadSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	39	None	replace
51	[BUG]  [BUGGY]  double  s  =  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary.length  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary.length  +  1;	  double    s    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	98	None	replace
52	[BUG]  [BUGGY]  double  s  =  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary.length  -  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary.length  -  1;	  double    s    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	98	None	replace
53	[BUG]  [BUGGY]  double  s  =  squaredSecondary.length  -  2;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary.length  -  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary.length  -  2;	  double    s    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	98	None	replace
54	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  s;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  s;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  s;	  final    double    s    =    squaredSecondary[i]    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	1	None	replace
55	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.splitTolerance;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  this.splitTolerance;	  final    double    s    =    squaredSecondary[i]    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	1	None	replace
56	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  splitTolerance  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  splitTolerance  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  splitTolerance  +  1;	  final    double    s    =    squaredSecondary[i]    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	1	None	replace
57	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i  +  1]  *  splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i  +  1]  *  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i  +  1]  *  splitTolerance;	  final    double    s    =    squaredSecondary[i    +    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
58	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i  *  1];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i  *  1];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i  *  1];	  final    double    s    =    squaredSecondary[i    +    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
59	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i  +  2];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i  +  2];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i  +  2];	  final    double    s    =    squaredSecondary[i    +    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
60	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  splitTolerance;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
61	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  secondary;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  secondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  secondary;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
62	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  2;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  2;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
63	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  i;  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  i;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  i;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
64	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getImagEigenvalues();    	non-compiled	[CE]  ';'  expected	49	None	replace
65	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary[i];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  sqlSecondary[i];	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	4	None	replace
66	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i]  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i]  +  1;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	4	None	replace
67	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  *  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  *  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  *  1;	  double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
68	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  /  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  /  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  /  1;	  double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
69	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  *  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  *  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary[i]  *  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
70	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quadSecondary.length  -  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	38	None	replace
71	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  -  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	38	None	replace
72	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(i);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(i);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	42	None	replace
73	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].doubleValue());  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].doubleValue());	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray();    	non-compiled	[CE]  ';'  expected	42	None	replace
74	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[squaredSecondary.length  +  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	37	None	replace
75	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i].doubleValue()  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i].doubleValue()  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i].doubleValue()  +  1;	  final    double    s    =    sqlSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	91	None	replace
76	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i].doubleValue());	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue()    +    1);    	non-compiled	[CE]  ';'  expected	32	None	replace
77	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  +  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
78	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  splitTolerance.doubleValue()  -  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
79	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance[i],  squaredSecondary.doubleValue());  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance[i],  squaredSecondary.doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance[i],  squaredSecondary.doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
80	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  /  2;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    2;    	non-compiled	[CE]  ';'  expected	66	None	replace
81	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  3;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  3;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  3;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    2;    	non-compiled	[CE]  ';'  expected	66	None	replace
82	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  *  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  *  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  *  1);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i    +    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
83	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  2);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  2);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i    +    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
84	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i]  -  1);	  squaredSecondary[i]    =    Math.max(0.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	64	None	replace
85	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i].length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i].length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i].length);	  squaredSecondary[i]    =    Math.max(0.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	64	None	replace
86	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(1.0,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(1.0,  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(1.0,  squaredSecondary[i]);	  squaredSecondary[i]    =    Math.max(0.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	64	None	replace
87	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  splitTolerance);	  squaredSecondary[i]    =    Math.max(0.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	64	None	replace
88	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  /  2];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  /  2];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  /  2];	  squaredSecondary[i]    =    new    double[splitTolerance.length    *    2];    	non-compiled	[CE]  ';'  expected	25	None	replace
89	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  2]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  +  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i    +    1]);    	non-compiled	[CE]  ';'  expected	20	None	replace
90	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  sqlSecondary.length;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
91	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary.length  +  1;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
92	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  i);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i,  i);	  double[]    secondary    =    squaredSecondary.get(i,    splitTolerance);    	non-compiled	[CE]  ';'  expected	15	None	replace
93	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  0);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  0);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i,  0);	  double[]    secondary    =    squaredSecondary.get(i,    splitTolerance);    	non-compiled	[CE]  ';'  expected	15	None	replace
94	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  this.splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i,  this.splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i,  this.splitTolerance);	  double[]    secondary    =    squaredSecondary.get(i,    splitTolerance);    	non-compiled	[CE]  ';'  expected	15	None	replace
95	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredTolerance);    	non-compiled	[CE]  ';'  expected	35	None	replace
96	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance  +  1);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredTolerance  +  1);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredTolerance);    	non-compiled	[CE]  ';'  expected	35	None	replace
97	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  secondary);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  secondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  secondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredTolerance);    	non-compiled	[CE]  ';'  expected	35	None	replace
98	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  2);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    secondary[i]);    	non-compiled	[CE]  ';'  expected	63	None	replace
99	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  *  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  *  splitTolerance;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  *  splitTolerance;	  double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	23	None	replace
100	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  this.splitTolerance;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  +  this.splitTolerance;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  this.splitTolerance;	  double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	23	None	replace
101	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  this.splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  this.splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  this.splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	30	None	replace
102	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  /  splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	30	None	replace
103	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance  +  1;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	30	None	replace
104	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  +  10.0;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  +  10.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  +  10.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
105	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  *  10.0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  *  10.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  *  10.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
106	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  1.0;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  +  1.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  1.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
107	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary,  squaredTolerance.clone();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary,  squaredTolerance.clone();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary,  squaredTolerance.clone();	  ArrayRealVector[]    secondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
108	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  *  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  *  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i  *  1);	  double[]    secondary    =    squaredSecondary.get(i    +    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  +  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  +  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance.length]);    	non-compiled	[CE]  ';'  expected	74	None	replace
110	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  -  1]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  -  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  -  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance.length]);    	non-compiled	[CE]  ';'  expected	74	None	replace
111	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance.length]);    	non-compiled	[CE]  ';'  expected	74	None	replace
112	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvectors();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getrealEigenvectors();    	non-compiled	[CE]  ';'  expected	46	None	replace
113	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  this.splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  this.splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  this.splitTolerance);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
114	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  +  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
115	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
116	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue()  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue()  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i].doubleValue()  +  1;	  final    double    s    =    this.realEigenvalues[i].doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
117	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue()  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i].doubleValue()  *  squaredSecondary.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i].doubleValue()  *  squaredSecondary.length;	  final    double    s    =    this.realEigenvalues[i].doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
118	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  realEigenvalues.length;	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	76	None	replace
119	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i]  *  squaredSecondary.length  +  1;	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	76	None	replace
120	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues.length;	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	67	None	replace
121	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  this.realEigenvalues;	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	67	None	replace
122	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i]  *  squaredSecondary.length  +  1;	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	67	None	replace
123	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  this.splitTolerance;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  this.splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  +  this.splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue()    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	29	None	replace
124	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  /  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  /  1;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    1;    	non-compiled	[CE]  ';'  expected	65	None	replace
125	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDoubleEigenvectors();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDoubleEigenvectors();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getDoubleEigenvectors();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRangeEigenvectors();    	non-compiled	[CE]  ';'  expected	41	None	replace
126	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDomainEigenvectors();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDomainEigenvectors();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getDomainEigenvectors();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRangeEigenvectors();    	non-compiled	[CE]  ';'  expected	41	None	replace
127	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
128	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
129	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
130	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(this.work);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(this.work);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(this.work);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone(transformer);    	non-compiled	[CE]  ';'  expected	62	None	replace
131	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(work);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(work);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(work);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone(transformer);    	non-compiled	[CE]  ';'  expected	62	None	replace
132	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(splitTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone(transformer);    	non-compiled	[CE]  ';'  expected	62	None	replace
133	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(s  *  s,  squaredSecondary[i]);	  squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	51	None	replace
134	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i]  -  1);	  squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	51	None	replace
135	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  splitTolerance);  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(s,  squaredSecondary[i],  splitTolerance);	  squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	51	None	replace
136	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  +  1;	  final    double    s    =    squaredSecondary[i].doubleValue().doubleValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
137	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  2;	  final    double    s    =    squaredSecondary[i].doubleValue().doubleValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
138	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	21	None	replace
139	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[i]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	21	None	replace
140	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDimensions();  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getDimensions();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getDimensions();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaw();    	non-compiled	[CE]  ';'  expected	87	None	replace
141	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaw2();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaw2();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRaw2();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaw();    	non-compiled	[CE]  ';'  expected	87	None	replace
142	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getAllEigenvectors();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getAllEigenvectors();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getAllEigenvectors();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaws();    	non-compiled	[CE]  ';'  expected	43	None	replace
143	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws(i);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws(i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRaws(i);	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaws();    	non-compiled	[CE]  ';'  expected	43	None	replace
144	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
145	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]));  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]));  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]));	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
146	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary[i]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
147	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  +  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  +  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	99	None	replace
148	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  -  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	99	None	replace
149	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	99	None	replace
150	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  +  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance[i].doubleValue());    	non-compiled	[CE]  ';'  expected	100	None	replace
151	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  -  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  splitTolerance[i].doubleValue()  -  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance[i].doubleValue());    	non-compiled	[CE]  ';'  expected	100	None	replace
152	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  2];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  2];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[squaredSecondary.length  +  2];	  squaredSecondary[i]    =    new    double[squaredSecondary.length    +    1];    	non-compiled	[CE]  ';'  expected	69	None	replace
153	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[quadSecondary.length  +  1];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[quadSecondary.length  +  1];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[quadSecondary.length  +  1];	  squaredSecondary[i]    =    new    double[squaredSecondary.length    +    1];    	non-compiled	[CE]  ';'  expected	69	None	replace
154	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i].length);    	non-compiled	[CE]  ';'  expected	10	None	replace
155	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  +  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  +  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i].length);    	non-compiled	[CE]  ';'  expected	10	None	replace
156	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  2);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i].length  -  2);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i].length);    	non-compiled	[CE]  ';'  expected	10	None	replace
157	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].get();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].get();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].get();	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].remove();    	non-compiled	[CE]  ';'  expected	85	None	replace
158	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copy();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copy();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copy();	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].remove();    	non-compiled	[CE]  ';'  expected	85	None	replace
159	[BUG]  [BUGGY]  final  double  s  =  this.splitTolerance[i]  +  squaredSecondary;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.splitTolerance[i]  +  squaredSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.splitTolerance[i]  +  squaredSecondary;	  final    double    s    =    squaredSecondary[i]    +    this.splitTolerance;    	non-compiled	[CE]  ';'  expected	44	None	replace
160	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  Double(splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  Double(splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  Double(splitTolerance);	  squaredSecondary[i]    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	70	None	replace
161	[BUG]  [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  1;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  1;	  squaredSecondary[i]    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	70	None	replace
162	[BUG]  [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  splitTolerance;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  splitTolerance;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  splitTolerance;	  squaredSecondary[i]    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	70	None	replace
163	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  sqlSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  sqlSecondary;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary;    	non-compiled	[CE]  ';'  expected	68	None	replace
164	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getValues();    	non-compiled	[CE]  ';'  expected	48	None	replace
165	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getRawValues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getValues();    	non-compiled	[CE]  ';'  expected	48	None	replace
166	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  2);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  -  2);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	9	None	replace
167	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  *  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  *  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  *  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	9	None	replace
168	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  /  1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  /  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i]  /  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	9	None	replace
169	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i    +    1]);    	non-compiled	[CE]  ';'  expected	16	None	replace
170	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[realEigenvalues.length]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[i]);    	non-compiled	[CE]  ';'  expected	34	None	replace
171	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[0]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[0]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[0]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[i]);    	non-compiled	[CE]  ';'  expected	34	None	replace
172	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[i]);    	non-compiled	[CE]  ';'  expected	34	None	replace
173	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  +  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  +  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance]);    	non-compiled	[CE]  ';'  expected	93	None	replace
174	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[i]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance]);    	non-compiled	[CE]  ';'  expected	93	None	replace
175	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  /  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  /  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  /  1;	  final    double    s    =    sqlSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	92	None	replace
176	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues[i];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  realEigenvalues[i];	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	77	None	replace
177	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i]  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i]  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i]  +  1;	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	77	None	replace
178	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary;	  final    double    s    =    this.realEigenvalues[i    +    1];    	non-compiled	[CE]  ';'  expected	59	None	replace
179	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary[i];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary[i];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary[i];	  final    double    s    =    this.realEigenvalues[i    +    1];    	non-compiled	[CE]  ';'  expected	59	None	replace
180	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  +  1);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	60	None	replace
181	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  squaredSecondary.length  -  1);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	60	None	replace
182	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.main,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredSecondary.length);    	non-compiled	[CE]  ';'  expected	60	None	replace
183	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]  -  10.0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]  -  10.0);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i]  -  10.0);	  squaredSecondary[i]    =    Math.max(10.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	95	None	replace
184	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[0]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
185	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary[1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
186	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i]));	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
187	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  2]);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[quaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
188	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  3]);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  3]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  +  3]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[quaredSecondary.length    +    1]);    	non-compiled	[CE]  ';'  expected	40	None	replace
189	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0],  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	18	None	replace
190	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  /  secondary;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  /  secondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  /  secondary;	  final    double    s    =    squaredSecondary[i]    /    splitTolerance;    	non-compiled	[CE]  ';'  expected	45	None	replace
191	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i    +    1]);    	non-compiled	[CE]  ';'  expected	16	None	replace
192	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[squaredSecondary.length  +  i];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[squaredSecondary.length  +  i];	  squaredSecondary[i]    =    new    double[splitTolerance.length    +    i];    	non-compiled	[CE]  ';'  expected	82	None	replace
193	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  *  squaredSecondary;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i]  *  squaredSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i]  *  squaredSecondary;	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
194	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i  +  1];  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i  +  1];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i  +  1];	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
195	[BUG]  [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector  s  =  squaredSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector  s  =  squaredSecondary[i].doubleValue();	  ArrayRealVector    s    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	79	None	replace
196	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i  +  1,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i    +    1);    	non-compiled	[CE]  ';'  expected	61	None	replace
197	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
198	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  2  +  1];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  2  +  1];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  *  2  +  1];	  squaredSecondary[i]    =    new    double[splitTolerance.length    *    2];    	non-compiled	[CE]  ';'  expected	25	None	replace
199	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i  +  1]  *  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i  +  1]  *  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i  +  1]  *  2;	  final    double    s    =    squaredSecondary[i    +    1];    	non-compiled	[CE]  ';'  expected	3	None	replace
200	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  2  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  2  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  2  +  1;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    2;    	non-compiled	[CE]  ';'  expected	66	None	replace
201	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
202	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  i);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  i);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
203	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  primary);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  primary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  primary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
204	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.get(i);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.get(i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.get(i);	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaw();    	non-compiled	[CE]  ';'  expected	87	None	replace
205	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary  +  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary  +  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary  +  1;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary;    	non-compiled	[CE]  ';'  expected	68	None	replace
206	[BUG]  [BUGGY]  s  *=  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary[i].doubleValue();	  s    *=    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	52	None	replace
207	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i]  *  realEigenvalues;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i]  *  realEigenvalues;	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	77	None	replace
208	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  double[qMax]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    double[i]);    	non-compiled	[CE]  ';'  expected	34	None	replace
209	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(s  +  1,  squaredSecondary[i]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(s  +  1,  squaredSecondary[i]);  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(s  +  1,  squaredSecondary[i]);	  squaredSecondary[i]    =    Math.min(s,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	51	None	replace
210	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  secondary[i].doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  secondary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  secondary[i].doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance[i].doubleValue());    	non-compiled	[CE]  ';'  expected	100	None	replace
211	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  primary[i].doubleValue());  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  primary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  primary[i].doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance[i].doubleValue());    	non-compiled	[CE]  ';'  expected	100	None	replace
212	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance  +  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance  +  1];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance  +  1];	  squaredSecondary[i]    =    new    double[squaredSecondary.length    +    1];    	non-compiled	[CE]  ';'  expected	69	None	replace
213	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  splitTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
214	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
215	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length  +  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i    +    1]);    	non-compiled	[CE]  ';'  expected	20	None	replace
216	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i  *  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i    +    1]);    	non-compiled	[CE]  ';'  expected	20	None	replace
217	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  realEigenvalues[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i].doubleValue();	  final    double    s    =    this.realEigenvalues[i].doubleValue();    	non-compiled	[CE]  ';'  expected	89	None	replace
218	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  -  2;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  -  2;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  -  2;	  double    s    =    squaredSecondary[i]    -    1;    	non-compiled	[CE]  ';'  expected	88	None	replace
219	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  +  2.0;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  +  2.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  +  2.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
220	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  *  squaredSecondary[i].doubleValue();	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	4	None	replace
221	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  +  2);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  +  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i  +  2);	  double[]    secondary    =    squaredSecondary.get(i    +    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
222	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws()  +  1;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getRaws()  +  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getRaws()  +  1;	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaws();    	non-compiled	[CE]  ';'  expected	43	None	replace
223	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  4;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  4;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  4;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    1;    	non-compiled	[CE]  ';'  expected	65	None	replace
224	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2.0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2.0);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i].doubleValue()  /  2.0);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    squaredSecondary[i].doubleValue());    	non-compiled	[CE]  ';'  expected	99	None	replace
225	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  -  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    secondary[i]);    	non-compiled	[CE]  ';'  expected	63	None	replace
226	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  secondary[i]  +  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    secondary[i]);    	non-compiled	[CE]  ';'  expected	63	None	replace
227	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].reset();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].reset();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].reset();	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
228	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray(new  ArrayRealVector[i].clone());  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray(new  ArrayRealVector[i].clone());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray(new  ArrayRealVector[i].clone());	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
229	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i  +  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  realEigenvalues[i  +  1];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i  +  1];	  final    double    s    =    this.realEigenvalues[i    +    1];    	non-compiled	[CE]  ';'  expected	59	None	replace
230	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  imagEigenvalues);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  imagEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
231	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])+  squaredSecondary.length);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])+  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])+  squaredSecondary.length);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
232	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  /  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  /  splitTolerance;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  /  splitTolerance;	  double    s    =    squaredSecondary[i]    +    splitTolerance;    	non-compiled	[CE]  ';'  expected	23	None	replace
233	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  secondary[i]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  secondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0.0,  squaredSecondary[i],  secondary[i]);	  squaredSecondary[i]    =    Math.max(0.0,    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	64	None	replace
234	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(splitTolerance,  squaredSecondary);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
235	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.splitTolerance);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
236	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  i);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  i);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	11	None	replace
237	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary[i]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary[i]);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
238	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  1);	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
239	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance.doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance.doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  +  splitTolerance.doubleValue();	  final    double    s    =    squaredSecondary[i].doubleValue().doubleValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
240	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  3];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  3];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  *  3];	  squaredSecondary[i]    =    new    double[splitTolerance.length    *    1];    	non-compiled	[CE]  ';'  expected	90	None	replace
241	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  this.splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  this.splitTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  this.splitTolerance);	  squaredSecondary[i]    =    Math.min(squaredSecondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	84	None	replace
242	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  -  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i  -  2);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i  -  2);	  double[]    secondary    =    squaredSecondary.get(i    -    1);    	non-compiled	[CE]  ';'  expected	14	None	replace
243	[BUG]  [BUGGY]  squaredSecondary[i]  =  double.POSITIVE_INFINITY;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  double.POSITIVE_INFINITY;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  double.POSITIVE_INFINITY;	  squaredSecondary[i]    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	70	None	replace
244	[BUG]  [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  i;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  i;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Double.POSITIVE_INFINITY  +  i;	  squaredSecondary[i]    =    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  ';'  expected	70	None	replace
245	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  splitTolerance  -  1);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	9	None	replace
246	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quaredSecondary.length  -  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length    -    1]);    	non-compiled	[CE]  ';'  expected	38	None	replace
247	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  2;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  +  2;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue()  +  2;	  double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
248	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors(i);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors(i);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.getrealEigenvectors(i);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getrealEigenvectors();    	non-compiled	[CE]  ';'  expected	46	None	replace
249	[BUG]  [BUGGY]  squaredSecondary[i]  =  0.0;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  0.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  0.0;	  squaredSecondary[i]    =    0L;    	non-compiled	[CE]  ';'  expected	8	None	replace
250	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i].doubleValue());	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
251	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  secondary;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue()  *  secondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue()  *  secondary;	  final    double    s    =    squaredSecondary[i].doubleValue()    *    splitTolerance;    	non-compiled	[CE]  ';'  expected	30	None	replace
252	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary.doubleValue());  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary.doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  secondary.doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
253	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i.doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i.doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  i.doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
254	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	21	None	replace
255	[BUG]  [BUGGY]  s  *=  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  s  *=  squaredSecondary.length  -  1;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	s  *=  squaredSecondary.length  -  1;	  s    *=    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	97	None	replace
256	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.get  RealEigenvalues();	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.getImagEigenvalues();    	non-compiled	[CE]  ';'  expected	49	None	replace
257	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  0;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)+  0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)+  0;	  double[]    secondary    =    squaredSecondary.get(i)+    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
258	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  /  squaredSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  /  squaredSecondary.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  /  squaredSecondary.length;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	5	None	replace
259	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary.length  *  this.realEigenvalues[i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary.length  *  this.realEigenvalues[i];  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary.length  *  this.realEigenvalues[i];	  final    double    s    =    this.realEigenvalues[i]    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	67	None	replace
260	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  /  10.0;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  /  10.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  /  10.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
261	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i]  /  1.0.0;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i]  /  1.0.0;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i]  /  1.0.0;	  double    s    =    squaredSecondary[i]    +    10.0;    	non-compiled	[CE]  ';'  expected	71	None	replace
262	[BUG]  [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.realEigenvalues[i  +  1]  *  squaredSecondary.length;	  final    double    s    =    this.realEigenvalues[i    +    1];    	non-compiled	[CE]  ';'  expected	59	None	replace
263	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[2]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[0]);    	non-compiled	[CE]  ';'  expected	18	None	replace
264	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].remove();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].remove();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].remove();	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
265	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].toArray();	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
266	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(this);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(this);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary[i].copyOf(this);	  ArrayRealVector[]    secondary    =    squaredSecondary[i].clone();    	non-compiled	[CE]  ';'  expected	56	None	replace
267	[BUG]  [BUGGY]  final  double  s  =  this.splitTolerance[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  this.splitTolerance[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  this.splitTolerance[i].doubleValue();	  final    double    s    =    sqlSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	91	None	replace
268	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])/  2,  squaredSecondary);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])/  2,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i])/  2,  squaredSecondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	83	None	replace
269	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  -  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
270	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i]  -  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i]  -  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i]  -  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    -    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
271	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  +  1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  +  1);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary,  squaredSecondary[i]  +  1);	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i]    +    1);    	non-compiled	[CE]  ';'  expected	55	None	replace
272	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance.doubleValue());  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance.doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  this.splitTolerance.doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
273	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  sigmaLow.doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  sigmaLow.doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  sigmaLow.doubleValue());	  squaredSecondary[i]    =    Math.min(squaredSecondary[i],    splitTolerance.doubleValue());    	non-compiled	[CE]  ';'  expected	31	None	replace
274	[BUG]  [BUGGY]  final  double  s  =  sqlSecondary[i]  /  squaredSecondary;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  sqlSecondary[i]  /  squaredSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  sqlSecondary[i]  /  squaredSecondary;	  final    double    s    =    sqlSecondary[i]    *    squaredSecondary;    	non-compiled	[CE]  ';'  expected	68	None	replace
275	[BUG]  [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  realEigenvalues[i]  *  squaredSecondary[i].doubleValue();	  final    double    s    =    realEigenvalues[i]    *    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	77	None	replace
276	[BUG]  [BUGGY]  final  double  s  =  quaddSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  quaddSecondary[i].doubleValue();  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  quaddSecondary[i].doubleValue();	  final    double    s    =    squaredSecondary[i].doubleValue()    +    1;    	non-compiled	[CE]  ';'  expected	28	None	replace
277	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(splitTolerance,  squaredSecondary.length);	  squaredSecondary[i]    =    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
278	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(splitTolerance,  squaredSecondary.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(splitTolerance,  squaredSecondary.length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(splitTolerance,  squaredSecondary.length);	  squaredSecondary[i]    =    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
279	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].cache();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].cache();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].cache();	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].remove();    	non-compiled	[CE]  ';'  expected	85	None	replace
280	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getAllRaws();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.getAllRaws();  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.getAllRaws();	  ArrayRealVector[]    secondary    =    squaredSecondary.getRaws();    	non-compiled	[CE]  ';'  expected	43	None	replace
281	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  this.magEigenvalues);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  this.magEigenvalues);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(i,  this.magEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredTolerance);    	non-compiled	[CE]  ';'  expected	35	None	replace
282	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.work,  squaredTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.work,  squaredTolerance);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(this.work,  squaredTolerance);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(i,    squaredTolerance);    	non-compiled	[CE]  ';'  expected	35	None	replace
283	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  squaredSecondary[i]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  squaredSecondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(0,  squaredSecondary[i],  squaredSecondary[i]);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    secondary[i]);    	non-compiled	[CE]  ';'  expected	63	None	replace
284	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i],  secondary[i]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i],  secondary[i]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i],  secondary[i]);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i],    secondary[i]);    	non-compiled	[CE]  ';'  expected	63	None	replace
285	[BUG]  [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	final  double  s  =  squaredSecondary[i].doubleValue().doubleValue()  *  splitTolerance;	  final    double    s    =    squaredSecondary[i].doubleValue().doubleValue();    	non-compiled	[CE]  ';'  expected	86	None	replace
286	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i  +  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
287	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	19	None	replace
288	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  /  s;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  /  s;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  /  s;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
289	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  squaredSecondary;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
290	[BUG]  [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary.length;  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  s  *  squaredSecondary.length;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  s  *  squaredSecondary.length;	  squaredSecondary[i]    =    s    *    s;    	non-compiled	[CE]  ';'  expected	50	None	replace
291	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[i],  squaredSecondary[i-1]);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(new    ArrayRealVector[i],    squaredSecondary[i]);    	non-compiled	[CE]  ';'  expected	17	None	replace
292	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer,  squaredSecondary);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].clone(transformer,  squaredSecondary);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].clone(transformer);    	non-compiled	[CE]  ';'  expected	62	None	replace
293	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.main);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.main);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondaries[i].copyOf(this.main);	  ArrayRealVector[]    secondary    =    squaredSecondaries[i].copyOf(splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
294	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i].length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i].length);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.max(10.0,  squaredSecondary[i].length);	  squaredSecondary[i]    =    Math.max(0,    squaredSecondary[i].length);    	non-compiled	[CE]  ';'  expected	10	None	replace
295	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance];	  squaredSecondary[i]    =    new    double[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	81	None	replace
296	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[quardSecondary.length  +  1]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[squaredSecondary.length    +    i]);    	non-compiled	[CE]  ';'  expected	73	None	replace
297	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues,  squaredSecondary);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
298	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(imagEigenvalues);	  ArrayRealVector[]    realEigenvalues    =    squaredSecondary.toArray(realEigenvalues);    	non-compiled	[CE]  ';'  expected	36	None	replace
299	[BUG]  [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;  [BUGGY]      squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double  s  =  squaredSecondary[i].doubleValue()  *  splitTolerance;	  double    s    =    squaredSecondary[i].doubleValue();    	non-compiled	[CE]  ';'  expected	78	None	replace
300	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  splitTolerance]);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  splitTolerance]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  splitTolerance]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance]);    	non-compiled	[CE]  ';'  expected	93	None	replace
301	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  2]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance  *  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance]);    	non-compiled	[CE]  ';'  expected	93	None	replace
302	[BUG]  [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)-  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  double[]  secondary  =  squaredSecondary.get(i)-  1;  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	double[]  secondary  =  squaredSecondary.get(i)-  1;	  double[]    secondary    =    squaredSecondary.get(i)+    1;    	non-compiled	[CE]  ';'  expected	75	None	replace
303	[BUG]  [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  i];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  new  double[splitTolerance.length  *  i];  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  new  double[splitTolerance.length  *  i];	  squaredSecondary[i]    =    new    double[splitTolerance.length    +    i];    	non-compiled	[CE]  ';'  expected	82	None	replace
304	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredSecondary);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i]),  squaredSecondary,  squaredSecondary);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    ArrayRealVector[i]),    squaredSecondary);    	non-compiled	[CE]  ';'  expected	94	None	replace
305	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(squaredSecondary[i],  squaredSecondary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(squaredSecondary[i],  squaredSecondary[i].doubleValue());	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue()    +    1);    	non-compiled	[CE]  ';'  expected	32	None	replace
306	[BUG]  [BUGGY]  squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i].doubleValue());  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i].doubleValue());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	squaredSecondary[i]  =  Math.min(quadSecondary,  squaredSecondary[i].doubleValue());	  squaredSecondary[i]    =    Math.min(splitTolerance,    squaredSecondary[i].doubleValue()    +    1);    	non-compiled	[CE]  ';'  expected	32	None	replace
307	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].clone());  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].clone());  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  ArrayRealVector[i].clone());	  ArrayRealVector[]    secondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
308	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[2]);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance.length]);    	non-compiled	[CE]  ';'  expected	74	None	replace
309	[BUG]  [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  *  2]);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  double  splitTolerance)  throws  InvalidMatrixException  {  this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {      [BUGGY]  ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  *  2]);  [BUGGY]      final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	200	200	1	replace	ArrayRealVector[]  secondary  =  squaredSecondary.toArray(new  double[splitTolerance.length  *  2]);	  ArrayRealVector[]    secondary    =    squaredSecondary.toArray(new    double[splitTolerance.length]);    	non-compiled	[CE]  ';'  expected	74	None	replace
