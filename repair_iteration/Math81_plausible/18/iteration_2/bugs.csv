bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  1])  {  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  1])  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  1])  {	  if(work[i4]    <    work[i4    -    2])    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||  work[i4]  >  work[i4  -  2])  {  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||  work[i4]  >  work[i4  -  2])  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  2]  ||  work[i4]  >  work[i4  -  2])  {	  if(work[i4]    <    work[i4    -    2])    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[1];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[3];  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[3];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[3];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[1];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[0];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[0];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[0];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[1];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  cnst1  =  Math.min(b1,  b2);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.min(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.min(b1,  b2);	      cnst1    =    Math.max(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  cnst1  =  Math.min(b2,  b1);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.min(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.min(b2,  b1);	      cnst1    =    Math.max(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  b1  =  b2  *  Math.max(b2,  b1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  b1  =  b2  *  Math.max(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	b1  =  b2  *  Math.max(b2,  b1);	      b1    =    b2    *    Math.max(b1,    b1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
9	[BUG]  [BUGGY]  b1  =  b2  *  Math.min(b1,  b2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  b1  =  b2  *  Math.min(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	b1  =  b2  *  Math.min(b1,  b2);	      b1    =    b2    *    Math.max(b1,    b1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
10	[BUG]  [BUGGY]  b1  =  b2  *  Math.min(b2,  b1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  b1  =  b2  *  Math.min(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	b1  =  b2  *  Math.min(b2,  b1);	      b1    =    b2    *    Math.max(b1,    b1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
11	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  2]  ||(work[i4]  <  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
13	[BUG]  [BUGGY]  if(work[i4]  >  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  1]  ||(work[i4]  <  =  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  1);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  1);	      ArrayRealVector    work[i4]    =    new    ArrayRealVector(b1.length,    b2.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b2.length,  b1.length);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b2.length,  b1.length);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVector  work[i4]  =  new  ArrayRealVector(b2.length,  b1.length);	      ArrayRealVector    work[i4]    =    new    ArrayRealVector(b1.length,    b2.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  +  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  +  1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  +  1);	      ArrayRealVector    work[i4]    =    new    ArrayRealVector(b1.length,    b2.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVector  work[i4]  =  new  ArrayRealVector(b1.length,  b2.length  -  2);	      ArrayRealVector    work[i4]    =    new    ArrayRealVector(b1.length,    b2.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  deflated);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
20	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement();  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeShiftIncrement();  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeShiftIncrement();	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
21	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  i4);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b1,    i4);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
22	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  i2);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  i2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  i2);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b1,    i4);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
23	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b2);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b2);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  ']'  expected	12	None	replace
24	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b1);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b1,  b1);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b2);    	non-compiled	[CE]  ']'  expected	12	None	replace
25	[BUG]  [BUGGY]  if(work[i4]  >=  work[i4  -  1])  {  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >=  work[i4  -  1])  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >=  work[i4  -  1])  {	  if(work[i4]    >    work[i4    -    1])    {    	non-compiled	[CE]  ']'  expected	7	None	replace
26	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b2);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	4	None	replace
27	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b1);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.max(b1,  b1);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	4	None	replace
28	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b2,  b1);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b2,  b1);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	4	None	replace
29	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    +    1];    	non-compiled	[CE]  ']'  expected	5	None	replace
30	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[b2  +  1];  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[b2  +  1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[b2  +  1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    +    1];    	non-compiled	[CE]  ']'  expected	5	None	replace
31	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  +  1];  [CE]  ']'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  +  1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  +  1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    +    1];    	non-compiled	[CE]  ']'  expected	5	None	replace
32	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  +  1];  [CE]  ']'  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  +  1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  +  1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    +    1];    	non-compiled	[CE]  ']'  expected	5	None	replace
33	[BUG]  [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||  work[i4]  <  0)  {  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  <  work[i4  -  2]  ||  work[i4]  <  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  <  work[i4  -  2]  ||  work[i4]  <  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  ']'  expected	8	None	replace
34	[BUG]  [BUGGY]  if(work[i4]  >  work[i4  -  1]  ||  work[i4]  <  0)  {  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >  work[i4  -  1]  ||  work[i4]  <  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >  work[i4  -  1]  ||  work[i4]  <  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  ']'  expected	8	None	replace
35	[BUG]  [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4]  ==  0)  {  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4]  ==  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >  work[i4  -  2]  ||  work[i4]  ==  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  ']'  expected	8	None	replace
36	[BUG]  [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4]  <  =  0)  {  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4]  <  =  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >  work[i4  -  2]  ||  work[i4]  <  =  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  ']'  expected	8	None	replace
37	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.log(b1,  b2);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.log(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.log(b1,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b2);    	non-compiled	[CE]  ']'  expected	3	None	replace
38	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b1,  b2);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b2  *  Math.min(b1,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b2);    	non-compiled	[CE]  ']'  expected	3	None	replace
39	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  0);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  0);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  0);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b2);    	non-compiled	[CE]  ']'  expected	3	None	replace
40	[BUG]  [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  1]);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  1]);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  1]);	      boolean    work[i4]    =    Math.max(work[i4]    /    work[i4    -    2]);    	non-compiled	[CE]  ']'  expected	16	None	replace
41	[BUG]  [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  *  work[i4  -  2]);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  *  work[i4  -  2]);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	boolean  work[i4]  =  Math.max(work[i4]  *  work[i4  -  2]);	      boolean    work[i4]    =    Math.max(work[i4]    /    work[i4    -    2]);    	non-compiled	[CE]  ']'  expected	16	None	replace
42	[BUG]  [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  3]);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  3]);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	boolean  work[i4]  =  Math.max(work[i4]  /  work[i4  -  3]);	      boolean    work[i4]    =    Math.max(work[i4]    /    work[i4    -    2]);    	non-compiled	[CE]  ']'  expected	16	None	replace
43	[BUG]  [BUGGY]  cnst1  =  Math.max(b1,  b1);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.max(b1,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.max(b1,  b1);	      cnst1    =    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	18	None	replace
44	[BUG]  [BUGGY]  cnst1  =  Math.max(b2,  b2);  [CE]  ']'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.max(b2,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.max(b2,  b2);	      cnst1    =    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	18	None	replace
45	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  -  1];  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  -  1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[work[i4  -  1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    +    1];    	non-compiled	[CE]  ']'  expected	5	None	replace
46	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  *  Math.max(b2,  b2);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  *  Math.max(b2,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[b1  *  Math.max(b2,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b2);    	non-compiled	[CE]  ']'  expected	3	None	replace
47	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b2);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b2);    	non-compiled	[CE]  ']'  expected	3	None	replace
48	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b1);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[1  *  Math.max(b2,  b1);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	4	None	replace
49	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2  *  Math.max(b1,  b2);  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2  *  Math.max(b1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  2]  =  new  double[2  *  Math.max(b1,  b2);	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[b2    *    Math.max(b2,    b1);    	non-compiled	[CE]  ']'  expected	4	None	replace
50	[BUG]  [BUGGY]  ArrayRealVector  work[0]  =  new  ArrayRealVector(b1.length,  b2.length);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVector  work[0]  =  new  ArrayRealVector(b1.length,  b2.length);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVector  work[0]  =  new  ArrayRealVector(b1.length,  b2.length);	      ArrayRealVector    work[i4]    =    new    ArrayRealVector(b1.length,    b2.length);    	non-compiled	[CE]  ']'  expected	2	None	replace
51	[BUG]  [BUGGY]  if(work[i4]!=  work[i4  -  1])  {  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]!=  work[i4  -  1])  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]!=  work[i4  -  1])  {	  if(work[i4]!=    work[i4    -    2])    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
52	[BUG]  [BUGGY]  if(work[i4]  ==  work[i4  -  2])  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  ==  work[i4  -  2])  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  ==  work[i4  -  2])  {	  if(work[i4]!=    work[i4    -    2])    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
53	[BUG]  [BUGGY]  b1  =  b2  *  Math.max(b2,  b2);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  b1  =  b2  *  Math.max(b2,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	b1  =  b2  *  Math.max(b2,  b2);	      b1    =    b2    *    Math.max(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  if(work[i4]  >=  work[i4  -  2]  ||  work[i4]  <  0)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >=  work[i4  -  2]  ||  work[i4]  <  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >=  work[i4  -  2]  ||  work[i4]  <  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4  -  1]  <  0)  {  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >  work[i4  -  2]  ||  work[i4  -  1]  <  0)  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >  work[i4  -  2]  ||  work[i4  -  1]  <  0)  {	  if(work[i4]    >    work[i4    -    2]    ||    work[i4]    <    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  if(work[i4]  >=  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  >=  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  >=  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  cnst1  =  Math.min(cnst1,  b2);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.min(cnst1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.min(cnst1,  b2);	      cnst1    =    Math.max(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  cnst1  =  Math.max(cnst1,  b2);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  cnst1  =  Math.max(cnst1,  b2);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	cnst1  =  Math.max(cnst1,  b2);	      cnst1    =    Math.max(b1,    b2);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  if(work[i4]  ==  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  if(work[i4]  ==  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {  [BUGGY]    return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	if(work[i4]  ==  work[i4  -  2]  ||(work[i4]  <  =  work[i4  -  1]))  {	  if    (work[i4]    >    work[i4    -    2]    ||(work[i4]    <    =    work[i4    -    1]))    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(deflated);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  ArrayRealVectorwork[]  work[i4  -  1]  =  new  double[1];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayRealVectorwork[]  work[i4  -  1]  =  new  double[1];  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayRealVectorwork[]  work[i4  -  1]  =  new  double[1];	      ArrayRealVectorwork[]    work[i4    -    2]    =    new    double[1];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  b1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    np  =  nn  -  13;  }  a2  =  a2  +  b2;  for  (int  i4  =  np;  i4  >=  4  *  start  +  2  +  pingPong;  i4  -=  4)  {  if(b2  ==  0.0)  {  break;  }  b1  =  b2;    [BUGGY]  ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  b1);  [BUGGY]    if  (work[i4]>work[i4  -  2])  {  return;  }  b2  =  b2  *  (work[i4]  /  work[i4  -  2]);  a2  =  a2  +  b2;  if  (100  *  Math.max(b2,  b1)  <  a2  ||  cnst1  <  a2)  {  break;  }  }  a2  =  cnst3  *  a2;  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1508	1508	1	replace	ArrayDecompositionImpl  work[]  =  computeDecompositionImpl(b2,  b1);	      ArrayDecompositionImpl    work[]    =    computeDecompositionImpl(b1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
