bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary  },  splitTolerance);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
2	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance,  true);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance,  true);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  secondary,  splitTolerance,  true);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
3	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance.length  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  0,  splitTolerance.length  }  );	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
4	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
5	[BUG]  [BUGGY]  super(new  double[]  {  main,  primary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  primary,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  primary,  0,  splitTolerance  }  );	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
6	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
7	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
9	[BUG]  [BUGGY]  super(main,  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  secondary,  splitTolerance);	  super(main,    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
10	[BUG]  [BUGGY]  super(main,  secondary);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  secondary);	  super(main,    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
11	[BUG]  [BUGGY]  super(main.clone(),  secondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main.clone(),  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main.clone(),  secondary);	  super(main,    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
12	[BUG]  [BUGGY]  super(main,  secondary.length,  splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  secondary.length,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  secondary.length,  splitTolerance);	  super(main,    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
13	[BUG]  [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  eigenvectors.get(splitTolerance);	  this.imagEigenvalues    =    realEigenvalues.get(splitTolerance);    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  super(new  double[]  {  main.length,  secondary.length  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.length,  secondary.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.length,  secondary.length  }  );	  super(new    double[]    {    main.length    }    );    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  super(new  double[]  {  main.length,  secondary  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.length,  secondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.length,  secondary  }  );	  super(new    double[]    {    main.length    }    );    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  super(new  double[]  {  main.length  },  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.length  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.length  },  splitTolerance);	  super(new    double[]    {    main.length    }    );    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main  },  secondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main  },  secondary);	  super(new    ArrayRealVector[]    {    },    secondary);    	non-compiled	[CE]  ';'  expected	40	None	replace
18	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary  },  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary  },  splitTolerance);	  super(new    ArrayRealVector[]    {    },    secondary);    	non-compiled	[CE]  ';'  expected	40	None	replace
19	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  },  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  },  secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  },  secondary,  splitTolerance);	  super(new    ArrayRealVector[]    {    },    secondary);    	non-compiled	[CE]  ';'  expected	40	None	replace
20	[BUG]  [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(main,  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(main,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  eigenvectors.get(main,  splitTolerance);	  this.imagEigenvalues    =    eigenvectors.get(main);    	non-compiled	[CE]  ';'  expected	1	None	replace
21	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  0);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  0);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
22	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  imagEigenvalues);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  imagEigenvalues);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  imagEigenvalues);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
23	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  pingPong);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  pingPong);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  pingPong);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
24	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  true);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  true);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  true);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
25	[BUG]  [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(secondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  eigenvectors.get(secondary);	  this.imagEigenvalues    =    realEigenvalues.get(secondary);    	non-compiled	[CE]  ';'  expected	44	None	replace
26	[BUG]  [BUGGY]  this.imagEigenvalues  =  main.get(secondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  main.get(secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  main.get(secondary);	  this.imagEigenvalues    =    realEigenvalues.get(secondary);    	non-compiled	[CE]  ';'  expected	44	None	replace
27	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	19	None	replace
28	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	19	None	replace
29	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	19	None	replace
30	[BUG]  [BUGGY]  this.sigmaLow  =  splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.sigmaLow  =  splitTolerance;  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.sigmaLow  =  splitTolerance;	  super(main);    this.sigmaLow    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	21	None	replace
31	[BUG]  [BUGGY]  super(main);  this.sigmaLow  =  sigmaLow;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main);  this.sigmaLow  =  sigmaLow;  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main);  this.sigmaLow  =  sigmaLow;	  super(main);    this.sigmaLow    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	21	None	replace
32	[BUG]  [BUGGY]  super(main);  this.sigmaLow  =  secondary;  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main);  this.sigmaLow  =  secondary;  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main);  this.sigmaLow  =  secondary;	  super(main);    this.sigmaLow    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	21	None	replace
33	[BUG]  [BUGGY]  super(Main.clone(),  secondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(Main.clone(),  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(Main.clone(),  secondary);	  super(splitTolerance,    primary);    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  super(primary,  splitTolerance);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(primary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(primary,  splitTolerance);	  super(splitTolerance,    primary);    	non-compiled	[CE]  ';'  expected	12	None	replace
35	[BUG]  [BUGGY]  this.imagEigenvalues  =  main.get(splitTolerance  +  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  main.get(splitTolerance  +  1);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  main.get(splitTolerance  +  1);	  this.imagEigenvalues    =    main.get(splitTolerance);    	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  this.imagEigenvalues  =  main.get(splitTolerance  -  1);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  main.get(splitTolerance  -  1);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  main.get(splitTolerance  -  1);	  this.imagEigenvalues    =    main.get(splitTolerance);    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  this(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );	  this(new    double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	50	None	replace
38	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	18	None	replace
39	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	18	None	replace
40	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  pingPong  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  pingPong  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0,  pingPong  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	18	None	replace
41	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance  +  1  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance  +  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary  },  splitTolerance  +  1  }  );	  super(new    double[]    {    main,    secondary    },    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	33	None	replace
42	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary.length  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary.length  }  );	  super(new    ArrayRealVector[]    {    main,    secondary    }    );    	non-compiled	[CE]  ';'  expected	31	None	replace
43	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    new    double[]    {    }    );    	non-compiled	[CE]  ';'  expected	41	None	replace
44	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  secondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  },  secondary);	  super(new    ArrayRealVector[]    {    new    double[]    {    }    );    	non-compiled	[CE]  ';'  expected	41	None	replace
45	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0);	  this(new    double[]    {    main,    secondary,    splitTolerance    ==    0);    	non-compiled	[CE]  ';'  expected	51	None	replace
46	[BUG]  [BUGGY]  super(new  double[]  {  main,  primary  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  primary  },  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  primary  },  splitTolerance  }  );	  super(new    double[]    {    main    },    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	34	None	replace
47	[BUG]  [BUGGY]  this(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  Double[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  Double[]  {  main,  secondary,  splitTolerance  }  );	  super(new    Double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  0,  splitTolerance  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    1,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	24	None	replace
49	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary,  splitTolerance  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    1,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	24	None	replace
50	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  splitTolerance,  main.length  }  );  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  splitTolerance,  main.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1,  splitTolerance,  main.length  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    1,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	24	None	replace
51	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	56	None	replace
52	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  splitTolerance.length  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	56	None	replace
53	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	56	None	replace
54	[BUG]  [BUGGY]  super(splitTolerance,  1);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  1);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  1);	  super(splitTolerance,    0);    	non-compiled	[CE]  ';'  expected	60	None	replace
55	[BUG]  [BUGGY]  super(main,  splitTolerance,  0);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  splitTolerance,  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  splitTolerance,  0);	  super(splitTolerance,    0);    	non-compiled	[CE]  ';'  expected	60	None	replace
56	[BUG]  [BUGGY]  super(splitTolerance,  0,  secondary.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  0,  secondary.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  0,  secondary.length);	  super(splitTolerance,    0);    	non-compiled	[CE]  ';'  expected	60	None	replace
57	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  3  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	15	None	replace
58	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  1  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	15	None	replace
59	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  2  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  2  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  2  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	15	None	replace
60	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  }  0);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  }  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance  }  0);	  this(new    double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	49	None	replace
61	[BUG]  [BUGGY]  super(new  Double[]  {  main,  second,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  second,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  second,  secondary,  splitTolerance  }  );	  super(new    Double[]    {    main,    second,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	46	None	replace
62	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance.length  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  0,  splitTolerance.length  }  );	  super(new    Double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	55	None	replace
63	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  1,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  1,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  1,  splitTolerance  }  );	  super(new    Double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	55	None	replace
64	[BUG]  [BUGGY]  super(new  Double[]  {  main,  primary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  primary,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  primary,  0,  splitTolerance  }  );	  super(new    Double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	55	None	replace
65	[BUG]  [BUGGY]  super(main,  secondary);  this.sigmaLow  =  sigmaLow;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  secondary);  this.sigmaLow  =  sigmaLow;  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  secondary);  this.sigmaLow  =  sigmaLow;	  super(main,    secondary);    this.sigmaLow    =    splitTolerance;    	non-compiled	[CE]  ';'  expected	22	None	replace
66	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary.length  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary.length  }  );	  super(new    double[]    {    main,    secondary    }    );    	non-compiled	[CE]  ';'  expected	4	None	replace
67	[BUG]  [BUGGY]  super(main,  splitTolerance.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  splitTolerance.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  splitTolerance.length);	  super(splitTolerance,    main.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
68	[BUG]  [BUGGY]  super(splitTolerance,  secondary.length);  [CE]  ';'  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  secondary.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  secondary.length);	  super(splitTolerance,    main.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
69	[BUG]  [BUGGY]  super(main,  secondary.length);  [CE]  ';'  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  secondary.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  secondary.length);	  super(splitTolerance,    main.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
70	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  },  realEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  },  realEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance  },  realEigenvalues);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
71	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues  },  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  imagEigenvalues  },  splitTolerance);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
72	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  },  imagEigenvalues);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  },  imagEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  0,  splitTolerance  },  imagEigenvalues);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
73	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  },  RealEigenvalues.class);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance  },  RealEigenvalues.class);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance  },  RealEigenvalues.class);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
74	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary  },  splitTolerance  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary  },  splitTolerance  }  );	  super(new    Double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	43	None	replace
75	[BUG]  [BUGGY]  super(new  Double[]  {  main  },  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main  },  second,  splitTolerance  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main  },  second,  splitTolerance  }  );	  super(new    Double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	43	None	replace
76	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
77	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
78	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  realEigenvectors  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
79	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	30	None	replace
80	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  second  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  second  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  second  }  );	  super(new    ArrayRealVector[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	30	None	replace
81	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    new    double[]    {    0    }    );    	non-compiled	[CE]  ';'  expected	58	None	replace
82	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  1  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  1  }  );	  super(new    ArrayRealVector[]    {    new    double[]    {    0    }    );    	non-compiled	[CE]  ';'  expected	58	None	replace
83	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  0,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    new    double[]    {    0    }    );    	non-compiled	[CE]  ';'  expected	58	None	replace
84	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  }  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  }  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance  }  0);	  super(new    Double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	45	None	replace
85	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  }  -1);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  }  -1);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance  }  -1);	  super(new    Double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	45	None	replace
86	[BUG]  [BUGGY]  this.splitTolerance  =  secondary.clone();  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.splitTolerance  =  secondary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.splitTolerance  =  secondary.clone();	  this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	26	None	replace
87	[BUG]  [BUGGY]  this.splitTolerance  =  primary.clone();  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.splitTolerance  =  primary.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.splitTolerance  =  primary.clone();	  this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	26	None	replace
88	[BUG]  [BUGGY]  this.splitTolerance  =  main.clone();  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.splitTolerance  =  main.clone();  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.splitTolerance  =  main.clone();	  this.splitTolerance    =    splitTolerance.clone();    	non-compiled	[CE]  ';'  expected	26	None	replace
89	[BUG]  [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	  Super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	47	None	replace
90	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  3  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  3  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  3  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
91	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  1  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  1  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
92	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  this.imagEigenvalues  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
93	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	17	None	replace
94	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	17	None	replace
95	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	17	None	replace
96	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary);	  super(new    ArrayRealVector[0],    new    double[]    {    1    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	23	None	replace
97	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary.length);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary.length);	  super(new    ArrayRealVector[0],    new    double[]    {    1    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	23	None	replace
98	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1  },  secondary,  splitTolerance);	  super(new    ArrayRealVector[0],    new    double[]    {    1    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	23	None	replace
99	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance  }  0);	  super(new    double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	37	None	replace
100	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  -1);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  }  -1);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance  }  -1);	  super(new    double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	37	None	replace
101	[BUG]  [BUGGY]  super(main,  2);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  2);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  2);	  super(splitTolerance,    2);    	non-compiled	[CE]  ';'  expected	59	None	replace
102	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main  },  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main  },  secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main  },  secondary,  splitTolerance);	  super(new    ArrayRealVector[]    {    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	32	None	replace
103	[BUG]  [BUGGY]  super(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  primary,  secondary,  splitTolerance  }  );	  super(new    double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	38	None	replace
104	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  realEigenvalues  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	7	None	replace
105	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  imagEigenvalues,  splitTolerance  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	7	None	replace
106	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues,  realEigenvalues  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	7	None	replace
107	[BUG]  [BUGGY]  super(splitTolerance,  secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  secondary,  splitTolerance);	  super(splitTolerance,    secondary);    	non-compiled	[CE]  ';'  expected	11	None	replace
108	[BUG]  [BUGGY]  super(splitTolerance,  secondary,  false);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  secondary,  false);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  secondary,  false);	  super(splitTolerance,    secondary);    	non-compiled	[CE]  ';'  expected	11	None	replace
109	[BUG]  [BUGGY]  super(new  double[]  {  primary  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  primary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  primary  }  );	  super(new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	63	None	replace
110	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  main,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  main,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  main,  splitTolerance  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
111	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  primary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  primary,  splitTolerance  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
112	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  main  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  main  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  main  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
113	[BUG]  [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  double[]  {  main,  secondary,  splitTolerance,  imagEigenvalues  }  );	  Super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	39	None	replace
114	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  2  },  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  2  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  2  },  splitTolerance);	  super(new    ArrayRealVector[0],    new    double[]    {    2    }    );    	non-compiled	[CE]  ';'  expected	25	None	replace
115	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  3  }  );  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  3  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  3  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    2    }    );    	non-compiled	[CE]  ';'  expected	25	None	replace
116	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary  },  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary  },  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary  },  splitTolerance  }  );	  this(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	36	None	replace
117	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main  },  secondary,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main  },  secondary,  0,  splitTolerance  }  );	  this(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	36	None	replace
118	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  +  1];	  ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	62	None	replace
119	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  *  2];	  ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	62	None	replace
120	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[this.imagEigenvalues.length  ];	  ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	62	None	replace
121	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	15	None	replace
122	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	17	None	replace
123	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  2  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance,  2  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance,  2  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	8	None	replace
124	[BUG]  [BUGGY]  super(new  double[]  {  main.length,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.length,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.length,  splitTolerance  }  );	  super(new    double[]    {    main.length    }    );    	non-compiled	[CE]  ';'  expected	6	None	replace
125	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  },  splitTolerance);	  super(new    ArrayRealVector[]    {    new    double[]    {    }    );    	non-compiled	[CE]  ';'  expected	41	None	replace
126	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    new    double[]    {    }    );    	non-compiled	[CE]  ';'  expected	41	None	replace
127	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary.length  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  secondary.length  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  secondary.length  }  );	  super(new    double[]    {    main    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	52	None	replace
128	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary.length);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  secondary.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  secondary.length);	  super(new    double[]    {    main    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	52	None	replace
129	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  primary,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
130	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  second,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
131	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
132	[BUG]  [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  Double[]  {  main,  secondary,  splitTolerance!=  0);	  Super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	47	None	replace
133	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  squaredSecondary);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  squaredSecondary);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
134	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );	  super(new    Double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	7	None	replace
135	[BUG]  [BUGGY]  super(secondary,  splitTolerance.length);  [CE]  ';'  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(secondary,  splitTolerance.length);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(secondary,  splitTolerance.length);	  super(splitTolerance,    main.length);    	non-compiled	[CE]  ';'  expected	13	None	replace
136	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  squaredSecondary,  splitTolerance  }  );	  super(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	14	None	replace
137	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  primary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1  },  primary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1  },  primary);	  super(new    ArrayRealVector[0],    new    double[]    {    1    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	23	None	replace
138	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  secondary);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  0  },  secondary);	  super(new    ArrayRealVector[]    {    new    double[]    {    0    }    );    	non-compiled	[CE]  ';'  expected	58	None	replace
139	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  new  double[]  {  0  },  splitTolerance);	  super(new    ArrayRealVector[]    {    new    double[]    {    0    }    );    	non-compiled	[CE]  ';'  expected	58	None	replace
140	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	18	None	replace
141	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(primary);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(primary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  realEigenvalues.get(primary);	  this.imagEigenvalues    =    realEigenvalues.get(splitTolerance);    	non-compiled	[CE]  ';'  expected	2	None	replace
142	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(manyTolerance);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(manyTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  realEigenvalues.get(manyTolerance);	  this.imagEigenvalues    =    realEigenvalues.get(splitTolerance);    	non-compiled	[CE]  ';'  expected	2	None	replace
143	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  0,  splitTolerance!=  0);	  super(new    Double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	55	None	replace
144	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  secondary  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  secondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  secondary  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
145	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  primary  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  primary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  primary  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
146	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance  },  secondary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance  },  secondary);	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
147	[BUG]  [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  double[]  {  main,  secondary,  splitTolerance!=  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  double[]  {  main,  secondary,  splitTolerance!=  0);	  Super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	39	None	replace
148	[BUG]  [BUGGY]  super(new  double[]  {  main  },  second,  splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  second,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  second,  splitTolerance);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
149	[BUG]  [BUGGY]  super(new  double[]  {  main  },  primary,  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  primary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  primary,  splitTolerance);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
150	[BUG]  [BUGGY]  this(new  double[]  {  main  },  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main  },  second,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main  },  second,  splitTolerance  }  );	  this(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	36	None	replace
151	[BUG]  [BUGGY]  super(new  double[]  {  primary  },  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  primary  },  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  primary  },  secondary,  splitTolerance  }  );	  super(new    double[]    {    main    },    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	34	None	replace
152	[BUG]  [BUGGY]  super(new  double[]  {  main,  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  second,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  second,  splitTolerance  }  );	  super(new    double[]    {    main,    secondary,    final    double    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	64	None	replace
153	[BUG]  [BUGGY]  super(main,  primary);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  primary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  primary);	  super(splitTolerance,    primary);    	non-compiled	[CE]  ';'  expected	12	None	replace
154	[BUG]  [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(minTolerance);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  realEigenvalues.get(minTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  realEigenvalues.get(minTolerance);	  this.imagEigenvalues    =    realEigenvalues.get(secondary);    	non-compiled	[CE]  ';'  expected	44	None	replace
155	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  squaredSecondary  },  imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  squaredSecondary  },  imagEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  squaredSecondary  },  imagEigenvalues);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
156	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  ==  0);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  splitTolerance  ==  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  splitTolerance  ==  0);	  super(new    double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	37	None	replace
157	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  splitTolerance,  0,  0  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    0    }    );    	non-compiled	[CE]  ';'  expected	19	None	replace
158	[BUG]  [BUGGY]  super(new  double[]  {  splitTolerance  },  secondary);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  splitTolerance  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  splitTolerance  },  secondary);	  super(new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	63	None	replace
159	[BUG]  [BUGGY]  super(Main.length,  splitTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(Main.length,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(Main.length,  splitTolerance);	  super(main,    splitTolerance);    	non-compiled	[CE]  ';'  expected	53	None	replace
160	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  ==  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  splitTolerance  ==  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  splitTolerance  ==  0);	  super(new    Double[]    {    main,    secondary,    splitTolerance!=    0);    	non-compiled	[CE]  ';'  expected	45	None	replace
161	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1,  secondary  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    1,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	24	None	replace
162	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	ArrayRealVector[]  realEigenvalues  =  new  ArrayRealVector[size()  -  1];	  ArrayRealVector[]    realEigenvalues    =    new    ArrayRealVector[size()    ];    	non-compiled	[CE]  ';'  expected	62	None	replace
163	[BUG]  [BUGGY]  super(main,  0);  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(main,  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(main,  0);	  super(splitTolerance,    0);    	non-compiled	[CE]  ';'  expected	60	None	replace
164	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary,  0,  splitTolerance);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  secondary,  0,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  secondary,  0,  splitTolerance);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
165	[BUG]  [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance,  imagEigenvalues);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  secondary,  splitTolerance,  imagEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  secondary,  splitTolerance,  imagEigenvalues);	  super(new    double[]    {    main    },    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	57	None	replace
166	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  second  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  second  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  splitTolerance,  second  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	42	None	replace
167	[BUG]  [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  Double[]  {  main,  secondary,  splitTolerance,  squaredSecondary  }  );	  Super(new    Double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	47	None	replace
168	[BUG]  [BUGGY]  super(new  double[]  {  main.clone()  },  splitTolerance);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.clone()  },  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.clone()  },  splitTolerance);	  super(new    double[]    {    main    },    splitTolerance);    	non-compiled	[CE]  ';'  expected	52	None	replace
169	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
170	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance.clone()  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary,  0,  splitTolerance.clone()  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary,  0,  splitTolerance.clone()  }  );	  super(new    double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	16	None	replace
171	[BUG]  [BUGGY]  super(new  Double[]  {  main  },  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main  },  secondary,  0,  splitTolerance  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main  },  secondary,  0,  splitTolerance  }  );	  super(new    Double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	43	None	replace
172	[BUG]  [BUGGY]  super(splitTolerance,  3);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  3);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  3);	  super(splitTolerance,    2);    	non-compiled	[CE]  ';'  expected	59	None	replace
173	[BUG]  [BUGGY]  super(new  double[]  {  main  },  second,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main  },  second,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main  },  second,  secondary,  splitTolerance  }  );	  super(new    double[]    {    main    },    second,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	35	None	replace
174	[BUG]  [BUGGY]  super(new  double[]  {  main.length  },  second,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.length  },  second,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.length  },  second,  splitTolerance  }  );	  super(new    double[]    {    main    },    second,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	35	None	replace
175	[BUG]  [BUGGY]  super(new  Double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  primary,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  primary,  secondary,  splitTolerance  }  );	  super(new    Double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	9	None	replace
176	[BUG]  [BUGGY]  this(new  double[]  {  main  },  secondary,  final  double  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main  },  secondary,  final  double  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main  },  secondary,  final  double  splitTolerance  }  );	  this(new    double[]    {    main    },    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	36	None	replace
177	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  1,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    imagEigenvalues    }    );    	non-compiled	[CE]  ';'  expected	17	None	replace
178	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  ==  0);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance  ==  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  0,  splitTolerance  ==  0);	  this(new    double[]    {    main,    secondary,    splitTolerance    ==    0);    	non-compiled	[CE]  ';'  expected	51	None	replace
179	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  0,  splitTolerance!=  0);	  this(new    double[]    {    main,    secondary,    splitTolerance    ==    0);    	non-compiled	[CE]  ';'  expected	51	None	replace
180	[BUG]  [BUGGY]  this(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    main,    secondary    }    );    	non-compiled	[CE]  ';'  expected	31	None	replace
181	[BUG]  [BUGGY]  this(main,  secondary,  splitTolerance,  realEigenvalues);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(main,  secondary,  splitTolerance,  realEigenvalues);  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(main,  secondary,  splitTolerance,  realEigenvalues);	  this(main,    secondary,    splitTolerance);    	non-compiled	[CE]  ';'  expected	20	None	replace
182	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  pingPong,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  pingPong,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  pingPong,  splitTolerance  }  );	  this(new    double[]    {    main,    secondary,    splitTolerance,    pingPong    }    );    	non-compiled	[CE]  ';'  expected	18	None	replace
183	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  primary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  primary,  splitTolerance  }  );	  super(new    ArrayRealVector[]    {    main    }    );    	non-compiled	[CE]  ';'  expected	30	None	replace
184	[BUG]  [BUGGY]  super(strTolerance);  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(strTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(strTolerance);	  super(main);    	non-compiled	[CE]  ';'  expected	10	None	replace
185	[BUG]  [BUGGY]  super(splitTolerance.clone());  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance.clone());  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance.clone());	  super(main);    	non-compiled	[CE]  ';'  expected	10	None	replace
186	[BUG]  [BUGGY]  super(splitTolerance,  main);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(splitTolerance,  main);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(splitTolerance,  main);	  super(main);    	non-compiled	[CE]  ';'  expected	10	None	replace
187	[BUG]  [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  sigmaLow  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  sigmaLow  }  );  [BUGGY]      this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[]  {  main,  secondary,  splitTolerance,  sigmaLow  }  );	  super(new    ArrayRealVector[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	61	None	replace
188	[BUG]  [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  primary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  ArrayRealVector[0],  new  double[]  {  1,  primary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  ArrayRealVector[0],  new  double[]  {  1,  primary,  splitTolerance  }  );	  super(new    ArrayRealVector[0],    new    double[]    {    1,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	24	None	replace
189	[BUG]  [BUGGY]  super(secondary,  splitTolerance);  [CE]  ';'  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(secondary,  splitTolerance);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(secondary,  splitTolerance);	  super(splitTolerance,    primary);    	non-compiled	[CE]  ';'  expected	12	None	replace
190	[BUG]  [BUGGY]  this(new  double[]  {  primary,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  primary,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  primary,  secondary,  splitTolerance  }  );	  this(new    double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	50	None	replace
191	[BUG]  [BUGGY]  Super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  Super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	Super(new  double[]  {  main,  secondary,  0,  splitTolerance  }  );	  Super(new    double[]    {    main,    secondary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	39	None	replace
192	[BUG]  [BUGGY]  super(new  double[]  {  primary,  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  primary,  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  primary,  secondary,  splitTolerance  }  );	  super(new    double[]    {    main,    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	38	None	replace
193	[BUG]  [BUGGY]  super(new  double[]  {  primary.length,  splitTolerance  }  );  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  primary.length,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  primary.length,  splitTolerance  }  );	  super(new    double[]    {    main.length    }    );    	non-compiled	[CE]  ';'  expected	6	None	replace
194	[BUG]  [BUGGY]  super(new  double[]  {  splitTolerance,  secondary  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  splitTolerance,  secondary  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  splitTolerance,  secondary  }  );	  super(new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	63	None	replace
195	[BUG]  [BUGGY]  super(new  double[]  {  sigmaLow  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  sigmaLow  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  sigmaLow  }  );	  super(new    double[]    {    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	63	None	replace
196	[BUG]  [BUGGY]  super(new  double[]  {  main.clone()  },  secondary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.clone()  },  secondary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.clone()  },  secondary);	  super(new    double[]    {    main    },    secondary);    	non-compiled	[CE]  ';'  expected	5	None	replace
197	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance,  imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance,  imagEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary  },  splitTolerance,  imagEigenvalues);	  super(new    double[]    {    main,    secondary    },    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	33	None	replace
198	[BUG]  [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance,  1  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main,  secondary  },  splitTolerance,  1  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main,  secondary  },  splitTolerance,  1  }  );	  super(new    double[]    {    main,    secondary    },    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	33	None	replace
199	[BUG]  [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues  },  imagEigenvalues);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this(new  double[]  {  main,  secondary,  imagEigenvalues  },  imagEigenvalues);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this(new  double[]  {  main,  secondary,  imagEigenvalues  },  imagEigenvalues);	  this(new    double[]    {    main,    secondary,    splitTolerance    },    imagEigenvalues);    	non-compiled	[CE]  ';'  expected	54	None	replace
200	[BUG]  [BUGGY]  super(new  double[]  {  main.clone()  },  secondary,  splitTolerance  }  );  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  double[]  {  main.clone()  },  secondary,  splitTolerance  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  double[]  {  main.clone()  },  secondary,  splitTolerance  }  );	  super(new    double[]    {    main    },    primary,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	34	None	replace
201	[BUG]  [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(primary);  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  this.imagEigenvalues  =  eigenvectors.get(primary);  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	this.imagEigenvalues  =  eigenvectors.get(primary);	  this.imagEigenvalues    =    eigenvectors.get(main);    	non-compiled	[CE]  ';'  expected	1	None	replace
202	[BUG]  [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      public  EigenDecompositionImpl(final  double[]  main,  double[]  secondary,  final  double  splitTolerance)  throws  InvalidMatrixException  {      [BUGGY]  super(new  Double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );  [BUGGY]      this.main=  main.clone();  this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	193	193	1	replace	super(new  Double[]  {  main,  secondary,  0,  splitTolerance,  imagEigenvalues  }  );	  super(new    Double[]    {    main,    secondary,    0,    splitTolerance    }    );    	non-compiled	[CE]  ';'  expected	55	None	replace
