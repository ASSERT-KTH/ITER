bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[quaredSecondary.length]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[quaredSecondary.length]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[quaredSecondary.length]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  Transformer[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  Transformer[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	Transformer[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
5	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  new  ArrayRealVector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
6	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
7	[BUG]  [BUGGY]  squaredSecondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  squaredSecondary  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	squaredSecondary  =  squaredSecondary.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
8	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
9	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  realEigenvalues.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  realEigenvalues.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  realEigenvalues.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
10	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  *  splitTolerance;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  *  splitTolerance;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary[i]  *  splitTolerance;	  this.splitTolerance    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
11	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  -  splitTolerance;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  -  splitTolerance;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary[i]  -  splitTolerance;	  this.splitTolerance    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
12	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  +  splitTolerance;  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  +  splitTolerance;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary[i]  +  splitTolerance;	  this.splitTolerance    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary.length  -  1;	  this.splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary.length  +  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary.length  +  1;	  this.splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
15	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary.length  -  2;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary.length  -  2;	  this.splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary.length  *  splitTolerance;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary.length  *  splitTolerance;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary.length  *  splitTolerance;	  this.splitTolerance    =    splitTolerance    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  -  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  -  1;	  this.splitTolerance    =    splitTolerance    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
18	[BUG]  [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  +  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  splitTolerance  *  squaredSecondary.length  +  1;	  this.splitTolerance    =    splitTolerance    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  double  splitTolerance  =  squaredSecondary.length  -  1;  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double  splitTolerance  =  squaredSecondary.length  -  1;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double  splitTolerance  =  squaredSecondary.length  -  1;	      double    splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
20	[BUG]  [BUGGY]  double  splitTolerance  =  squaredSecondary.length  +  1;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double  splitTolerance  =  squaredSecondary.length  +  1;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double  splitTolerance  =  squaredSecondary.length  +  1;	      double    splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
21	[BUG]  [BUGGY]  double  splitTolerance  =  squaredSecondary.length  -  2;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double  splitTolerance  =  squaredSecondary.length  -  2;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double  splitTolerance  =  squaredSecondary.length  -  2;	      double    splitTolerance    =    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
22	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  RealEigenvector[realEigenvalues.length];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  RealEigenvector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  RealEigenvector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.size()  ];  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.size()  ];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.size()  ];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
24	[BUG]  [BUGGY]  Double[]  splitTolerance  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  Double[]  splitTolerance  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	Double[]  splitTolerance  =  squaredSecondary.clone();	      double[]    splitTolerance    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  double[]  splitTolerance  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double[]  splitTolerance  =  squaredSecondary.toArray();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double[]  splitTolerance  =  squaredSecondary.toArray();	      double[]    splitTolerance    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
27	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[squaredSecondary.length]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[0];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[0];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[0];	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[size()  ];  [CE]  ';'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[size()  ];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[size()  ];	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[1];  [CE]  ';'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[1];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[1];	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  +  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	10	None	replace
33	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length  +  1];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length  +  1];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quadSecondary.length  +  1];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	10	None	replace
34	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quaredSecondary.length];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quaredSecondary.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[quaredSecondary.length];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	10	None	replace
35	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(realEigenvalues);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
36	[BUG]  [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
37	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[squaredSecondary.length];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[squaredSecondary.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[squaredSecondary.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
38	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[imagEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[imagEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[imagEigenvalues.length];  squaredSecondary  =  squaredSecondary.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[squaredSecondary.length];  squaredSecondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[squaredSecondary.length];  squaredSecondary  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[squaredSecondary.length];  squaredSecondary  =  squaredSecondary.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  double[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
41	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[0]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
42	[BUG]  [BUGGY]  double[]  splitTolerance  =  squaredSecondary.length;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double[]  splitTolerance  =  squaredSecondary.length;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double[]  splitTolerance  =  squaredSecondary.length;	      double[]    splitTolerance    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	4	None	replace
43	[BUG]  [BUGGY]  double[]  splitTolerance  =  squaredSecondary.trim();  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double[]  splitTolerance  =  squaredSecondary.trim();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double[]  splitTolerance  =  squaredSecondary.trim();	      double[]    splitTolerance    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	4	None	replace
44	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[2];	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
45	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary  *  splitTolerance.length;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary  *  splitTolerance.length;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary  *  splitTolerance.length;	  this.splitTolerance    =    splitTolerance    *    squaredSecondary.length;    	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  -  1;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary[i]  -  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary[i]  -  1;	  this.splitTolerance    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary  +  splitTolerance;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary  +  splitTolerance;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary  +  splitTolerance;	  this.splitTolerance    =    squaredSecondary;    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();  transformer  =  null;  [CE]  ';'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();  transformer  =  null;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray();  transformer  =  null;	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	5	None	replace
49	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  new  ArrayRealVector[squaredSecondary.length  *  2];	      ArrayRealVector[]    eigenvectors    =    new    ArrayRealVector[squaredSecondary.length];    	non-compiled	[CE]  ';'  expected	10	None	replace
50	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  null;  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  null;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray();  transformer  =  null;	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
51	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  transformer  =  null;  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  transformer  =  null;  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[realEigenvalues.size()  ]);  transformer  =  null;	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    	non-compiled	[CE]  ';'  expected	3	None	replace
52	[BUG]  [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  realEigenvalues  =  squaredSecondary.toArray(new  ArrayRealVector[0]);	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary[i].doubleValue();  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary[i].doubleValue();  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary[i].doubleValue();	  this.splitTolerance    =    squaredSecondary[i];    	non-compiled	[CE]  ';'  expected	9	None	replace
54	[BUG]  [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	ArrayRealVector[]  eigenvectors  =  squaredSecondary.toArray(new  ArrayRealVector[size()  ]);	      ArrayRealVector[]    eigenvectors    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
55	[BUG]  [BUGGY]  this.splitTolerance  =  squaredSecondary  +  1;  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.splitTolerance  =  squaredSecondary  +  1;  [BUGGY]    decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.splitTolerance  =  squaredSecondary  +  1;	  this.splitTolerance    =    squaredSecondary;    	non-compiled	[CE]  ';'  expected	6	None	replace
56	[BUG]  [BUGGY]  this.imagEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.imagEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.imagEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  this.realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  this.realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	this.realEigenvalues  =  squaredSecondary.clone();  transformer  =  new  ArrayRealVector[realEigenvalues.length];	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    new    ArrayRealVector[realEigenvalues.length];    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  squaredSecondary.clone();  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    this.secondary  =  secondary.clone();  transformer=  null;  squaredSecondary  =  new  double[secondary.length];  for  (int  i  =  0;  i  <  squaredSecondary.length;  ++i)  {  final  double  s  =  secondary[i];  squaredSecondary[i]  =  s  *  s;  }    [BUGGY]  double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  squaredSecondary.clone();  [BUGGY]    this.splitTolerance  =  splitTolerance;  decompose();  }  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  EigenDecompositionImpl(double[],double[],double)  final  double[]  main  double[]  secondary  final  double  splitTolerance  [VARIABLES]  boolean  double[]  imagEigenvalues  main  realEigenvalues  secondary  squaredSecondary  work  ArrayRealVector[]  eigenvectors  RealMatrix  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  dMin  dMin1  dMin2  dN  dN1  dN2  eMin  g  lowerSpectra  minPivot  qMax  s  sigma  sigmaLow  splitTolerance  tau  upperSpectra  int  i  pingPong  tType  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.7071067811865475	204	204	1	replace	double[]  realEigenvalues  =  squaredSecondary.clone();  transformer  =  null;  squaredSecondary  =  squaredSecondary.clone();	      ArrayRealVector[]    realEigenvalues    =    squaredSecondary.clone();    transformer    =    null;    squaredSecondary    =    squaredSecondary.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
