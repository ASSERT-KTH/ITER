bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  np  =  Math.min(tType,  s);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  np  =  Math.min(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  np  =  Math.min(tType,  s);	      double    np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
2	[BUG]  [BUGGY]  double  np  =  Math.max(tType,  dN2);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  np  =  Math.max(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  np  =  Math.max(tType,  dN2);	      double    np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
3	[BUG]  [BUGGY]  double  np  =  Math.max(tType,  s);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  np  =  Math.max(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  np  =  Math.max(tType,  s);	      double    np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  np  =  Math.min(tType,  s);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  np  =  Math.min(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	np  =  Math.min(tType,  s);	      np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
5	[BUG]  [BUGGY]  np  =  Math.max(tType,  s);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  np  =  Math.max(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	np  =  Math.max(tType,  s);	      np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
6	[BUG]  [BUGGY]  np  =  Math.max(tType,  dN2);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  np  =  Math.max(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	np  =  Math.max(tType,  dN2);	      np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
7	[BUG]  [BUGGY]  tType  =  -1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  -1;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  -1;	      tType    =    -tType;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  tType  =  -s;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  -s;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  -s;	      tType    =    -tType;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  double  pingPong  =  Math.max(tType,  s);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(tType,  s);	      double    pingPong    =    Math.min(tType,    s);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
10	[BUG]  [BUGGY]  double  pingPong  =  Math.min(tType,  s  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.min(tType,  s  +  1);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.min(tType,  s  +  1);	      double    pingPong    =    Math.min(tType,    s);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  double  pingPong  =  Math.max(s,  tType);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(s,  tType);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(s,  tType);	      double    pingPong    =    Math.min(tType,    s);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  int  pingPong  =  Math.min(tType,  s);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.min(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.min(tType,  s);	      int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
13	[BUG]  [BUGGY]  int  pingPong  =  Math.max(tType,  s);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.max(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.max(tType,  s);	      int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
14	[BUG]  [BUGGY]  float  pingPong  =  Math.min(tType,  dN2);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  float  pingPong  =  Math.min(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	float  pingPong  =  Math.min(tType,  dN2);	      int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
15	[BUG]  [BUGGY]  final  double  np  =  np  -  2  *  dMin;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  double  np  =  np  -  2  *  dMin;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  np  =  np  -  2  *  dMin;	  final    int    np    =    np    -    2    *    dMin;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
16	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  dMin  +  1;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  2  *  dMin  +  1;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  dMin  +  1;	  final    int    np    =    np    -    2    *    dMin;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
17	[BUG]  [BUGGY]  tType  =  0;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0;	      tType    =    -5;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  tType  =  2;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  2;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  2;	      tType    =    -5;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  tType  =  s;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  s;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  s;	      tType    =    -5;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  double  pingPong  =  Math.pow(10,  s);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.pow(10,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.pow(10,  s);	      double    pingPong    =    Math.pow(10,    tType);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  double  pingPong  =  Math.pow(10,  dMin);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.pow(10,  dMin);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.pow(10,  dMin);	      double    pingPong    =    Math.pow(10,    tType);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  double  pingPong  =  Math.pow(10,  tType  -  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.pow(10,  tType  -  1);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.pow(10,  tType  -  1);	      double    pingPong    =    Math.pow(10,    tType);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
23	[BUG]  [BUGGY]  double  pingPong  =  Math.pow(10,  dN2);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.pow(10,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.pow(10,  dN2);	      double    pingPong    =    Math.pow(10,    tType);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
24	[BUG]  [BUGGY]  double  pingPong  =  Math.max(tType,  dN2);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(tType,  dN2);	      double    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  double  pingPong  =  Math.max(tType,  dMin);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(tType,  dMin);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(tType,  dMin);	      double    pingPong    =    Math.min(tType,    dMin);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  tType  =  0.5  *  s;  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.5  *  s;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.5  *  s;	      tType    =    0.5    *    dMin;    	non-compiled	[CE]  '.class'  expected	2	None	replace
27	[BUG]  [BUGGY]  tType  =  0.5  *  dMin  +  1;  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.5  *  dMin  +  1;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.5  *  dMin  +  1;	      tType    =    0.5    *    dMin;    	non-compiled	[CE]  '.class'  expected	2	None	replace
28	[BUG]  [BUGGY]  tType  =  0.5  *  dN2;  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.5  *  dN2;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.5  *  dN2;	      tType    =    0.5    *    dMin;    	non-compiled	[CE]  '.class'  expected	2	None	replace
29	[BUG]  [BUGGY]  final  double  np  =  np  -  2  *  s;  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  double  np  =  np  -  2  *  s;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  np  =  np  -  2  *  s;	  final    int    np    =    np    -    2    *    s;    	non-compiled	[CE]  '.class'  expected	6	None	replace
30	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  s  +  1;  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  2  *  s  +  1;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  s  +  1;	  final    int    np    =    np    -    2    *    s;    	non-compiled	[CE]  '.class'  expected	6	None	replace
31	[BUG]  [BUGGY]  final  int  np  =  np  -  6  *  s;  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  6  *  s;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  6  *  s;	  final    int    np    =    np    -    2    *    s;    	non-compiled	[CE]  '.class'  expected	6	None	replace
32	[BUG]  [BUGGY]  final  double  np  =  np  -  2  *  tType;  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  double  np  =  np  -  2  *  tType;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  np  =  np  -  2  *  tType;	  final    int    np    =    np    -    2    *    tType;    	non-compiled	[CE]  '.class'  expected	8	None	replace
33	[BUG]  [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  s  +  1));  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  s  +  1));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.max(tType,  Math.min(tType,  s  +  1));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    s));    	non-compiled	[CE]  '.class'  expected	3	None	replace
34	[BUG]  [BUGGY]  float  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  float  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	float  pingPong  =  Math.max(tType,  Math.min(tType,  s));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    s));    	non-compiled	[CE]  '.class'  expected	3	None	replace
35	[BUG]  [BUGGY]  double  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(tType,  Math.min(tType,  s));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(tType,  Math.min(tType,  s));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    s));    	non-compiled	[CE]  '.class'  expected	3	None	replace
36	[BUG]  [BUGGY]  final  double  np  =  np  -  2  *  dN2;  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  double  np  =  np  -  2  *  dN2;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  np  =  np  -  2  *  dN2;	  final    int    np    =    np    -    2    *    dN2;    	non-compiled	[CE]  '.class'  expected	9	None	replace
37	[BUG]  [BUGGY]  final  int  np  =  np  -  2  *  dN2  +  1;  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  2  *  dN2  +  1;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  2  *  dN2  +  1;	  final    int    np    =    np    -    2    *    dN2;    	non-compiled	[CE]  '.class'  expected	9	None	replace
38	[BUG]  [BUGGY]  final  int  np  =  np  -  6  *  dN2;  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  6  *  dN2;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  6  *  dN2;	  final    int    np    =    np    -    2    *    dN2;    	non-compiled	[CE]  '.class'  expected	9	None	replace
39	[BUG]  [BUGGY]  final  int  pingPong  =  Math.min(tType,  s);  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  pingPong  =  Math.min(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  pingPong  =  Math.min(tType,  s);	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  '.class'  expected	11	None	replace
40	[BUG]  [BUGGY]  final  int  pingPong  =  Math.max(tType,  s);  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  pingPong  =  Math.max(tType,  s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  pingPong  =  Math.max(tType,  s);	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  '.class'  expected	11	None	replace
41	[BUG]  [BUGGY]  final  int  pingPong  =  Math.max(tType,  dN2);  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  pingPong  =  Math.max(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  pingPong  =  Math.max(tType,  dN2);	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  '.class'  expected	11	None	replace
42	[BUG]  [BUGGY]  float  pingPong  =  Math.min(tType,  dMin);  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  float  pingPong  =  Math.min(tType,  dMin);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	float  pingPong  =  Math.min(tType,  dMin);	      int    pingPong    =    Math.min(tType,    dMin);    	non-compiled	[CE]  '.class'  expected	19	None	replace
43	[BUG]  [BUGGY]  float  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [CE]  '.class'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  float  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	float  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    dMin));    	non-compiled	[CE]  '.class'  expected	5	None	replace
44	[BUG]  [BUGGY]  double  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [CE]  '.class'  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    dMin));    	non-compiled	[CE]  '.class'  expected	5	None	replace
45	[BUG]  [BUGGY]  char  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [CE]  '.class'  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  char  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	char  pingPong  =  Math.max(tType,  Math.min(tType,  dMin));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    dMin));    	non-compiled	[CE]  '.class'  expected	5	None	replace
46	[BUG]  [BUGGY]  final  int  np  =  np  -  6  *  tType;  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  6  *  tType;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  6  *  tType;	  final    int    np    =    np    -    2    *    tType;    	non-compiled	[CE]  '.class'  expected	8	None	replace
47	[BUG]  [BUGGY]  tType  =  0.0;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.0;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.0;	      tType    =    -5;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
48	[BUG]  [BUGGY]  tType  =  0.5;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.5;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.5;	      tType    =    -5;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  final  int  np  =  np  -  6  *  dMin;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  np  =  np  -  6  *  dMin;  [BUGGY]    double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  np  =  np  -  6  *  dMin;	  final    int    np    =    np    -    2    *    dMin;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
50	[BUG]  [BUGGY]  final  int  pingPong  =  Math.min(tType,  dN2)-  1;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  int  pingPong  =  Math.min(tType,  dN2)-  1;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  int  pingPong  =  Math.min(tType,  dN2)-  1;	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
51	[BUG]  [BUGGY]  tType  =  -tType  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  -tType  +  1;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  -tType  +  1;	      tType    =    -tType;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(s,  dMin));  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(s,  dMin));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.max(tType,  Math.min(s,  dMin));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    dMin));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  double  np  =  Math.min(tType,  dMin);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  np  =  Math.min(tType,  dMin);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  np  =  Math.min(tType,  dMin);	      double    np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  ']'  expected	16	None	replace
54	[BUG]  [BUGGY]  double  pingPong  =  Math.min(s,  tType);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  pingPong  =  Math.min(s,  tType);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  pingPong  =  Math.min(s,  tType);	      double    pingPong    =    Math.min(tType,    s);    	non-compiled	[CE]  ']'  expected	13	None	replace
55	[BUG]  [BUGGY]  tType  =  0.5  *  dMin  +  2;  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  0.5  *  dMin  +  2;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  0.5  *  dMin  +  2;	      tType    =    0.5    *    dMin;    	non-compiled	[CE]  ']'  expected	2	None	replace
56	[BUG]  [BUGGY]  double  np  =  Math.min(tType,  dN1);  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  double  np  =  Math.min(tType,  dN1);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	double  np  =  Math.min(tType,  dN1);	      double    np    =    Math.min(tType,    dN2);    	non-compiled	[CE]  ']'  expected	16	None	replace
57	[BUG]  [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  dN2));  [CE]  ']'  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  dN2));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.max(tType,  Math.min(tType,  dN2));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    dMin));    	non-compiled	[CE]  ']'  expected	5	None	replace
58	[BUG]  [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  s  *  s));  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  int  pingPong  =  Math.max(tType,  Math.min(tType,  s  *  s));  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	int  pingPong  =  Math.max(tType,  Math.min(tType,  s  *  s));	      int    pingPong    =    Math.max(tType,    Math.min(tType,    s));    	non-compiled	[CE]  ']'  expected	3	None	replace
59	[BUG]  [BUGGY]  tType  =  1.0;  [CE]  ']'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  1.0;  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  1.0;	      tType    =    -5;    	non-compiled	[CE]  ']'  expected	1	None	replace
60	[BUG]  [BUGGY]  tType  =  -tType.increment(s);  [CE]  ']'  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  tType  =  -tType.increment(s);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	tType  =  -tType.increment(s);	      tType    =    -tType;    	non-compiled	[CE]  ']'  expected	4	None	replace
61	[BUG]  [BUGGY]  final  double  pingPong  =  Math.min(tType,  dN2);  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  double  pingPong  =  Math.min(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  double  pingPong  =  Math.min(tType,  dN2);	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  ']'  expected	11	None	replace
62	[BUG]  [BUGGY]  final  long  pingPong  =  Math.min(tType,  dN2);  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    tau  =  s;  }  }  else  if  (dMin  ==  dN2)  {  tType  =  -5;  double  s  =  0.25  *  dMin;      [BUGGY]  final  long  pingPong  =  Math.min(tType,  dN2);  [BUGGY]    final  int  np  =  nn  -  2  *  pingPong;  double  b1  =  work[np  -  2];  double  b2  =  work[np  -  6];  final  double  gam  =  dN2;  if  (work[np  -  8]  >  b2  ||  work[np  -  4]  >  b1)  {  return;  }  double  a2  =  (work[np  -  8]  /  b2)  *  (1  +  work[np  -  4]  /  b1);  if  (end  -  start  >  2)  {  [CLASS]  EigenDecompositionImpl  Solver  [METHOD]  computeShiftIncrement  [RETURN_TYPE]  void  final  int  start  final  int  end  final  int  deflated  [VARIABLES]  boolean  double[]  b  bp  imagEigenvalues  invI  main  range  realEigenvalues  secondary  squaredSecondary  vData  vK  work  ArrayRealVector[]  eigenvectors  RealMatrix  b  cachedD  cachedV  cachedVt  matrix  double  TOLERANCE  TOLERANCE_2  a2  absDCurrent  absDPrevious  absoluteTolerance  alpha  b  b1  b2  beta  c  cnst1  cnst2  cnst3  d  dCurrent  dMin  dMin1  dMin2  dN  dN1  dN2  delta  determinant  di  diagMax  diagMin  e12  eCurrent  eMax  eMin  ePrevious  ei  eiM1  eps  g  gam  gap1  gap2  invIJ  lambda  largestRoot  left  lower  lowerSpectra  margin  max  middle  mij  minPivot  mji  offDiagMax  offDiagMin  oldB1  oneFourth  p  previousEMin  q  q0  q1  q1q2Me22  q2  qMax  r  radius  range  ratio  relativeTolerance  right  s  sigma  sigmaLow  splitTolerance  sqrtMq  sumOffDiag  t  tNorm  tau  theta  threeFourth  tmp  upper  upperSpectra  z0  z1  z2  int  begin  columns  count  deflated  deflatedEnd  end  fourI  i  i0  i4  index  j  j4  j4p2  k  l  lowerStart  m  maxIter  n  n0  nColB  nn  np  oneFourthCount  pingPong  rows  split  start  step  tType  threeFourthCount  upperStart  TriDiagonalTransformer  transformer  	projects/Math81/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java	0.5773502691896258	1533	1533	1	replace	final  long  pingPong  =  Math.min(tType,  dN2);	      final    int    pingPong    =    Math.min(tType,    dN2);    	non-compiled	[CE]  ']'  expected	11	None	replace
