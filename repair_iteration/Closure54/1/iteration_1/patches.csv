bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
2	[BUG]  [BUGGY]  return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode,  inferred);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode,  inferred);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode,  inferred);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
3	[BUG]  [BUGGY]  return  objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
4	[BUG]  [BUGGY]  return  objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
5	[BUG]  [BUGGY]  return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
6	[BUG]  [BUGGY]  return  objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
7	[BUG]  [BUGGY]  return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
8	[BUG]  [BUGGY]  return  false;  return  false;  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  return  false;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    return  false;	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
9	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [CE]  unreachable  statement  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
10	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
11	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
12	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(propertyNode))  {  return  false;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
13	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [CE]  unreachable  statement  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
14	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
15	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred))  {  return  false;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
16	[BUG]  [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  [CE]  cannot  find  symbol  parent  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent.defineProperty(name,  type,  inferred,  propertyNode);	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
17	[BUG]  [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  true;  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  true;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  true;	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  not  a  statement	7	None	replace
19	[BUG]  [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;  [CE]  not  a  statement  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  not  a  statement	7	None	replace
21	[BUG]  [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  [CE]  cannot  find  symbol  parent  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
22	[BUG]  [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isPrototype()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
24	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
25	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
26	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
27	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
28	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
29	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
30	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isEquivalentTo(prototype))  {  return  false;  }	  timeout    	compilable	timeout	4	1	add
31	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isEquivalentTo(prototype))  {  return  false;  }	  timeout    	compilable	timeout	4	1	add
32	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEQUIvalentTo(prototype))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEQUIvalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isEQUIvalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	4	None	add
33	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isEquivalentTo(propertyNode))  {  return  false;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	4	None	add
34	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(prototype))  {  return  false;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isEquivalentTo(prototype))  {  return  false;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isEquivalentTo(prototype))  {  return  false;	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
35	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  If(objType.isEquivalentTo(prototype))  {  return  false;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  If(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    If(objType.isEquivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
36	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	13	None	replace
37	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	13	None	replace
38	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	13	None	replace
39	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode,  inferred)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	13	None	replace
40	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
41	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
42	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
43	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  type);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  type);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  type);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
44	[BUG]  [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType  ==  null)?  false  :  objType.isEquivalentTo(type,  propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
45	[BUG]  [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode,  inferred);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
46	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype,  propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype,  propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
47	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }	  return    false;    timeout    	compilable	timeout	2	1	replace
48	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }	  return    false;    timeout    	compilable	timeout	2	1	replace
49	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  }	  return    false;    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	2	None	replace
50	[BUG]  [BUGGY]  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      this.setPrototypeBasedOn(objType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	        this.setPrototypeBasedOn(objType);	  timeout    	compilable	timeout	11	1	add
51	[BUG]  [BUGGY]      this.setPrototypeBasedOn(objType);  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      this.setPrototypeBasedOn(objType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        this.setPrototypeBasedOn(objType);	  timeout    	compilable	timeout	11	1	add
52	[BUG]  [BUGGY]  timeout  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	        if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  true;  }	  timeout    	compilable	timeout	11	1	add
53	[BUG]  [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  true;  }  timeout  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  true;  }	  timeout    	compilable	timeout	11	1	add
54	[BUG]  [BUGGY]      return  super.defineProperty(name,  type,  inferred,  propertyNode);  [CE]  unreachable  statement  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      return  super.defineProperty(name,  type,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        return  super.defineProperty(name,  type,  inferred,  propertyNode);	  timeout    	non-compiled	[CE]  unreachable  statement	11	None	add
55	[BUG]  [BUGGY]      this.setPrototypeBasedOn(objType);  return  true;  [CE]  unreachable  statement  [FE]                            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      this.setPrototypeBasedOn(objType);  return  true;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        this.setPrototypeBasedOn(objType);  return  true;	  timeout    	non-compiled	[CE]  unreachable  statement	11	None	add
56	[BUG]  [BUGGY]      if(objType.isEquivalentTo(propertyNode))  {  this.setPrototypeBasedOn(objType);  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      if(objType.isEquivalentTo(propertyNode))  {  this.setPrototypeBasedOn(objType);  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        if(objType.isEquivalentTo(propertyNode))  {  this.setPrototypeBasedOn(objType);  return  true;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	11	None	add
57	[BUG]  [BUGGY]  timeout  [FE]                                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	        if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  false;  }	  timeout    	compilable	timeout	11	1	add
58	[BUG]  [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  false;  }  timeout  [FE]                                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        if(objType.isEquivalentTo(prototype))  {  this.setPrototypeBasedOn(objType);  return  false;  }	  timeout    	compilable	timeout	11	1	add
59	[BUG]  [BUGGY]      return  defineProperty(name,  objType,  inferred,  propertyNode);  [CE]  unreachable  statement  [FE]                                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      return  defineProperty(name,  objType,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        return  defineProperty(name,  objType,  inferred,  propertyNode);	  timeout    	non-compiled	[CE]  unreachable  statement	11	None	add
60	[BUG]  [BUGGY]      ObjectType  baseType  =  objType.getBaseType();  this.setPrototypeBasedOn(baseType);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      ObjectType  baseType  =  objType.getBaseType();  this.setPrototypeBasedOn(baseType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        ObjectType  baseType  =  objType.getBaseType();  this.setPrototypeBasedOn(baseType);	  timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	add
61	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
62	[BUG]  [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
63	[BUG]  [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isPrototype()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
64	[BUG]  [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  false;  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  false;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent!=  null  &&  objType.isEquivalentTo(propertyNode))  {  return  false;	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	5	None	replace
65	[BUG]  [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	5	None	replace
66	[BUG]  [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  not  a  statement	5	None	replace
67	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
68	[BUG]  [BUGGY]  return(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
69	[BUG]  [BUGGY]  return(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
70	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
71	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
72	[BUG]  [BUGGY]  return(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
73	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
74	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(prototype))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
75	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  type.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
76	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
77	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
78	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
79	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
80	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
81	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
82	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
83	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
84	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
85	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
86	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  type.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	14	None	replace
87	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)&&  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	14	None	replace
88	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	14	None	replace
89	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	14	None	replace
90	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	10	None	replace
91	[BUG]  [BUGGY]  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(!objType.isEquivalentTo(prototype))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	compilable	timeout	10	1	replace
92	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  true;  }  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(prototype))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	compilable	timeout	10	1	replace
93	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(type,  propertyNode))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	10	None	replace
94	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(name,  propertyNode))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	10	None	replace
95	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
96	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
97	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
98	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
99	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype,  propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
100	[BUG]  [BUGGY]  timeout  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(type))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	compilable	timeout	3	1	replace
101	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type))  {  return  false;  }  timeout  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	compilable	timeout	3	1	replace
102	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.isEquivalentTo(prototype))  {  return  true;  }	  timeout    	compilable	timeout	6	1	add
103	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEquivalentTo(prototype))  {  return  true;  }  timeout  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.isEquivalentTo(prototype))  {  return  true;  }	  timeout    	compilable	timeout	6	1	add
104	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEQUIvalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEQUIvalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.isEQUIvalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
105	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEquivalentTo(prototype))  {  return  true;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isEquivalentTo(prototype))  {  return  true;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.isEquivalentTo(prototype))  {  return  true;	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
106	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  If(objType.isEquivalentTo(prototype))  {  return  true;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  If(objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    If(objType.isEquivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  ';'  expected	6	None	add
107	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(ObjType.isEquivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  ObjType  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(ObjType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(ObjType.isEquivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  ObjType	6	None	add
108	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(type,  propertyNode))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	9	None	replace
109	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode,  inferred))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	9	None	replace
110	[BUG]  [BUGGY]  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(!objType.isEquivalentTo(prototype))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	compilable	timeout	9	1	replace
111	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(prototype))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	compilable	timeout	9	1	replace
112	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(name,  propertyNode))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	9	None	replace
113	[BUG]  [BUGGY]  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  super.defineProperty(name,  objType,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	return  super.defineProperty(name,  objType,  inferred,  propertyNode);	      timeout    	compilable	timeout	12	1	replace
114	[BUG]  [BUGGY]  return  super.defineProperty(name,  objType,  inferred,  propertyNode);  timeout  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  super.defineProperty(name,  objType,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  super.defineProperty(name,  objType,  inferred,  propertyNode);	      timeout    	compilable	timeout	12	1	replace
115	[BUG]  [BUGGY]  objType  =  objType.getPrototype();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.getPrototype();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	objType  =  objType.getPrototype();	      timeout    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
116	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  false;  }	  return    false;    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	2	None	replace
117	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(baseType)||  objType.isEquivalentTo(baseType))  {  return  false;  }  [CE]  cannot  find  symbol  baseType  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(baseType)||  objType.isEquivalentTo(baseType))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(baseType)||  objType.isEquivalentTo(baseType))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  baseType	1	None	add
118	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(objectType))  {  return  false;  }  [CE]  cannot  find  symbol  objectType  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(objectType))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(objectType))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  objectType	1	None	add
119	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isequivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.isequivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.isequivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
120	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.getEquivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.getEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.getEquivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
121	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
122	[BUG]  [BUGGY]  if(objType.isEquivalentTo(value))  {  return  false;  }  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(value))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(value))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  value	3	None	replace
123	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isequivalentTo(prototype))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.isequivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.isequivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	4	None	add
124	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.getEquivalentTo(prototype))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.getEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.getEquivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	4	None	add
125	[BUG]  [BUGGY]  if(objType!=  null  &&!objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  &&!objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType!=  null  &&!objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	9	None	replace
126	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType!=  null  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
127	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType!=  null  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
128	[BUG]  [BUGGY]  if(objType.isInterface()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isInterface()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isInterface()  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	5	None	replace
129	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isInterface()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isInterface()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
130	[BUG]  [BUGGY]  if(objType.isInterface()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isInterface()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isInterface()  ||  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
131	[BUG]  [BUGGY]  if(objType!=  null  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType!=  null  ||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	5	None	replace
132	[BUG]  [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType  ==  null)?  false  :  objType.isEquivalentTo(name,  propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
133	[BUG]  [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(name);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(name);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType  ==  null)?  false  :  objType.isEquivalentTo(name);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
134	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	16	None	replace
135	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode));	  return(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode));    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	19	None	replace
136	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	compilable	timeout	7	1	replace
137	[BUG]  [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }  timeout  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isConstructor()  ||  objType.isEquivalentTo(prototype))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	compilable	timeout	7	1	replace
138	[BUG]  [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isConstructor()  ||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	7	None	replace
139	[BUG]  [BUGGY]  parent.defineProperty(name,  objType,  inferred,  propertyNode);  [CE]  cannot  find  symbol  parent  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent.defineProperty(name,  objType,  inferred,  propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent.defineProperty(name,  objType,  inferred,  propertyNode);	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
140	[BUG]  [BUGGY]  if(objType.isPrototype())  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isPrototype())  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isPrototype())  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
141	[BUG]  [BUGGY]  if(objType.isEquivalentTo(name))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(name))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(name))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
142	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(type))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	compilable	timeout	8	1	replace
143	[BUG]  [BUGGY]  if(objType.isEquivalentTo(type))  {  return  true;  }  timeout  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(type))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	compilable	timeout	8	1	replace
144	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  inferred)  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)&&  inferred)  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)&&  inferred)  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
145	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(inferred,  propertyNode))  {  return  false;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	15	None	replace
146	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||!inferred)  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||!inferred)  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||!inferred)  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	10	None	replace
147	[BUG]  [BUGGY]      this.setPrototypeBasedOn(objType);  return  false;  [CE]  unreachable  statement  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]      this.setPrototypeBasedOn(objType);  return  false;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	        this.setPrototypeBasedOn(objType);  return  false;	  timeout    	non-compiled	[CE]  unreachable  statement	11	None	add
148	[BUG]  [BUGGY]  return  type.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  type.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  type.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
149	[BUG]  [BUGGY]  return  objType.isEquivalentTo(type,  propertyNode)||  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  objType.isEquivalentTo(type,  propertyNode)||  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(type,  propertyNode)||  objType.isEquivalentTo(propertyNode);	  return    objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	18	None	replace
150	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode,  type))  {  return  false;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	9	None	replace
151	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.equals(propertyNode))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
152	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  true;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	8	None	replace
153	[BUG]  [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;  }  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent!=  null  &&  objType.isEquivalentTo(prototype))  {  return  true;  }	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  not  a  statement	7	None	replace
154	[BUG]  [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  return  true;  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  return  true;  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent.defineProperty(name,  type,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  return  true;	  if(objType.isEquivalentTo(prototype))    {    return    true;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
155	[BUG]  [BUGGY]  objType  =  objType.restrictByNotNullOrUndefined();  [CE]  incompatible  types  [FE]                      ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.restrictByNotNullOrUndefined();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	objType  =  objType.restrictByNotNullOrUndefined();	      timeout    	non-compiled	[CE]  incompatible  types	12	None	replace
156	[BUG]  [BUGGY]  timeout  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.toObjectType();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	objType  =  objType.toObjectType();	      timeout    	compilable	timeout	12	1	replace
157	[BUG]  [BUGGY]  objType  =  objType.toObjectType();  timeout  [FE]                        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.toObjectType();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	objType  =  objType.toObjectType();	      timeout    	compilable	timeout	12	1	replace
158	[BUG]  [BUGGY]  timeout  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.getImplicitPrototype();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	objType  =  objType.getImplicitPrototype();	      timeout    	compilable	timeout	12	1	replace
159	[BUG]  [BUGGY]  objType  =  objType.getImplicitPrototype();  timeout  [FE]                          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  objType  =  objType.getImplicitPrototype();  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	objType  =  objType.getImplicitPrototype();	      timeout    	compilable	timeout	12	1	replace
160	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
161	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  else  {  this.setPrototypeBasedOn(objType);  return  true;  }	  timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	add
162	[BUG]  [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(prototype))  {  return  false;  }  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return  false;  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return    false;    if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  unreachable  statement	1	None	add
163	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(!objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode,  type))  {  return  true;  }	  if(!objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	10	None	replace
164	[BUG]  [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType  ==  null)?  false  :  objType.isEquivalentTo(propertyNode);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
165	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  objType);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  objType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode,  objType);	  return(objType!=    null)?    false    :    objType.isEquivalentTo(propertyNode);    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	17	None	replace
166	[BUG]  [BUGGY]  return(objType!=  null  &&  objType.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null  &&  objType.isEquivalentTo(propertyNode));  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null  &&  objType.isEquivalentTo(propertyNode));	  return    false;    timeout    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	2	None	replace
167	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype);	  return    false;    timeout    	compilable	timeout	2	1	replace
168	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype);  timeout  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(prototype);	  return    false;    timeout    	compilable	timeout	2	1	replace
169	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(type))  {  return  false;  }	  if(objType.isEquivalentTo(propertyNode))    {    return    false;    }    	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	3	None	replace
170	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(valueNode))  {  return  true;  }  [CE]  cannot  find  symbol  valueNode  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(valueNode))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(valueNode))  {  return  true;  }	  if(objType.isEquivalentTo(prototype)||    objType.isEquivalentTo(propertyNode))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  valueNode	16	None	replace
171	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.equivalentTo(prototype))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  if(objType.equivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    false;    }    if(objType.equivalentTo(prototype))  {  return  false;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	4	None	add
172	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.equivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.equivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.equivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
173	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.hasEquivalentTo(prototype))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  if(objType.hasEquivalentTo(prototype))  {  return  true;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))    {    return    true;    }    if(objType.hasEquivalentTo(prototype))  {  return  true;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	add
174	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
175	[BUG]  [BUGGY]  if(objType!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]            ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  if(objType!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType!=  null  &&  objType.isEquivalentTo(prototype))  {  return  false;  }	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	compilable	timeout	5	1	replace
176	[BUG]  [BUGGY]  parent.defineProperty(name,  objType,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  [CE]  cannot  find  symbol  parent  [FE]              ComparisonFailure    [CONTEXT]    boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  (   "prototype   ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {    [BUGGY]  parent.defineProperty(name,  objType,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);  [BUGGY]    }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	parent.defineProperty(name,  objType,  inferred,  propertyNode);  this.setPrototypeBasedOn(objType);	  if(objType.isEquivalentTo(prototype))    {    return    false;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
