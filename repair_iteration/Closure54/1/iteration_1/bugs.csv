bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  return  false;  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	return  false;	return  true;  	compilable	timeout	1	1	replace
2	[BUG]  [BUGGY]  return  false;  timeout  [FE]    ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  return  false;  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  false;	return  true;  	compilable	timeout	1	1	replace
3	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode))  {  return  false;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
4	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(prototype))  {  return  false;  }	return  true;  	compilable	timeout	1	1	replace
5	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  timeout  [FE]        ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))  {  return  false;  }	return  true;  	compilable	timeout	1	1	replace
6	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	if(objType.isEquivalentTo(prototype))  {  return  true;  }	return  true;  	compilable	timeout	1	1	replace
7	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  timeout  [FE]          ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype))  {  return  true;  }	return  true;  	compilable	timeout	1	1	replace
8	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode))  {  return  true;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
9	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(!objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode))  {  return  false;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
10	[BUG]  [BUGGY]  if(!objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(!objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(!objType.isEquivalentTo(propertyNode))  {  return  true;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
11	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]    [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	add	  	return  true;  	compilable	timeout	1	1	replace
12	[BUG]  [BUGGY]    timeout  [FE]                  ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]    [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	  	return  true;  	compilable	timeout	1	1	replace
13	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
14	[BUG]  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(propertyNode)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
15	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  false;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
16	[BUG]  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	if(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode))  {  return  true;  }	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
17	[BUG]  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode);  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType!=  null)?  false  :  objType.isEquivalentTo(propertyNode);	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
18	[BUG]  [BUGGY]  return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return  objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode);	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
19	[BUG]  [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode));  [CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  boolean  defineProperty(String  name,  JSType  type,  boolean  inferred,  Node  propertyNode)  {  if  ( "prototype ".equals(name))  {  ObjectType  objType  =  type.toObjectType();  if  (objType  !=  null)  {  if  (objType.isEquivalentTo(prototype))  {  [BUGGY]  return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode));  [BUGGY]  }  this.setPrototypeBasedOn(objType);  return  true;  }  else  {  return  false;  }  }  return  super.defineProperty(name,  type,  inferred,  propertyNode);  }  [CLASS]  FunctionType  Kind  [METHOD]  defineProperty  [RETURN_TYPE]  boolean  String  name  JSType  type  boolean  inferred  Node  propertyNode  [VARIABLES]  ObjectType  baseType  instance  interfaceType  objType  type  typeOfThis  JSType  type  boolean  inferred  Kind  CONSTRUCTOR  INTERFACE  ORDINARY  kind  Node  lastParam  n  params  propertyNode  source  thisTypeNode  ArrowType  arrowType  call  PrototypeObjectType  prototype  List  extendedInterfaces  implementedInterfaces  subTypes  String  name  templateTypeName  SimpleSlot  prototypeSlot  long  serialVersionUID  	projects/Closure54/src/com/google/javascript/rhino/jstype/FunctionType.java	0.3849001794597505	556	556	3	replace	return(objType.isEquivalentTo(prototype)||  objType.isEquivalentTo(propertyNode));	return  true;  	non-compiled	[CE]  method  isEquivalentTo  in  class  JSType  cannot  be  applied  to  given  types;	1	None	replace
