bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IOException("request to write '" + numToWrite   + "' bytes exceeds size in header of '"     + currSize + "' bytes for entry '" [FE] IOException [CONTEXT] public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { [BUGGY] throw new IOException("request to write '" + numToWrite         + "' bytes exceeds size in header of '"                 + currSize + "' bytes for entry '" [BUGGY] + "' bytes exceeds size in header of '" + currSize + "' bytes for entry '" + currName + "'");        [CLASS] TarArchiveOutputStream [METHOD] write [RETURN_TYPE] void  byte[] wBuf int wOffset int numToWrite [VARIABLES] byte[] assemBuf recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen assemLen bigNumberMode blockSize i longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	387	389	1	replace	
2	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { [BUGGY] [BUGGY] throw new IOException("request to write '" + numToWrite         + "' bytes exceeds size in header of '"                 + currSize + "' bytes for entry '" + "' bytes exceeds size in header of '" + currSize + "' bytes for entry '" + currName + "'");        [CLASS] TarArchiveOutputStream [METHOD] write [RETURN_TYPE] void  byte[] wBuf int wOffset int numToWrite [VARIABLES] byte[] assemBuf recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen assemLen bigNumberMode blockSize i longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	387	389	1	add	
3	[BUG] [BUGGY] paxHeaders.put("path", entryName); [FE] IOException [CONTEXT] } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); } else if (bigNumberMode != BIGNUMBER_STAR) { failForBigNumbers(entry); } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { [BUGGY] paxHeaders.put("path", entryName); [BUGGY] } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { paxHeaders.put("linkpath", entry.getLinkName()); } if (paxHeaders.size() > 0) { writePaxHeaders(entryName, paxHeaders); [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	
4	[BUG] [BUGGY] [FE] IOException [CONTEXT] } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); } else if (bigNumberMode != BIGNUMBER_STAR) { failForBigNumbers(entry); } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { [BUGGY] [BUGGY] paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { paxHeaders.put("linkpath", entry.getLinkName()); } if (paxHeaders.size() > 0) { writePaxHeaders(entryName, paxHeaders); [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	add	
5	[BUG] [BUGGY] addPaxHeadersForNonAsciiNames = b; [FE] IOException [CONTEXT] public void setAddPaxHeadersForNonAsciiNames(boolean b) { [BUGGY] addPaxHeadersForNonAsciiNames = b; [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] setAddPaxHeadersForNonAsciiNames [RETURN_TYPE] void  boolean b [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	185	185	1	replace	
6	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void setAddPaxHeadersForNonAsciiNames(boolean b) { [BUGGY] [BUGGY] addPaxHeadersForNonAsciiNames = b; } [CLASS] TarArchiveOutputStream [METHOD] setAddPaxHeadersForNonAsciiNames [RETURN_TYPE] void  boolean b [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	185	185	1	add	
7	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public void setAddPaxHeadersForNonAsciiNames(boolean b) { addPaxHeadersForNonAsciiNames = b; [BUGGY] } [BUGGY]  [CLASS] TarArchiveOutputStream [METHOD] setAddPaxHeadersForNonAsciiNames [RETURN_TYPE] void  boolean b [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	186	186	1	replace	
8	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void setAddPaxHeadersForNonAsciiNames(boolean b) { addPaxHeadersForNonAsciiNames = b; [BUGGY] [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] setAddPaxHeadersForNonAsciiNames [RETURN_TYPE] void  boolean b [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	186	186	1	add	
9	[BUG] [BUGGY] currSize = 0; [FE] IOException [CONTEXT] writePaxHeaders(entryName, paxHeaders); } entry.writeEntryHeader(recordBuf, encoding, bigNumberMode == BIGNUMBER_STAR); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) { [BUGGY] currSize = 0; [BUGGY] } else { currSize = entry.getSize(); } currName = entryName; haveUnclosedEntry = true; } [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	
10	[BUG] [BUGGY] [FE] IOException [CONTEXT] writePaxHeaders(entryName, paxHeaders); } entry.writeEntryHeader(recordBuf, encoding, bigNumberMode == BIGNUMBER_STAR); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) { [BUGGY] [BUGGY] currSize = 0; } else { currSize = entry.getSize(); } currName = entryName; haveUnclosedEntry = true; } [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	add	
11	[BUG] [BUGGY] writePaxHeaders(entryName, paxHeaders); [FE] IOException [CONTEXT] paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { paxHeaders.put("linkpath", entry.getLinkName()); } if (paxHeaders.size() > 0) { [BUGGY] writePaxHeaders(entryName, paxHeaders); [BUGGY] } entry.writeEntryHeader(recordBuf, encoding, bigNumberMode == BIGNUMBER_STAR); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) { currSize = 0; [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	
12	[BUG] [BUGGY] [FE] IOException [CONTEXT] paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { paxHeaders.put("linkpath", entry.getLinkName()); } if (paxHeaders.size() > 0) { [BUGGY] [BUGGY] writePaxHeaders(entryName, paxHeaders); } entry.writeEntryHeader(recordBuf, encoding, bigNumberMode == BIGNUMBER_STAR); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) { currSize = 0; [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	add	
13	[BUG] [BUGGY] len = actualLength; [FE] IOException [CONTEXT] + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      [BUGGY] len = actualLength; [BUGGY] line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	replace	
14	[BUG] [BUGGY] [FE] IOException [CONTEXT] + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      [BUGGY] [BUGGY] len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	480	480	1	add	
15	[BUG] [BUGGY] line = len + " " + key + "=" + value + "\n"; [FE] IOException [CONTEXT] + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; [BUGGY] line = len + " " + key + "=" + value + "\n"; [BUGGY] actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	
16	[BUG] [BUGGY] [FE] IOException [CONTEXT] + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; [BUGGY] [BUGGY] line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	add	
17	[BUG] [BUGGY] actualLength = line.getBytes(CharsetNames.UTF_8).length; [FE] IOException [CONTEXT] String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; [BUGGY] actualLength = line.getBytes(CharsetNames.UTF_8).length; [BUGGY] } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	
18	[BUG] [BUGGY] [FE] IOException [CONTEXT] String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; [BUGGY] [BUGGY] actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	add	
19	[BUG] [BUGGY] this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os) { [BUGGY] this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream os [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode longFileMode long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	94	94	1	replace	
20	[BUG] [BUGGY] [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os) { [BUGGY] [BUGGY] this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream os [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode longFileMode long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	94	94	1	add	
21	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os) { this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] } [BUGGY]  [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream os [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode longFileMode long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	95	95	1	replace	
22	[BUG] [BUGGY] [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os) { this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); [BUGGY] [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream)  OutputStream os [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode longFileMode long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	95	95	1	add	
23	[BUG] [BUGGY] this(os, blockSize, recordSize, null); [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { [BUGGY] this(os, blockSize, recordSize, null); [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,int,int)  OutputStream os int blockSize int recordSize [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	135	135	1	replace	
24	[BUG] [BUGGY] [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { [BUGGY] [BUGGY] this(os, blockSize, recordSize, null); } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,int,int)  OutputStream os int blockSize int recordSize [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	135	135	1	add	
25	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { this(os, blockSize, recordSize, null); [BUGGY] } [BUGGY]  [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,int,int)  OutputStream os int blockSize int recordSize [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	136	136	1	replace	
26	[BUG] [BUGGY] [FE] IOException [CONTEXT] public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { this(os, blockSize, recordSize, null); [BUGGY] [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] <init> [RETURN_TYPE] OutputStream,int,int)  OutputStream os int blockSize int recordSize [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames closed finished haveUnclosedEntry ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode recordSize long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	136	136	1	add	
27	[BUG] [BUGGY] String name = "./PaxHeaders.X/" + stripTo7Bits(entryName); [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { [BUGGY] String name = "./PaxHeaders.X/" + stripTo7Bits(entryName); [BUGGY]   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	456	456	1	replace	
28	[BUG] [BUGGY] [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { [BUGGY] [BUGGY] String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	456	456	1	add	
29	[BUG] [BUGGY] if (name.length() >= TarConstants.NAMELEN) { [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   [BUGGY] if (name.length() >= TarConstants.NAMELEN) { [BUGGY] name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	
30	[BUG] [BUGGY] [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   [BUGGY] [BUGGY] if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	add	
31	[BUG] [BUGGY] TarArchiveEntry pex = new TarArchiveEntry(name,    TarConstants.LF_PAX_EXTENDED_HEADER_LC); [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } [BUGGY] TarArchiveEntry pex = new TarArchiveEntry(name,             TarConstants.LF_PAX_EXTENDED_HEADER_LC); [BUGGY] TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	replace	
32	[BUG] [BUGGY] [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } [BUGGY] [BUGGY] TarArchiveEntry pex = new TarArchiveEntry(name,             TarConstants.LF_PAX_EXTENDED_HEADER_LC); TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	462	463	1	add	
33	[BUG] [BUGGY] StringWriter w = new StringWriter(); [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); [BUGGY] StringWriter w = new StringWriter(); [BUGGY] for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {  [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	465	465	1	replace	
34	[BUG] [BUGGY] [FE] IOException [CONTEXT] Map<String, String> headers) throws IOException { String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); [BUGGY] [BUGGY] StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {  [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	465	465	1	add	
35	[BUG] [BUGGY] for (Map.Entry<String, String> h : headers.entrySet()) { [FE] IOException [CONTEXT] String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); [BUGGY] for (Map.Entry<String, String> h : headers.entrySet()) { [BUGGY] String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {   [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	
36	[BUG] [BUGGY] [FE] IOException [CONTEXT] String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); [BUGGY] [BUGGY] for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {   [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	add	
37	[BUG] [BUGGY] String key = h.getKey(); [FE] IOException [CONTEXT]   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { [BUGGY] String key = h.getKey(); [BUGGY] String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {    [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	467	467	1	replace	
38	[BUG] [BUGGY] [FE] IOException [CONTEXT]   if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { [BUGGY] [BUGGY] String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {    [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	467	467	1	add	
39	[BUG] [BUGGY] String value = h.getValue(); [FE] IOException [CONTEXT]  if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); [BUGGY] String value = h.getValue(); [BUGGY] int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {     [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	468	468	1	replace	
40	[BUG] [BUGGY] [FE] IOException [CONTEXT]  if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); [BUGGY] [BUGGY] String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {     [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	468	468	1	add	
41	[BUG] [BUGGY] int len = key.length() + value.length() + 3 /* blank, equals and newline */  + 2 /* guess 9 < actual length < 100 */; [FE] IOException [CONTEXT] if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); [BUGGY] int len = key.length() + value.length()    + 3 /* blank, equals and newline */        + 2 /* guess 9 < actual length < 100 */; [BUGGY] + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	replace	
42	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (name.length() >= TarConstants.NAMELEN) { name = name.substring(0, TarConstants.NAMELEN - 1); } TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); [BUGGY] [BUGGY] int len = key.length() + value.length()    + 3 /* blank, equals and newline */        + 2 /* guess 9 < actual length < 100 */; + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	469	471	1	add	
43	[BUG] [BUGGY] String line = len + " " + key + "=" + value + "\n"; [FE] IOException [CONTEXT] TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; [BUGGY] String line = len + " " + key + "=" + value + "\n"; [BUGGY] int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	
44	[BUG] [BUGGY] [FE] IOException [CONTEXT] TarArchiveEntry pex = new TarArchiveEntry(name, TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; [BUGGY] [BUGGY] String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	add	
45	[BUG] [BUGGY] int actualLength = line.getBytes(CharsetNames.UTF_8).length; [FE] IOException [CONTEXT] TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; [BUGGY] int actualLength = line.getBytes(CharsetNames.UTF_8).length; [BUGGY] while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	
46	[BUG] [BUGGY] [FE] IOException [CONTEXT] TarConstants.LF_PAX_EXTENDED_HEADER_LC); StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; [BUGGY] [BUGGY] int actualLength = line.getBytes(CharsetNames.UTF_8).length; while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	add	
47	[BUG] [BUGGY] while (len != actualLength) { [FE] IOException [CONTEXT] StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; [BUGGY] while (len != actualLength) { [BUGGY]      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	
48	[BUG] [BUGGY] [FE] IOException [CONTEXT] StringWriter w = new StringWriter(); for (Map.Entry<String, String> h : headers.entrySet()) { String key = h.getKey(); String value = h.getValue(); int len = key.length() + value.length() + 3 /* blank, equals and newline */ + 2 /* guess 9 < actual length < 100 */; String line = len + " " + key + "=" + value + "\n"; int actualLength = line.getBytes(CharsetNames.UTF_8).length; [BUGGY] [BUGGY] while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	add	
49	[BUG] [BUGGY] w.write(line); [FE] IOException [CONTEXT] while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } [BUGGY] w.write(line); [BUGGY] } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	replace	
50	[BUG] [BUGGY] [FE] IOException [CONTEXT] while (len != actualLength) {      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } [BUGGY] [BUGGY] w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	484	484	1	add	
51	[BUG] [BUGGY] } [FE] IOException [CONTEXT]      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); [BUGGY] } [BUGGY] byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	485	485	1	replace	
52	[BUG] [BUGGY] [FE] IOException [CONTEXT]      len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); [BUGGY] [BUGGY] } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	485	485	1	add	
53	[BUG] [BUGGY] byte[] data = w.toString().getBytes(CharsetNames.UTF_8); [FE] IOException [CONTEXT]     len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } [BUGGY] byte[] data = w.toString().getBytes(CharsetNames.UTF_8); [BUGGY] pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	486	486	1	replace	
54	[BUG] [BUGGY] [FE] IOException [CONTEXT]     len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } [BUGGY] [BUGGY] byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	486	486	1	add	
55	[BUG] [BUGGY] pex.setSize(data.length); [FE] IOException [CONTEXT]    len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); [BUGGY] pex.setSize(data.length); [BUGGY] putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	487	487	1	replace	
56	[BUG] [BUGGY] [FE] IOException [CONTEXT]    len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); [BUGGY] [BUGGY] pex.setSize(data.length); putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	487	487	1	add	
57	[BUG] [BUGGY] putArchiveEntry(pex); [FE] IOException [CONTEXT]   len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); [BUGGY] putArchiveEntry(pex); [BUGGY] write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	488	488	1	replace	
58	[BUG] [BUGGY] [FE] IOException [CONTEXT]   len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); [BUGGY] [BUGGY] putArchiveEntry(pex); write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	488	488	1	add	
59	[BUG] [BUGGY] write(data); [FE] IOException [CONTEXT]  len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); [BUGGY] write(data); [BUGGY] closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	489	489	1	replace	
60	[BUG] [BUGGY] [FE] IOException [CONTEXT]  len = actualLength; line = len + " " + key + "=" + value + "\n"; actualLength = line.getBytes(CharsetNames.UTF_8).length; } w.write(line); } byte[] data = w.toString().getBytes(CharsetNames.UTF_8); pex.setSize(data.length); putArchiveEntry(pex); [BUGGY] [BUGGY] write(data); closeArchiveEntry(); } [CLASS] TarArchiveOutputStream [METHOD] writePaxHeaders [RETURN_TYPE] void  String entryName String> headers [VARIABLES] byte[] assemBuf data recordBuf wBuf Entry h boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding StringWriter w OutputStream os out TarBuffer buffer String currName encoding entryName key line name value Map headers int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize TarArchiveEntry pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	489	489	1	add	
61	[BUG] [BUGGY] final int length = name.length(); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { [BUGGY] final int length = name.length(); [BUGGY] StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	494	494	1	replace	
62	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { [BUGGY] [BUGGY] final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	494	494	1	add	
63	[BUG] [BUGGY] StringBuffer result = new StringBuffer(length); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); [BUGGY] StringBuffer result = new StringBuffer(length); [BUGGY] for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	495	495	1	replace	
64	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); [BUGGY] [BUGGY] StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	495	495	1	add	
65	[BUG] [BUGGY] for (int i = 0; i < length; i++) { [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); [BUGGY] for (int i = 0; i < length; i++) { [BUGGY] char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	496	496	1	replace	
66	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); [BUGGY] [BUGGY] for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	496	496	1	add	
67	[BUG] [BUGGY] char stripped = (char) (name.charAt(i) & 0x7F); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { [BUGGY] char stripped = (char) (name.charAt(i) & 0x7F); [BUGGY] if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	497	497	1	replace	
68	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { [BUGGY] [BUGGY] char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	497	497	1	add	
69	[BUG] [BUGGY] if (stripped != 0) { // would be read as Trailing null result.append(stripped); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); [BUGGY] if (stripped != 0) { // would be read as Trailing null    result.append(stripped); [BUGGY] result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	498	499	1	replace	
70	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); [BUGGY] [BUGGY] if (stripped != 0) { // would be read as Trailing null    result.append(stripped); result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	498	499	1	add	
71	[BUG] [BUGGY] result.append(stripped); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null [BUGGY] result.append(stripped); [BUGGY] } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	499	499	1	replace	
72	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null [BUGGY] [BUGGY] result.append(stripped); } } return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	499	499	1	add	
73	[BUG] [BUGGY] return result.toString(); [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } [BUGGY] return result.toString(); [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	502	502	1	replace	
74	[BUG] [BUGGY] [FE] IOException [CONTEXT] private String stripTo7Bits(String name) { final int length = name.length(); StringBuffer result = new StringBuffer(length); for (int i = 0; i < length; i++) { char stripped = (char) (name.charAt(i) & 0x7F); if (stripped != 0) { // would be read as Trailing null result.append(stripped); } } [BUGGY] [BUGGY] return result.toString(); } [CLASS] TarArchiveOutputStream [METHOD] stripTo7Bits [RETURN_TYPE] String  String name [VARIABLES] byte[] assemBuf data recordBuf wBuf StringBuffer result boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer char stripped String currName encoding entryName key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	502	502	1	add	
75	[BUG] [BUGGY] failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); [BUGGY] failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); [BUGGY] failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	566	566	1	replace	
76	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); [BUGGY] [BUGGY] failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	566	566	1	add	
77	[BUG] [BUGGY] failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); [BUGGY] failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); [BUGGY] failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	567	567	1	replace	
78	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); [BUGGY] [BUGGY] failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	567	567	1	add	
79	[BUG] [BUGGY] failForBigNumber("major device number", entry.getDevMajor(),  TarConstants.MAXID); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); [BUGGY] failForBigNumber("major device number", entry.getDevMajor(),       TarConstants.MAXID); [BUGGY] TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	568	569	1	replace	
80	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); [BUGGY] [BUGGY] failForBigNumber("major device number", entry.getDevMajor(),       TarConstants.MAXID); TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	568	569	1	add	
81	[BUG] [BUGGY] failForBigNumber("minor device number", entry.getDevMinor(),  TarConstants.MAXID); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); [BUGGY] failForBigNumber("minor device number", entry.getDevMinor(),       TarConstants.MAXID); [BUGGY] TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	570	571	1	replace	
82	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); [BUGGY] [BUGGY] failForBigNumber("minor device number", entry.getDevMinor(),       TarConstants.MAXID); TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	570	571	1	add	
83	[BUG] [BUGGY] } [FE] IOException [CONTEXT] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); [BUGGY] } [BUGGY]  [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	572	572	1	replace	
84	[BUG] [BUGGY] [FE] IOException [CONTEXT] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); [BUGGY] [BUGGY] } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2773500981126146	572	572	1	add	
85	[BUG] [BUGGY] failForBigNumbers(entry); [FE] IOException [CONTEXT] } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException("file name '" + entryName + "' is too long ( > " + TarConstants.NAMELEN + " bytes)"); } } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); } else if (bigNumberMode != BIGNUMBER_STAR) { [BUGGY] failForBigNumbers(entry); [BUGGY] } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	299	299	1	replace	
86	[BUG] [BUGGY] [FE] IOException [CONTEXT] } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException("file name '" + entryName + "' is too long ( > " + TarConstants.NAMELEN + " bytes)"); } } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); } else if (bigNumberMode != BIGNUMBER_STAR) { [BUGGY] [BUGGY] failForBigNumbers(entry); } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) && !ASCII.canEncode(entry.getLinkName())) { [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	299	299	1	add	
87	[BUG] [BUGGY] failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { [BUGGY] failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); [BUGGY] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	561	561	1	replace	
88	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { [BUGGY] [BUGGY] failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	561	561	1	add	
89	[BUG] [BUGGY] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); [BUGGY] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); [BUGGY] failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	562	562	1	replace	
90	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); [BUGGY] [BUGGY] failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); failForBigNumber("last modification time", entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	562	562	1	add	
91	[BUG] [BUGGY] failForBigNumber("last modification time",  entry.getModTime().getTime() / 1000,    TarConstants.MAXSIZE); [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); [BUGGY] failForBigNumber("last modification time",       entry.getModTime().getTime() / 1000,             TarConstants.MAXSIZE); [BUGGY] entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	563	565	1	replace	
92	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumbers(TarArchiveEntry entry) { failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE); failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID); [BUGGY] [BUGGY] failForBigNumber("last modification time",       entry.getModTime().getTime() / 1000,             TarConstants.MAXSIZE); entry.getModTime().getTime() / 1000, TarConstants.MAXSIZE); failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID); failForBigNumber("mode", entry.getMode(), TarConstants.MAXID); failForBigNumber("major device number", entry.getDevMajor(), TarConstants.MAXID); failForBigNumber("minor device number", entry.getDevMinor(), TarConstants.MAXID); } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumbers [RETURN_TYPE] void  TarArchiveEntry entry [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value TarArchiveEntry entry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.2672612419124244	563	565	1	add	
93	[BUG] [BUGGY] } else if (bigNumberMode != BIGNUMBER_STAR) { [FE] IOException [CONTEXT] closeArchiveEntry(); } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException("file name '" + entryName + "' is too long ( > " + TarConstants.NAMELEN + " bytes)"); } } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); [BUGGY] } else if (bigNumberMode != BIGNUMBER_STAR) { [BUGGY] failForBigNumbers(entry); } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	298	298	1	replace	
94	[BUG] [BUGGY] [FE] IOException [CONTEXT] closeArchiveEntry(); } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException("file name '" + entryName + "' is too long ( > " + TarConstants.NAMELEN + " bytes)"); } } if (bigNumberMode == BIGNUMBER_POSIX) { addPaxHeadersForBigNumbers(paxHeaders, entry); [BUGGY] [BUGGY] } else if (bigNumberMode != BIGNUMBER_STAR) { failForBigNumbers(entry); } if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) { paxHeaders.put("path", entryName); } if (addPaxHeadersForNonAsciiNames && (entry.isLink() || entry.isSymbolicLink()) [CLASS] TarArchiveOutputStream [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] byte[] assemBuf recordBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer ArchiveEntry archiveEntry String currName encoding entryName Map paxHeaders ByteBuffer encodedName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE assemLen bigNumberMode blockSize longFileMode nameLen recordSize long currBytes currSize TarArchiveEntry entry longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	298	298	1	add	
95	[BUG] [BUGGY] if ((currBytes + numToWrite) > currSize) { [FE] IOException [CONTEXT] public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { [BUGGY] if ((currBytes + numToWrite) > currSize) { [BUGGY] throw new IOException("request to write '" + numToWrite + "' bytes exceeds size in header of '" + currSize + "' bytes for entry '" + currName + "'");       [CLASS] TarArchiveOutputStream [METHOD] write [RETURN_TYPE] void  byte[] wBuf int wOffset int numToWrite [VARIABLES] byte[] assemBuf recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen assemLen bigNumberMode blockSize i longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	386	386	1	replace	
96	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { [BUGGY] [BUGGY] if ((currBytes + numToWrite) > currSize) { throw new IOException("request to write '" + numToWrite + "' bytes exceeds size in header of '" + currSize + "' bytes for entry '" + currName + "'");       [CLASS] TarArchiveOutputStream [METHOD] write [RETURN_TYPE] void  byte[] wBuf int wOffset int numToWrite [VARIABLES] byte[] assemBuf recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen assemLen bigNumberMode blockSize i longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	386	386	1	add	
97	[BUG] [BUGGY] if (value < 0 || value > maxValue) { [FE] IOException [CONTEXT] private void failForBigNumber(String field, long value, long maxValue) { [BUGGY] if (value < 0 || value > maxValue) { [BUGGY] throw new RuntimeException(field + " '" + value + "' is too big ( > " + maxValue + " )"); } } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumber [RETURN_TYPE] void  String field long value long maxValue [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName field header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	575	575	1	replace	
98	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void failForBigNumber(String field, long value, long maxValue) { [BUGGY] [BUGGY] if (value < 0 || value > maxValue) { throw new RuntimeException(field + " '" + value + "' is too big ( > " + maxValue + " )"); } } [CLASS] TarArchiveOutputStream [METHOD] failForBigNumber [RETURN_TYPE] void  String field long value long maxValue [VARIABLES] byte[] assemBuf data recordBuf wBuf boolean addPaxHeadersForNonAsciiNames b closed finished haveUnclosedEntry paxHeaderContainsPath ZipEncoding ASCII encoding OutputStream os out TarBuffer buffer String currName encoding entryName field header key line name value int BIGNUMBER_ERROR BIGNUMBER_POSIX BIGNUMBER_STAR LONGFILE_ERROR LONGFILE_GNU LONGFILE_POSIX LONGFILE_TRUNCATE aLen actualLength assemLen bigNumberMode blockSize i len length longFileMode nameLen num numToWrite recordSize wOffset long currBytes currSize maxValue value  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.25	575	575	1	add	
