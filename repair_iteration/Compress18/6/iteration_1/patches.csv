bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  readPaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  readPaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry();  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry();  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry();	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  paint.writeRecord(paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  nisipBytes.put(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  nisipBytes.put(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  buffer.writeRecord(paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  recordBuf);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  entryName);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  encoding);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  arrayBuf);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  arrayBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  arrayBuf);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  WritePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  WritePaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
21	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size());	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
22	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders);	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  writePaxHeaders(recordBuf);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(recordBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(recordBuf);	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  writePaxHeaders(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(recordBuf,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(recordBuf,  paxHeaders);	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders.size());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size());	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  currName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
32	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  currName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  currName);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  cachedName);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(arrayBuf,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  entryName);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size());	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  entryName);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  buffer);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  buffer);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  bigNumberMode);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entryName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path ",  entryName);  }  [CE]  illegal  start  of  type  [FE]                                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path ",  entryName);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path ",  entryName);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  currName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  currName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  entryName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  encoding);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  encoding);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  cachedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  cachedName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  entryName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  ||  paxHeaders.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  ||  paxHeaders.size()  >  0)  {  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  >  0)  {	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames);	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
69	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  buffer);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  buffer);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
71	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  encodedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  encodedName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
72	[BUG]  [BUGGY]  writePaxHeaders(array,  entryName);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(array,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  entryName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  encodedName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  encodedName);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  file);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  dataBuffer);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
79	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size()  -  1);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders.size()  -  1);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf,  0);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
81	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
86	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  buffer.writeRecord(recordBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  paxHeaders.put( "path ",  entryName);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  paxHeaders.put( "path ",  entryName);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  paxHeaders.put( "path ",  entryName);  }  else  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf);	  writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
90	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(arrayBuf);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf);	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(path,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
95	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  pendPaxHeaders(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
97	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
100	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
105	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
106	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
107	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
108	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  1))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  1))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  1))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
109	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  if(paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders,  entryName);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders,  entryName);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
112	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders);	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry.getName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry.getName());  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  archiveEntry.getName());	  _writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
115	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  registerPaxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  registerPaxHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  registerPaxHeaders);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
116	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileHeaders);	  writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  Entry  <  K,  V>  entry  =  entry.getValue();  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  entry.getValue();	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
118	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.iterator().next();  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.iterator().next();  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.iterator().next();	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
119	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders.size()  -  1);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size()  -  1);	  writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  file);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeaders(paxHeaders,  fileName);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName);	  writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
122	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    paxHeaders.put(   "path   ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {    [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]    }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
