bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.isEmpty())  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.isEmpty())  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.isEmpty())  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  ||  paxHeaders.size()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  ==  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  ==  0)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
4	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  0)  {  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  0)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
5	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  =  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  =  0)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
6	[BUG]  [BUGGY]  ||  paxHeaders.size()  >=  0)  {  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  >=  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  >=  0)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
7	[BUG]  [BUGGY]  ||  paxHeaders.size()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()!=  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()!=  0)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
8	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  2)  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  2)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  2)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
9	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(0));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
10	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
11	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
12	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(0));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
13	[BUG]  [BUGGY]  hopBuffer.writeRecord(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  hopBuffer.writeRecord(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	hopBuffer.writeRecord(paxHeaders.get(0));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
14	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.size()  -  1);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
15	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()));  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders.size()));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
16	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
17	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  paxHeaders,  buffer);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
18	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
19	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
20	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(buffer,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(buffer,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(buffer,  paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
21	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(assemBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
22	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  currBytes);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
23	[BUG]  [BUGGY]  buffer.writeRecord(assemBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(assemBuf,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(assemBuf,  recordSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
24	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  encoding);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
25	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  assemBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  assemBuf);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
26	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  currName);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
27	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
28	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
29	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
30	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  entryName);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
31	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
32	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
33	[BUG]  [BUGGY]  writePaxHeaders(fileHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(fileHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(fileHeaders,  paxHeaders);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
34	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileHeaders);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
35	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
36	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders.size());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileHeaders.size());	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
37	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  encoding,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  encoding,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  encoding,  entryName);	  writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
38	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  currName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  currName);	  writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
39	[BUG]  [BUGGY]  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    ||    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
40	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(encodedName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(encodedName);	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  +  1);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  +  1);	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaderName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaderName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaderName);	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toLowerCase());  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toLowerCase());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toLowerCase());	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  -  1);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName  -  1);	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName)+  1;  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName)+  1;  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName)+  1;	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  entryName);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  StaxUtil.writePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  StaxUtil.writePaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	StaxUtil.writePaxHeaders(paxHeaders,  entryName);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(entryName,  paxHeaders);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  WritePaxHeaders(array,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(array,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(array,  entryName,  paxHeaders);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  WritePaxHeaders(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(currName,  paxHeaders);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  hopBuffer.writeRecord(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  hopBuffer.writeRecord(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	hopBuffer.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  pendPaths.put(entryName,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaths.put(entryName,  paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaths.put(entryName,  paxHeaders.size()  -  1);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  arrayBuf);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  arrayBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  fileBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  registerPaxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  registerPaxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  registerPaxHeaders);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  anchorBuf);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  anchorBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  anchorBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
59	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  nameLen);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
60	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
61	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  0);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
62	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  paxHeaders,  nameLen);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
63	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen  +  1);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  nameLen  +  1);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
65	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
67	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).encoding);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).encoding);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
70	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
71	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
72	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
74	[BUG]  [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
75	[BUG]  [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBu  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBu  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBu	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
76	[BUG]  [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
77	[BUG]  [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
78	[BUG]  [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.remove(paxHeaders.size()  -  1))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
80	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
81	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
82	[BUG]  [BUGGY]  WritePaxHeaders(arrayBuf,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(arrayBuf,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(arrayBuf,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
83	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  entryName,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  entryName,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  entryName,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
84	[BUG]  [BUGGY]  WritePaxHeaders(array,  paxHeaders,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(array,  paxHeaders,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(array,  paxHeaders,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
85	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  encoding,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  encoding,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  encoding,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
86	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  entryName);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
87	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  updatePaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  updatePaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  updatePaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
88	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  true);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  true);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  true);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
89	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  registerPaxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  registerPaxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  registerPaxHeaders);	  writePaxHeaders(paxHeaders,    registerPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
90	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
91	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
92	[BUG]  [BUGGY]  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
93	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
94	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  fileName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  fileName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  fileName);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
95	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  encoding);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName,  encoding);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
96	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  fileName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  fileName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  fileName);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
97	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  recordSize);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName,  recordSize);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
98	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileName);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
99	[BUG]  [BUGGY]  writePaxHeaders(arrayBuffer,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuffer,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuffer,  paxHeaders);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
100	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  dataBuffer,  bigNumberMode);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
101	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  dataBuffer);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  dataBuffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  dataBuffer);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
102	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  encoding);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  dataBuffer,  encoding);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
103	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  recordBuf);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  recordBuf);	  _writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
104	[BUG]  [BUGGY]  _writePaxHeaders(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(recordBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(recordBuf,  paxHeaders);	  _writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
105	[BUG]  [BUGGY]  _writePaxHeaders(recordBuf);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(recordBuf);	  _writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
107	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
108	[BUG]  [BUGGY]  readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
109	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
110	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
113	[BUG]  [BUGGY]  rewritePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeaders(paxHeaders);	  writePaxHeaders(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
114	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  recordBuf);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  recordBuf);	  writePaxHeaders(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
115	[BUG]  [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
116	[BUG]  [BUGGY]  pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  racks.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  racks.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	racks.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
118	[BUG]  [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowUnclosedEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
119	[BUG]  [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowUnclosedEntry(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  2))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowUnclosedEntry(paxHeaders.size()  -  2))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowUnclosedEntry(paxHeaders.size()  -  2))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
121	[BUG]  [BUGGY]  pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingTargets.add(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
122	[BUG]  [BUGGY]  writePaxHeaders(recordBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(recordBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(recordBuf,  encoding);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
123	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  encoding);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
124	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
125	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  encoding);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
126	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
127	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  cachedName);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
128	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  cachedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  cachedName);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
129	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  cachedName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
130	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  cachedName,  entryName);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
131	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
132	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  paxHeaders,  encodedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
133	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  encodedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  encodedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
134	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fullName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fullName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  fullName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
135	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
136	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
137	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entryName);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
138	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  cachedName);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
139	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entries);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entries);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  entries);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
140	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.size());	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
141	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  currName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
142	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  encoding);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
143	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
144	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
145	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
146	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
147	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
148	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
149	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  mapHeaders.size());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  mapHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  mapHeaders.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
150	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders.size()  +  1);	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
151	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf.size());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  recordBuf.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf.size());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
153	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
154	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
155	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(path,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(path,  entryName);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
156	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
157	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(currName,  paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
158	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
159	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,  currName);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
160	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(0);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(0);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
161	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes();	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
162	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes(entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntryBytes(entryName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
163	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryByName(entryName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryByName(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntryByName(entryName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
164	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryCount();  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntryCount();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntryCount();	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
165	[BUG]  [BUGGY]  writePaxHeaders(file,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(file,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(file,  paxHeaders);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
166	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file,  encoding);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file,  encoding);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
167	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file.length);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file.length);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
168	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file.getName());	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
169	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file,  entryName);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
170	[BUG]  [BUGGY]  writePaxHeaders(array,  file);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  file);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
171	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).iterator().next();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).iterator().next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).iterator().next();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
172	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  1);	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
173	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.entrySet().iterator().next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.entrySet().iterator().next();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
174	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  2);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size()  -  2);	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
175	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.size()  -  1;  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.size()  -  1;	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
176	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.size();  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.size();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.size();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
177	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  encoding,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
178	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
179	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  entryName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
180	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  blockSize);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  blockSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entryName,  blockSize);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
181	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size(),  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size(),  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size(),  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
182	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  currName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
183	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fullName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fullName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fullName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
184	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
185	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size()  +  1);	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
186	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  2);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  2);	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
187	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders.size());	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
188	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size()  -  4);	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
189	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.get(0));	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
190	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders.size()  -  1);	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
191	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  currName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
192	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(array,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(array,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(array,  paxHeaders,  entryName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
193	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
194	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  cachedName,  entryName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
195	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
196	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  currName,  entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  currName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  currName,  entryName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
197	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding,  entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding,  entryName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
198	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(file,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(file,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(file,  paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
199	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
200	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
201	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.length);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file.length);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
202	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  file);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
203	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  path);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  path);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  path);	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
204	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(path,  paxHeaders);	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
205	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileMode);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  fileMode);	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
206	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(path,  paxHeaders.size());	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
207	[BUG]  [BUGGY]  pendPaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(paxHeaders,  entryName);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
208	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  paxHeaders.size());	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
209	[BUG]  [BUGGY]  pendPaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(paxHeaders);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
210	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  currName);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
211	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  paxHeaders.length);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  paxHeaders.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  paxHeaders.length);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
213	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
215	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
216	[BUG]  [BUGGY]  nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
217	[BUG]  [BUGGY]  nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  buffer.writeRecord(paxHeaders.get(i),  entryName);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  buffer.writeRecord(paxHeaders.get(i),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes  =!addPaxHeadersForNonAsciiNames  &&  buffer.writeRecord(paxHeaders.get(i),  entryName);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i),  entryName);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i),  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i),  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
219	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
220	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
221	[BUG]  [BUGGY]  nisipBytes.put(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  currName);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
222	[BUG]  [BUGGY]  nisipBytes.put(encodedName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(encodedName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(encodedName,  paxHeaders);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
223	[BUG]  [BUGGY]  nisipBytes.put(entryName,  currSize);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  currSize);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
224	[BUG]  [BUGGY]  nisipBytes.put(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(encoding,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(encoding,  paxHeaders);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  nisipBytes.put(entryName,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  paxHeaders.size());	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
226	[BUG]  [BUGGY]  nisipBytes.put(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  cachedName);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
227	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
228	[BUG]  [BUGGY]  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
229	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  currName);	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
230	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
231	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
233	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  currName);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
234	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  bigNumberMode);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
235	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders,  entryName);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
236	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  cachedName);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
237	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);	  _writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
238	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf);	  _writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path   ",  entryName);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path   ",  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( "path   ",  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    cachedPaxHeaders.put(   "path   ",    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ".path ",  entryName);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ".path ",  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ".path ",  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    cachedPaxHeaders.put(   "path   ",    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
241	[BUG]  [BUGGY]  cachedPaxHeaders.put( "path   ",  entryName);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  cachedPaxHeaders.put( "path   ",  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	cachedPaxHeaders.put( "path   ",  entryName);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    cachedPaxHeaders.put(   "path   ",    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
242	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
243	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
244	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
245	[BUG]  [BUGGY]  writePaxHeaders(assemBuf,  recordBuf);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(assemBuf,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(assemBuf,  recordBuf);	  writePaxHeaders(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
246	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  assemBuf);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  assemBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  assemBuf);	  writePaxHeaders(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
247	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  assemBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  assemBuf,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  assemBuf,  recordSize);	  writePaxHeaders(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
248	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
249	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  1);	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
250	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  2);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  2);	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
251	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size(),  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size(),  0,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size(),  0,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
252	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  +  1);	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
253	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.length);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.length);	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
254	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  0,  paxHeaders.size()  -  4);	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
255	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
256	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  currName);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
257	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  entryName,  encoding);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
258	[BUG]  [BUGGY]  writePaxHeaders(array,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  entryName,  paxHeaders);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
259	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
260	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  entry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entry.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
261	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders.getName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
262	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entryName.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  entryName.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entryName.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
263	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders.getName());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
264	[BUG]  [BUGGY]  _writePaxHeaders(path,  archiveEntry.getName());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(path,  archiveEntry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(path,  archiveEntry.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
265	[BUG]  [BUGGY]  _writePaxHeaders(entryName,  paxHeaders.getName());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(entryName,  paxHeaders.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(entryName,  paxHeaders.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
266	[BUG]  [BUGGY]  _writePaxHeaders(entry,  paxHeaders.getName());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(entry,  paxHeaders.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(entry,  paxHeaders.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
267	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  cachedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  cachedName);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
268	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  encoding);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  cachedName,  encoding);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
269	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  cachedName);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
270	[BUG]  [BUGGY]  writePaxHeaders(array,  cachedName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  cachedName);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
271	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    <    4)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
272	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  4)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    <    4)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
273	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    <    4)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
274	[BUG]  [BUGGY]  board.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  board.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	board.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
275	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  +  1));  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  +  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders.size()  +  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
276	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0)&&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
277	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0)&&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
278	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0)&&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
279	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size()  +  1);	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
280	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size()  -  2);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size()  -  2);	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
281	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size()  -  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size()  -  4);	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
282	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders.size());	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
283	[BUG]  [BUGGY]  scanPaxHeaders(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(paxHeaders.size()  -  1);	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
284	[BUG]  [BUGGY]  _writePaxHeaders(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(currName,  paxHeaders);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
285	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  currName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  currName);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
286	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  currName,  entryName);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
287	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  currSize);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  currSize);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
288	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  recordSize);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  currName,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  currName,  recordSize);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
289	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    ==    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
290	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    ==    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
291	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    ==    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
292	[BUG]  [BUGGY]  writePaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
293	[BUG]  [BUGGY]  readPaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
294	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
295	[BUG]  [BUGGY]  WritePaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
296	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  entryName,  bigNumberMode);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
297	[BUG]  [BUGGY]  _writePaxHeaders(array,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  entryName,  paxHeaders);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
298	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  currName);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
299	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  path);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  path);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  path);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
300	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  entryName,  BigNumberMode);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
301	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size()  +  1);	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
302	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
303	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders.size());	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
304	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  buffer.size());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  buffer.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  buffer.size());	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
305	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  2);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  2);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size()  -  2);	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
306	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  4);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.size()  -  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.size()  -  4);	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
307	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders.size());	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
308	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    1)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
309	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    1)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
310	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    1)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
311	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.size());	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
312	[BUG]  [BUGGY]  buffer.writeRecord(currName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(currName);	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
313	[BUG]  [BUGGY]  buffer.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(currBytes);	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
314	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.size()  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.size()  +  1);	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
315	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders);	  _writePaxHeaders(paxHeaders,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
316	[BUG]  [BUGGY]  _writePaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(path,  paxHeaders);	  _writePaxHeaders(paxHeaders,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
317	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encoding);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encoding);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
318	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName  +  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName  +  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName  +  1);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
319	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodedName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodedName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
320	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  encoding);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
321	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodingName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodingName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(encodingName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
322	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(entryName,  currName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
323	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }	  writePaxHeaders(recordBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
324	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeaders(recordBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
325	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(recordBuf,  paxHeaders);  }  else  {  buffer.writeRecord(paxHeaders);  }	  writePaxHeaders(recordBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
326	[BUG]  [BUGGY]  if(paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    <    2)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
327	[BUG]  [BUGGY]  if(paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  <  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    <    2)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
328	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);	  if(paxHeaders.size()    <    2)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
329	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    <    2)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
330	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  buffer);	  writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
331	[BUG]  [BUGGY]  writePaxHeaders(buffer,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(buffer,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(buffer,  paxHeaders);	  writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
332	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  buffer,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  buffer,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  buffer,  entryName);	  writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
333	[BUG]  [BUGGY]  writePaxHeaders(array,  buffer);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  buffer);	  writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
334	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  buffer,  encoding);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  buffer,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  buffer,  encoding);	  writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
336	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
337	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(path,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(path,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(path,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
338	[BUG]  [BUGGY]  &&!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  &&!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	&&!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
339	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  currName);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
340	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  encoding);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
341	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
342	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
343	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  file);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
344	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
345	[BUG]  [BUGGY]  nisips.put(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisips.put(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisips.put(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
346	[BUG]  [BUGGY]  nisipas.put(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipas.put(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipas.put(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
347	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders.size(),  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders.size(),  entryName);	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
348	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  cachedName,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  cachedName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  cachedName,  entryName);	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
349	[BUG]  [BUGGY]  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    ||    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
350	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    ||    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
351	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(paxHeaders,  entryName);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
352	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(currName,  paxHeaders);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
353	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(paxHeaders);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
354	[BUG]  [BUGGY]  nisipByteBuffer.copyPaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.copyPaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.copyPaxHeaders(paxHeaders,  entryName);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
355	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(path,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(path,  entryName);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
356	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(entryName,  currName);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
357	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(patxHeaders,  entryName);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
358	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf);	  writePaxHeaders(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
359	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
360	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  currName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
361	[BUG]  [BUGGY]  paint.writeRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(recordBuf);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
362	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.size());	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
363	[BUG]  [BUGGY]  paint.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(currBytes);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
364	[BUG]  [BUGGY]  paint.writeRecord(currName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(currName);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
365	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.size()  -  1);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
366	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  recordBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
367	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  arrayBuf);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  arrayBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
368	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  buffer);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
369	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(arrayBuf,  entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
370	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  displayBuf);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  displayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  displayBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
371	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  pixHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  pixHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  pixHeaders);	  writePaxHeaders(paxHeaders,    arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
372	[BUG]  [BUGGY]  scanPaxHeaders(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(arrayBuf,  paxHeaders);	  writePaxHeaders(paxHeaders,    arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
373	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.containsKey(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
374	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.containsKey(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
375	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(key))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(key))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(key))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.containsKey(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
376	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(currName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(currName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(currName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.containsKey(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
377	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
378	[BUG]  [BUGGY]  ||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
379	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
380	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
381	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
382	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(paxHeaders,  entryName);	  writePaxHeaders(array,    entryName);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
383	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders.size());	  writePaxHeaders(array,    entryName);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
384	[BUG]  [BUGGY]  writePaxHeaders(array,  currName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  currName);	  writePaxHeaders(array,    entryName);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
385	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(array,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(array,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(array,  paxHeaders);	  writePaxHeaders(array,    entryName);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
386	[BUG]  [BUGGY]  writePaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
387	[BUG]  [BUGGY]  WritePaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
388	[BUG]  [BUGGY]  PaxHeaders  paxHeaders  =  paxHeaders.size();  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  paxHeaders  =  paxHeaders.size();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  paxHeaders  =  paxHeaders.size();	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
389	[BUG]  [BUGGY]  readPaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
390	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
391	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    ||    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
392	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    ||    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
393	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(currName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
394	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  currName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  currName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
395	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  currName,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
396	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(entryName,  currName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
397	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  currName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
398	[BUG]  [BUGGY]  readPaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(paxHeaders,  entryName);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
399	[BUG]  [BUGGY]  readPaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(paxHeaders);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
400	[BUG]  [BUGGY]  readPaxHeaders(array,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(array,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(array,  entryName,  paxHeaders);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
401	[BUG]  [BUGGY]  ReadPaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ReadPaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	ReadPaxHeaders(paxHeaders,  entryName);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
402	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  encoding,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  encoding,  paxHeaders);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
403	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  encoding,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  encoding,  bigNumberMode);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
404	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  arrayBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  arrayBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  arrayBuf,  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
405	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  recordBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  recordBuf,  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
406	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  bigNumberMode);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
407	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  buffer,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  buffer,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  buffer,  entryName);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
408	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  buffer);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
409	[BUG]  [BUGGY]  _writePaxHeaders(buffer,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(buffer,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(buffer,  paxHeaders);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
410	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  cache);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  cache);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  cache);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
411	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(path,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(path,  entryName);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
412	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
413	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
414	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
415	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  currName);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
416	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
417	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  cachedName);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
418	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
419	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(path,  entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(path,  entryName);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
420	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
421	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  bigNumberMode);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
422	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  encodedName);	  writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
423	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  encodedName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  encodedName);	  writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
424	[BUG]  [BUGGY]  writePaxHeaders(fileBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(fileBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(fileBuf,  paxHeaders);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
425	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  encoding);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
426	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  bigNumberMode);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
427	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  fileBuf);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  fileBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  fileBuf);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
428	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  entryName);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
429	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileBuf);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileBuf);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
430	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(currBytes);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
431	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(currBytes,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(currBytes,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(currBytes,  paxHeaders);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
432	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(paxHeaders.size());	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
433	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(currName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(currName);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
434	[BUG]  [BUGGY]  nisipByteBuffer.copyCurrentStructure(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.copyCurrentStructure(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.copyCurrentStructure(paxHeaders);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
435	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(paxHeaders.size()  -  1);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
436	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(recordBuf);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
437	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf);	  writePaxHeadersForNonAsciiNames(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
438	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf,  recordSize);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  assemBuf,  recordSize);	  writePaxHeadersForNonAsciiNames(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
439	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
440	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
442	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
443	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).recordSize);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
444	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
445	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(0).recordSize);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(0).recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(0).recordSize);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
446	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getValue();  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
447	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  pathHeaders.getValue();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  pathHeaders.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  pathHeaders.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
448	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.getValue();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  entries.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
449	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
450	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size())  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size())  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size())  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
451	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
452	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  <  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
453	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
454	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
455	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
457	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
459	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_STAR);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
460	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
461	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_START);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_START);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_START);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
462	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
463	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }  else  {  buffer.writeRecord(arrayBuf);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }  else  {  buffer.writeRecord(arrayBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }  else  {  buffer.writeRecord(arrayBuf);  }	  writePaxHeadersForNonAsciiNames(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
464	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(arrayBuf);  }	  writePaxHeadersForNonAsciiNames(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
465	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(arrayBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
466	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders);	  writePaxHeadersForNonAsciiNames(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
467	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  paxHeaders.size()  -  1);	  writePaxHeaders(arrayBuf,    paxHeaders.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
468	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  mapHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  mapHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  mapHeaders.size()  -  1);	  writePaxHeaders(arrayBuf,    paxHeaders.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
469	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
470	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currBytes);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
471	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currSize);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
472	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(0);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(0);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(0);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currName);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(currName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(long);  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(long);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(long);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
475	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file,  entryName);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
476	[BUG]  [BUGGY]  _writePaxHeaders(file,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(file,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(file,  paxHeaders);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
477	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  file);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
478	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
479	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file.getName());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file.getName());	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
480	[BUG]  [BUGGY]  scanPaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(paxHeaders.size());	  writePaxHeaders(paxHeaders.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
481	[BUG]  [BUGGY]  PaxHeaders  writePaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeaders(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeaders(paxHeaders.size());	  writePaxHeaders(paxHeaders.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
482	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  bigNumberMode);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
483	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(recordBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(recordBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(recordBuf,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
484	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
485	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
486	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
487	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  BIGNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  BIGNUMBER_STAR);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  encoding,  BIGNUMBER_STAR);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
488	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
489	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
490	[BUG]  [BUGGY]  readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders()  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
491	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
492	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
493	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
494	[BUG]  [BUGGY]  pendPaxHeaders.put( "path ",  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders.put( "path ",  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders.put( "path ",  entryName);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
495	[BUG]  [BUGGY]  hopHeaders.put(entryName,  paxHeaders.size()  -  1));  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  hopHeaders.put(entryName,  paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	hopHeaders.put(entryName,  paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
496	[BUG]  [BUGGY]  PaxHeaders.put( "path ",  entryName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.put( "path ",  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.put( "path ",  entryName);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
497	[BUG]  [BUGGY]  hopHeaders.put(entryName,  paxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  hopHeaders.put(entryName,  paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	hopHeaders.put(entryName,  paxHeaders.size()  -  1);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
498	[BUG]  [BUGGY]  hopHeaders.put( "path ",  entryName);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  hopHeaders.put( "path ",  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	hopHeaders.put( "path ",  entryName);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
499	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  encodedName);	  _writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
500	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders,  encodedName);	  _writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
501	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  encodedName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  encodedName);	  _writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
502	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  arrayBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  arrayBuf);	  _writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
503	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  dataBuf);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  dataBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  dataBuf);	  _writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
504	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  map);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  map);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  map);	  _writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
505	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)&&  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
506	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
507	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(entryName)||  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
508	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
509	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
510	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  encoding);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
511	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(path,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(path,  entryName);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
512	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
513	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
514	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(paxHeaders.size(),  entryName);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
515	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
516	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  2)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
517	[BUG]  [BUGGY]  ||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
518	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  <  =  0)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
519	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
520	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
521	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  cachedName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  paxHeaders,  cachedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
522	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0);	  writePaxHeaders(arrayBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
523	[BUG]  [BUGGY]  scanPaxHeaders(arrayBuf,  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(arrayBuf,  0,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(arrayBuf,  0,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
524	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
525	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
526	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
527	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
528	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).getName());  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
529	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	For(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName());	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
530	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).getName());  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(1).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
531	[BUG]  [BUGGY]  writePaxHeaders(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(currName,  paxHeaders);	  writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
532	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  currName,  encoding);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  currName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  currName,  encoding);	  writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
533	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  currSize);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  currSize);	  writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
534	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(currName,  paxHeaders);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
535	[BUG]  [BUGGY]  _writePaxHeaders(array,  buffer);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  buffer);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
536	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  archiveEntry);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
537	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileBuffer);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileBuffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileBuffer);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
538	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuffer,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuffer,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuffer,  paxHeaders);	  _writePaxHeaders(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
539	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size());	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
540	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  dataBuffer);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  dataBuffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  dataBuffer);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
541	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(paxHeaders.size());	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
542	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  0,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  0,  paxHeaders.size());	  _writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
543	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  dataBuffer);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  dataBuffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  dataBuffer);	  _writePaxHeaders(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
544	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    ==    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
545	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(arrayBuf,  paxHeaders);	  writePaxHeaders(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
546	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(path,  paxHeaders);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
547	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
548	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
549	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
550	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
551	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
552	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
553	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
554	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
555	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.toArray(new  String[paxHeaders.size()  ]));  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.toArray(new  String[paxHeaders.size()  ]));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.toArray(new  String[paxHeaders.size()  ]));	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
556	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.get(entryName));  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders.get(entryName));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders.get(entryName));	  writePaxHeadersForNonAsciiNames(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
557	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
558	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size(),  entryName);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders.size(),  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
559	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileEncoding);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileEncoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  fileEncoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
560	[BUG]  [BUGGY]  writePaxHeaders(array,  fileName);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  fileName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  fileName);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
561	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  recordBuf);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName,  recordBuf);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
562	[BUG]  [BUGGY]  _writePaxHeaders(array,  currName);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  currName);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
563	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
564	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName()  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName()  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getName()	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
565	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getname());  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getname());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).getname());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
566	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  nameLen);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  nameLen);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
567	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currSize);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  currSize);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
568	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  4);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  4);	  writePaxHeadersForNonAsciiNames(paxHeaders,    nameLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
569	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  ==  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
570	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  >  0)  {  writePaxHeaders(paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
571	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
572	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(arrayBuf,  entryName);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
573	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
574	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  file);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
575	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  fileName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  fileName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  fileName);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
576	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  encoding);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
577	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  4);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  4);	  writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
578	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
579	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders,  entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  paxHeaders,  entryName);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
580	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  recordHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  recordHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  recordHeaders);	  writePaxHeaders(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
581	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
582	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
583	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  path);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  path);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(paxHeaders,  path);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
584	[BUG]  [BUGGY]  DescimalPathUtil.writePaxHeaders(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DescimalPathUtil.writePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DescimalPathUtil.writePaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
585	[BUG]  [BUGGY]  PaxHeaders  paxHeaders  =  paxHeaders.get(entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  paxHeaders  =  paxHeaders.get(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  paxHeaders  =  paxHeaders.get(entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
586	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
587	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders));  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
588	[BUG]  [BUGGY]  buffer.writeRecord(PaxHeaders.get(paxHeaders.size()  -  1));  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(PaxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(PaxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
589	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders)-  1);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders)-  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders)-  1);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
590	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
591	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&!ASCII.canEncode(entry.getName()))  {  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&!ASCII.canEncode(entry.getName()))  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&!ASCII.canEncode(entry.getName()))  {	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
592	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.get(0));	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
593	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.get(entryName));  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.get(entryName));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.get(entryName));	  writePaxHeaders(paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
594	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.get(entryName));  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.get(entryName));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.get(entryName));	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
595	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size(),  recordBuf);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size(),  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size(),  recordBuf);	  writePaxHeaders(recordBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
596	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
597	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders.size());  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders.size());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames)  {  writePaxHeaders(entryName,  paxHeaders.size());  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
598	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
599	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
600	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(paxHeaders);	  writePaxHeaders(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
601	[BUG]  [BUGGY]  scanPaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(paxHeaders);	  writePaxHeaders(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
602	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName))  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
603	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
604	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  0)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
605	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    ||    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
606	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file.length);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file.length);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
607	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  paxHeaders,  file);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
608	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file,  recordSize);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file,  recordSize);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
609	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file.reset());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file.reset());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file.reset());	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
610	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(arrayBuf);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(arrayBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(arrayBuf);	  writePaxHeadersForNonAsciiNames(arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
611	[BUG]  [BUGGY]  WritePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(arrayBuf,  entryName,  paxHeaders);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
612	[BUG]  [BUGGY]  WritePaxHeaders(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(patxHeaders,  entryName);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
613	[BUG]  [BUGGY]  _writePaxHeader(paxHeaders,  recordBuf);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeader(paxHeaders,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeader(paxHeaders,  recordBuf);	  _writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
614	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
615	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  buffer);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
616	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  encoding);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
617	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cacheEncoding);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  cacheEncoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  cacheEncoding);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
618	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  2)  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
619	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
620	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()));  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(paxHeaders.size()));	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
621	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  file);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  file);	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
622	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.size());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file.size());	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
623	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(currName);	  _writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
624	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(recordBuf);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(recordBuf);	  _writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
625	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paramHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paramHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paramHeaders);	  writePaxHeaders(paxHeaders,    arrayBuf);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
626	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
627	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
628	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  buffer);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  buffer);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
629	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  buffer,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    buffer);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
630	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.containsKey(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.containsKey(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
631	[BUG]  [BUGGY]  writePaxHeaders(array,  encoding);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  encoding);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
632	[BUG]  [BUGGY]  PaxHeaders  archiveEntry  =  paxHeaders.get(entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  archiveEntry  =  paxHeaders.get(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  archiveEntry  =  paxHeaders.get(entryName);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
633	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  buffer);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
634	[BUG]  [BUGGY]  pendPaxHeaders(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(arrayBuf,  entryName,  paxHeaders);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
635	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  currBytes);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  currBytes);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
636	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size(),  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size(),  entryName);	  writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
637	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
638	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0))  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
639	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
640	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRe  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRe  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRe	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
641	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
642	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
643	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(1))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(1))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(1))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
644	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
645	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)previous)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)previous)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)previous)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
646	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)run())  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)run())  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.get(0)run())  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.get(0))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
647	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
648	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
649	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  nameLen);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
650	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  archiveEntry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  archiveEntry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  archiveEntry.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
651	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  buffer.getName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  buffer.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  buffer.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
652	[BUG]  [BUGGY]  _writePaxHeaders(entryName,  archiveEntry.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(entryName,  archiveEntry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(entryName,  archiveEntry.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
653	[BUG]  [BUGGY]  paint.copyCurrentStructure(paxHeaders);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.copyCurrentStructure(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.copyCurrentStructure(paxHeaders);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
654	[BUG]  [BUGGY]  paint.copyCurrentStructure(recordBuf);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.copyCurrentStructure(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.copyCurrentStructure(recordBuf);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
655	[BUG]  [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders.size());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeaders(paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeaders(paxHeaders.size());	  writePaxHeaders(paxHeaders.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
656	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(path,  paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
657	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(encodedName,  paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
658	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
659	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(i).encoding);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(i).encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(i).encoding);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
660	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding,  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding,  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i).encoding,  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
661	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  fileBuf,  addPaxHeadersForNonAsciiNames);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  fileBuf,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  fileBuf,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
662	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  0);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  0);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
663	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  recordBuf);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  recordBuf);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
664	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  encoding);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  addPaxHeadersForNonAsciiNames,  encoding);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
665	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
666	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
667	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuffer);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuffer);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
668	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer.length);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  dataBuffer.length);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
669	[BUG]  [BUGGY]  writePaxHeaders(arrayBuffer,  dataHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuffer,  dataHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuffer,  dataHeaders);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
670	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders.size(),  0);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders.size(),  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders.size(),  0);	  writePaxHeaders(arrayBuf,    0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
671	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
672	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
673	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
674	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
675	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
676	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
677	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMod  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMod  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMod	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
678	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumb  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumb  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumb	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
679	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumber  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumber  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumber	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
680	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
681	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileEncoding);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileEncoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileEncoding);	  _writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
682	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  registerPaxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  registerPaxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  registerPaxHeaders);	  writePaxHeaders(paxHeaders,    registerPaxHeaders);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
683	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  4)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    <    4)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
684	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
685	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(recordBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(recordBuf,  paxHeaders);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
686	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(array,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(array,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(array,  entryName,  paxHeaders);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
687	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(arrayBuf,  entryName,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
688	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
689	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(recordBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(recordBuf,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
690	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(arrayBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(arrayBuf,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
691	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getRecordName());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getRecordName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getRecordName());	  if(paxHeaders.size()    >    0)    {    if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
692	[BUG]  [BUGGY]  readPaxHeaders(arrayBuf,  entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(arrayBuf,  entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(arrayBuf,  entryName,  paxHeaders);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
693	[BUG]  [BUGGY]  readPaxHeaders(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeaders(recordBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeaders(recordBuf,  paxHeaders);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
694	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.iterator();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.iterator();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.iterator();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
695	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.entrySet().next();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.entrySet().next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.entrySet().next();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
696	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  archiveBuf.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  archiveBuf.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  archiveBuf.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
697	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  buffer.size());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  buffer.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  buffer.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
698	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  fileHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  fileHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  fileHeaders);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
699	[BUG]  [BUGGY]  writePaxHeaders(array,  fileHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  fileHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  fileHeaders);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
700	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders.length);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileHeaders.length);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
701	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ",  path   ",  entryName);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ",  path   ",  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  cachedPaxHeaders.put( ",  path   ",  entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    cachedPaxHeaders.put(   "path   ",    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
702	[BUG]  [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowNonAsciiNames(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
703	[BUG]  [BUGGY]  allowNonAsciiNames(paxHeaders.size())  {  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowNonAsciiNames(paxHeaders.size())  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowNonAsciiNames(paxHeaders.size())  {	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
704	[BUG]  [BUGGY]  allowInvalidArchiveEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
705	[BUG]  [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowNonAsciiNames(paxHeaders.size()  -  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
706	[BUG]  [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowNonAsciiNames(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowNonAsciiNames(paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
707	[BUG]  [BUGGY]  allowNonAsciiNames(paxHeaders.get(0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowNonAsciiNames(paxHeaders.get(0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowNonAsciiNames(paxHeaders.get(0))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
708	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  ==  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    1)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
709	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >=  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    1)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
710	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(i).recordSize);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(i).recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(i).recordSize);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
711	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(PaxHeaders.get(i).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
712	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  recordSize);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
713	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).recordSize);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).recordSize);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
714	[BUG]  [BUGGY]  nisipByteBuffer.copyRecord(recordBuf);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.copyRecord(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.copyRecord(recordBuf);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
715	[BUG]  [BUGGY]  nisipByteBuffer.copyCurrentStructure(recordBuf);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.copyCurrentStructure(recordBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.copyCurrentStructure(recordBuf);	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
716	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||(paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||(paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||(paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0)&&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
717	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  (paxHeaders.size()  >  0)&&  paxHeaders.contains(entryName))  {  writePaxHeaders(entryName,  paxHeaders	  if(!addPaxHeadersForNonAsciiNames    &&    (paxHeaders.size()    >    0)&&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
718	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0,  buffer.size());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0,  buffer.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0,  buffer.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
719	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0,  recordBuf.size());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0,  recordBuf.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0,  recordBuf.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
720	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0,  fileHeaders.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0,  fileHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0,  fileHeaders.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
721	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  0,  arrayBuf.size());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  0,  arrayBuf.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  0,  arrayBuf.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
722	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  0);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  0);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
723	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  currSize);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
724	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.canEncode(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.canEncode(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.canEncode(entryName))  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(paxHeaders.size()    >    0)    {    if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
725	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
726	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.size()  >  0)  {  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(len);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
727	[BUG]  [BUGGY]  nisipBytes.put(entryName,  currBytes);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  currBytes);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  currBytes);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
728	[BUG]  [BUGGY]  nisipBytes.put(entryName,  currBuf);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipBytes.put(entryName,  currBuf);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipBytes.put(entryName,  currBuf);	  nisipBytes.put(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
729	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  0);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  0);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
730	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size(),  encoding);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders.size(),  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders.size(),  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
731	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  buffer);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  buffer);	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
732	[BUG]  [BUGGY]  _writePaxHeaders(arrayBuf,  0,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(arrayBuf,  0,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(arrayBuf,  0,  entryName);	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
733	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  file);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  file);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
734	[BUG]  [BUGGY]  PaxHeaders  file  =  paxHeaders.get(entryName);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  file  =  paxHeaders.get(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  file  =  paxHeaders.get(entryName);	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  <identifier>  expected	120	None	replace
735	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(i),  entryName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(i),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(i),  entryName);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
736	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  bigNumberMode);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
737	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  BIGNUMBER_POSIX);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  BIGNUMBER_POSIX);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entryName,  BIGNUMBER_POSIX);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
738	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  cachedName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  cachedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    cachedName);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
739	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  cachedName);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  cachedName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    cachedName);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
740	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  cacheEntry.getValue();  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  cacheEntry.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  cacheEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	117	None	replace
741	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  this.archiveEntry.getValue();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	117	None	replace
742	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  bigNumberMode,  entryName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  bigNumberMode,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  bigNumberMode,  entryName);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
743	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  fileName,  bigNumberMode);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  fileName,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  fileName,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
744	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  nameLen,  bigNumberMode);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  nameLen,  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  nameLen,  bigNumberMode);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
745	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.length);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.length);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders.length);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
746	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry(entryName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  archiveEntry.getEntry(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  archiveEntry.getEntry(entryName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
747	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(path);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(path);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(path);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
748	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  encodedName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
749	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
750	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(path,  entryName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(path,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(path,  entryName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
751	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  recordSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  recordSize);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
752	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  currSize);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  currSize);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  currSize);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
753	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  0);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  0);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
754	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  0);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  0);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  0);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
755	[BUG]  [BUGGY]  writePaxHeaders(array,  paxHeaders,  path);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(array,  paxHeaders,  path);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(array,  paxHeaders,  path);	  writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
756	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  buffer,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  buffer,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  buffer,  entryName);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
757	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
758	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
759	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName).next();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  <identifier>  expected	118	None	replace
760	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.values().next();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.values().next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.values().next();	  Entry    <    K,    V>    entry    =    paxHeaders.iterator().next();    	non-compiled	[CE]  <identifier>  expected	118	None	replace
761	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entry.getValue());  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entry.getValue());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entry.getValue());	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	117	None	replace
762	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.values().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.values().iterator().next();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.values().iterator().next();	  Entry    <    K,    V>    entry    =    entry.getValue();    	non-compiled	[CE]  <identifier>  expected	117	None	replace
763	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);	  PaxHeaders.writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
764	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  assemLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  assemLen);	  buffer.writeRecord(recordBuf);    	non-compiled	[CE]  <identifier>  expected	86	None	replace
765	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  true);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  true);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  true);	  _writePaxHeadersForNonAsciiNames(paxHeaders);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
766	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  paxHeaders);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  paxHeaders);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
767	[BUG]  [BUGGY]  WritePaxHeaders(arrayBuf,  paxHeaders,  addPaxHeadersForNonAsciiNames);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(arrayBuf,  paxHeaders,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(arrayBuf,  paxHeaders,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
768	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  b,  addPaxHeadersForNonAsciiNames);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  b,  addPaxHeadersForNonAsciiNames);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  b,  addPaxHeadersForNonAsciiNames);	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
769	[BUG]  [BUGGY]  WritePaxHeaders(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeaders(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeaders(paxHeaders,  paxHeaders.size());	  WritePaxHeaders(paxHeaders,    addPaxHeadersForNonAsciiNames);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
770	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  [Delete]  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	[Delete]	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
771	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
772	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(entryName,  paxHeaders.size()))  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
773	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(entryName,  paxHeaders.size()  -  1)  {  throw  new  IllegalArgumentException( " ");  }	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
774	[BUG]  [BUGGY]  allowUnclosedEntry(entry.getName(),  entryName);  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowUnclosedEntry(entry.getName(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowUnclosedEntry(entry.getName(),  entryName);	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
775	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entry.getName(),  entryName);  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(entry.getName(),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(entry.getName(),  entryName);	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
776	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entryName);  [CE]  illegal  start  of  type  [FE]                                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  allowInvalidArchiveEntry(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	allowInvalidArchiveEntry(entryName);	  if(paxHeaders.size()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
777	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  <  4)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
778	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.size()  >  1)  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
779	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName))    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
780	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  fileHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  fileHeaders);	  writePaxHeadersForNonAsciiNames(arrayBuf,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
781	[BUG]  [BUGGY]  final  boolean  addPaxHeadersForNonAsciiNames  =  paxHeaders.size()  >  0;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  final  boolean  addPaxHeadersForNonAsciiNames  =  paxHeaders.size()  >  0;  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	final  boolean  addPaxHeadersForNonAsciiNames  =  paxHeaders.size()  >  0;	  if(paxHeaders.size()    >    0)    {    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
782	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entryName);  }  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entryName);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    }    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
783	[BUG]  [BUGGY]  pendPaxHeaders(entryName,  paxHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendPaxHeaders(entryName,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendPaxHeaders(entryName,  paxHeaders,  encoding);	  pendPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
784	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  encodedName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName,  encodedName);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
785	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  buffer);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileName,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileName,  buffer);	  writePaxHeaders(paxHeaders,    fileName);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
786	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toString());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toString());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.get(entryName.toString());	  Entry    <    K,    V>    entry    =    paxHeaders.get(entryName);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
787	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
788	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders[i]);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders[i]);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders[i]);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
789	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
790	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(paxHeaders[i].getEntryName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
791	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(PaxHeaders[i]);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(PaxHeaders[i]);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  i++)  {  buffer.writeRecord(PaxHeaders[i]);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    i++)    {    buffer.writeRecord(paxHeaders[i]);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
792	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(path,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(path,  paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
793	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(array,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(array,  paxHeaders);	  writePaxHeadersForNonAsciiNames(path,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
794	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  paxHeaders);	  writePaxHeaders(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
795	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  entryName,  encoding);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  entryName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  entryName,  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
796	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileEncoding);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileEncoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileEncoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
797	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  archiveEntry);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  archiveEntry);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  archiveEntry);	  writePaxHeaders(arrayBuf,    paxHeaders,    encoding);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
798	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  4);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  4);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  paxHeaders.contains(entryName)||  writePaxHeaders(entryName,  4);	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.contains(entryName)||    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
799	[BUG]  [BUGGY]  pendingRecords  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingRecords  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingRecords  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
800	[BUG]  [BUGGY]  pendingPath  =  paxHeaders.get(paxHeaders.size()  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingPath  =  paxHeaders.get(paxHeaders.size()  -  1);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingPath  =  paxHeaders.get(paxHeaders.size()  -  1);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
801	[BUG]  [BUGGY]  pendingPath  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingPath  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingPath  =  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
802	[BUG]  [BUGGY]  pendingRecords  =  buffer.writeRecord(paxHeaders.get(0));  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingRecords  =  buffer.writeRecord(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingRecords  =  buffer.writeRecord(paxHeaders.get(0));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
803	[BUG]  [BUGGY]  _writePaxHeader(paxHeaders,  entry.getName());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeader(paxHeaders,  entry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeader(paxHeaders,  entry.getName());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  <identifier>  expected	113	None	replace
804	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entryName.toString());  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  entryName.toString());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entryName.toString());	  _writePaxHeaders(paxHeaders,    archiveEntry.getName());    	non-compiled	[CE]  <identifier>  expected	113	None	replace
805	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(currName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  K,  V>  entry  =  paxHeaders.getEntry(currName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  K,  V>  entry  =  paxHeaders.getEntry(currName);	  Entry    <    K,    V>    entry    =    paxHeaders.getEntry(entryName);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
806	[BUG]  [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  encoding);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writePaxHeaders(entryName,  paxHeaders,  encoding);	  nisipByteBuffer.writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
807	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  BIGNUMBER_STAR);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  entryName,  BIGNUMBER_STAR);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  entryName,  BIGNUMBER_STAR);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
808	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders,  entryName);	  _writePaxHeaders(paxHeaders,    entryName,    bigNumberMode);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
809	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).getName());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
810	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(patxHeaders.get(i).getName());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(patxHeaders.get(i).getName());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(patxHeaders.get(i).getName());  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).getName());    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
811	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    ||    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
812	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(entryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
813	[BUG]  [BUGGY]  buffer.writeRecord(entryName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(entryName);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(len);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
814	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(0),  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(0),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(0),  entryName);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
815	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(entryName));  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(entryName));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(entryName));	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
816	[BUG]  [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1),  entryName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(paxHeaders.get(paxHeaders.size()  -  1),  entryName);	  if(paxHeaders.size()    >    0)    {    paxHeaders.put(   "path   ",    entryName);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
817	[BUG]  [BUGGY]  _writePaxHeaderForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaderForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaderForNonAsciiNames(paxHeaders,  entryName);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
818	[BUG]  [BUGGY]  _writer.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writer.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writer.writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  _writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
819	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames.contains(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames.contains(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames.contains(paxHeaders.size()))  {  writePaxHeaders(entryName,  paxHeaders);	  ||!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
820	[BUG]  [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.get(0));  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  nisipByteBuffer.writeRecord(paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	nisipByteBuffer.writeRecord(paxHeaders.get(0));	  nisipByteBuffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
821	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders.size());	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
822	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);	  writePaxHeadersForNonAsciiNames(paxHeaders,    encodedName);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
823	[BUG]  [BUGGY]  EncoderUtil.writePaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  EncoderUtil.writePaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	EncoderUtil.writePaxHeaders(paxHeaders,  entryName);	  WritePaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
824	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file.size());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file.size());	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
825	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  file.getParent());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  file.getParent());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  file.getParent());	  writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
826	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry.getEncoding());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  archiveEntry.getEncoding());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  archiveEntry.getEncoding());	  _writePaxHeaders(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
827	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  recordHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  recordHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  recordHeaders.size();  i  <  len;  ++i)  {  buffer.writeRecord(recordBuf);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
828	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  --i)  {  buffer.writeRecord(recordBuf);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  --i)  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0,  len  =  paxHeaders.size();  i  <  len;  --i)  {  buffer.writeRecord(recordBuf);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
829	[BUG]  [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  paxHeaders.get(entryName);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  Entry  <  String,ArchiveEntry>  entry  =  paxHeaders.get(entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	Entry  <  String,ArchiveEntry>  entry  =  paxHeaders.get(entryName);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0,    len    =    paxHeaders.size();    i    <    len;    ++i)    {    buffer.writeRecord(recordBuf);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
830	[BUG]  [BUGGY]  _writePaxHeader(paxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeader(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeader(paxHeaders,  entryName);	  _writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
831	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file.getParent());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file.getParent());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file.getParent());	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
832	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  file,  nameLen);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  file,  nameLen);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  file,  nameLen);	  _writePaxHeaders(paxHeaders,    file);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
833	[BUG]  [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
834	[BUG]  [BUGGY]  PaxHeaders  wrapPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  wrapPaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  wrapPaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  PaxHeaders    writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
835	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  WritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	WritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);	  WritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
836	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders);	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
837	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  paxHeaders.size());	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
838	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getName());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	DeserializationPlugin.writePaxHeaders(paxHeaders,  archiveEntry.getName());	  DeserializationPlugin.writePaxHeaders(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
839	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  archiveEntry.size());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  archiveEntry.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  archiveEntry.size());	  writePaxHeaders(arrayBuf,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
840	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  encoding,  BIGNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  encoding,  BIGNUMBER_STAR);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  encoding,  BIGNUMBER_STAR);	  writePaxHeaders(paxHeaders,    encoding);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
841	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  file);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
842	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
843	[BUG]  [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);	  scanPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
844	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  encoding);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
845	[BUG]  [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  BigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  BigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(arrayBuf,  paxHeaders,  entryName,  BigNumberMode);	  writePaxHeaders(arrayBuf,    paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
846	[BUG]  [BUGGY]  scanPaxHeaders(paxHeaders,  0,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(paxHeaders,  0,  paxHeaders.size());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(paxHeaders,  0,  paxHeaders.size());	  writePaxHeaders(arrayBuf,    0,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
847	[BUG]  [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(entry.isDirectory())  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(entry.isDirectory())  {  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
848	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(entryName),  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(entryName),  bigNumberMode);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(entryName),  bigNumberMode);	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
849	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_POSIX);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_POSIX);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  BIGNUMBER_POSIX);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
850	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  bigNumberMode);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(0),  bigNumberMode);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    bigNumberMode);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
851	[BUG]  [BUGGY]  parsePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  parsePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	parsePaxHeaders(entryName,  paxHeaders);	  readPaxHeaders(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
852	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(patxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
853	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  cachedName,  entryName);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
854	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  encodedName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  cachedName,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  cachedName,  encodedName);	  writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
855	[BUG]  [BUGGY]  readPaxHeadersForNonAsciiNames(array,  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPaxHeadersForNonAsciiNames(array,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPaxHeadersForNonAsciiNames(array,  entryName);	  readPaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
856	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entries.getEntryName);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entries.getEntryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(paxHeaders.get(i),  entries.getEntryName);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i),    entryName);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
857	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  recordBuf,  encoding);	  writePaxHeadersForNonAsciiNames(paxHeaders,    recordBuf);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
858	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  b);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  b);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  b);	  writePaxHeadersForNonAsciiNames(paxHeaders,    recordBuf);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
859	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  encoding);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  cachedName,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  cachedName,  encoding);	  _writePaxHeaders(paxHeaders,    cachedName);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
860	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  <identifier>  expected	84	None	replace
861	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  <identifier>  expected	84	None	replace
862	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(0));  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(0));  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(entry.isDirectory())  {  if(paxHeaders.size()  >  0)  {  buffer.writeRecord(paxHeaders.get(0));  }	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  <identifier>  expected	84	None	replace
863	[BUG]  [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  1)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(entry.isDirectory())  {  if(paxHeaders.size()  >  1)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(entry.isDirectory())  {  if(paxHeaders.size()  >  1)  {  buffer.writeRecord(paxHeaders.get(paxHeaders.size()  -  1));  }	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  <identifier>  expected	84	None	replace
864	[BUG]  [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders,  entryName));  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(paxHeaders.get(paxHeaders,  entryName));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(paxHeaders.get(paxHeaders,  entryName));	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders    	non-compiled	[CE]  <identifier>  expected	84	None	replace
865	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  recordBuf);  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  recordBuf);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  recordBuf);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
866	[BUG]  [BUGGY]  PaxHeaders  writePaxHeaders(path,  paxHeaders);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders  writePaxHeaders(path,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders  writePaxHeaders(path,  paxHeaders);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
867	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  archiveEntry.getPath());  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  archiveEntry.getPath());  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(path,  archiveEntry.getPath());  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(path,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
868	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  cachedName);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  cachedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  cachedName);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
869	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  buffer);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileBuf,  buffer);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileBuf,  buffer);	  writePaxHeaders(paxHeaders,    fileBuf);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
870	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).encoding);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).encoding);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	for(int  i  =  0;  i  <  paxHeaders.size();  ++i)  {  buffer.writeRecord(headers.get(i).encoding);  }	  if(paxHeaders.size()    >    0)    {    for(int    i    =    0;    i    <    paxHeaders.size();    ++i)    {    buffer.writeRecord(paxHeaders.get(i).encoding);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
871	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  cachedName,  entryName);	  writePaxHeadersForNonAsciiNames(paxHeaders,    cachedName);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
872	[BUG]  [BUGGY]  scanPaxHeaders(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  scanPaxHeaders(paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	scanPaxHeaders(paxHeaders,  entryName);	  writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
873	[BUG]  [BUGGY]  writePaxHeaders(patxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(patxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(patxHeaders,  entryName);	  writePaxHeaders(paxHeaders,    currName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
874	[BUG]  [BUGGY]  ||  paxHeaders.size()  <  4)  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||  paxHeaders.size()  <  4)  {  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||  paxHeaders.size()  <  4)  {	  ||    paxHeaders.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
875	[BUG]  [BUGGY]  buffer.writeRecord(recordBuf,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordBuf,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordBuf,  paxHeaders);	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
876	[BUG]  [BUGGY]  buffer.writeRecord(recordHeaders);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  buffer.writeRecord(recordHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	buffer.writeRecord(recordHeaders);	  buffer.writeRecord(paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
877	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  fileHeaders);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  fileHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  fileHeaders);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
878	[BUG]  [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	PaxHeaders.writePaxHeadersForNonAsciiNames(arrayBuf,  paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(arrayBuf,    entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
879	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  file);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  file);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  file);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
880	[BUG]  [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	rewritePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);	  rewritePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
881	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileHeaders,  entryName);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
882	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders,  encoding);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  fileHeaders,  encoding);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  fileHeaders,  encoding);	  writePaxHeaders(paxHeaders,    fileHeaders);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
883	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  ||  paxHeaders.size()  >  0)  {  writePaxHeaders(paxHeaders,  entryName);  }	  if(addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(paxHeaders,    entryName);    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
884	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.toArray(new  String[paxHeaders.size()  ]));  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.toArray(new  String[paxHeaders.size()  ]));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.toArray(new  String[paxHeaders.size()  ]));	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
885	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.get(0));  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders,  paxHeaders.get(0));  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders,  paxHeaders.get(0));	  _writePaxHeaders(paxHeaders,    paxHeaders.size());    	non-compiled	[CE]  <identifier>  expected	37	None	replace
886	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(addPaxHeadersForNonAsciiNames  &&  PaxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(addPaxHeadersForNonAsciiNames    ||    paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
887	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames.contains(entryName)&&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames.contains(entryName)&&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(!addPaxHeadersForNonAsciiNames.contains(entryName)&&  paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  }	  if(!addPaxHeadersForNonAsciiNames    &&    paxHeaders.size()    ==    0)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
888	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  paxHeaders);	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
889	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeadersForNonAsciiNames(paxHeaders,  entryName,  encodedName);	  _writePaxHeadersForNonAsciiNames(paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
890	[BUG]  [BUGGY]  sweepPaxHeaders(entryName,  paxHeaders,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  sweepPaxHeaders(entryName,  paxHeaders,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	sweepPaxHeaders(entryName,  paxHeaders,  entryName);	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
891	[BUG]  [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(currName,  paxHeaders,  entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  if(paxHeaders.size()  >  0)  {  writePaxHeaders(currName,  paxHeaders,  entryName);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	if(paxHeaders.size()  >  0)  {  writePaxHeaders(currName,  paxHeaders,  entryName);  }	  if(paxHeaders.size()    >    0)    {    writePaxHeaders(entryName,    paxHeaders,    entryName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
892	[BUG]  [BUGGY]  paint.writeRecord(recordHeaders);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  paint.writeRecord(recordHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	paint.writeRecord(recordHeaders);	  paint.writeRecord(paxHeaders);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
893	[BUG]  [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  entryName);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeaders(paxHeaders,  dataBuffer,  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeaders(paxHeaders,  dataBuffer,  entryName);	  writePaxHeaders(paxHeaders,    dataBuffer);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
894	[BUG]  [BUGGY]  _writePaxHeaders(paxHeaders.get(entryName),  entryName);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(paxHeaders.get(entryName),  entryName);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(paxHeaders.get(entryName),  entryName);	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
895	[BUG]  [BUGGY]  _verifyValueWrite( "write  path  ' "+paxHeaders.size()  + "' ");  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _verifyValueWrite( "write  path  ' "+paxHeaders.size()  + "' ");  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_verifyValueWrite( "write  path  ' "+paxHeaders.size()  + "' ");	  _writePaxHeaders(arrayBuf,    entryName);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
896	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.getParent());  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.getParent());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file.getParent());	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
897	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.getName());  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  file.getName());  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  file.getName());	  writePaxHeadersForNonAsciiNames(paxHeaders,    file);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
898	[BUG]  [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders))  {  writePaxHeaders(entryName,  paxHeaders);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  ||!addPaxHeadersForNonAsciiNames(paxHeaders))  {  writePaxHeaders(entryName,  paxHeaders);  }  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	||!addPaxHeadersForNonAsciiNames(paxHeaders))  {  writePaxHeaders(entryName,  paxHeaders);  }	  ||!addPaxHeadersForNonAsciiNames)    {    writePaxHeaders(entryName,    paxHeaders);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
899	[BUG]  [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  BIGNUMBER_POSIX);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  _writePaxHeaders(array,  paxHeaders,  entryName,  BIGNUMBER_POSIX);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	_writePaxHeaders(array,  paxHeaders,  entryName,  BIGNUMBER_POSIX);	  _writePaxHeaders(array,    paxHeaders,    entryName);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
900	[BUG]  [BUGGY]  pendingRecord  =  buffer.writeRecord(paxHeaders);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingRecord  =  buffer.writeRecord(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingRecord  =  buffer.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
901	[BUG]  [BUGGY]  pendingPath  =  buffer.writeRecord(paxHeaders);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  pendingPath  =  buffer.writeRecord(paxHeaders);  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	pendingPath  =  buffer.writeRecord(paxHeaders);	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
902	[BUG]  [BUGGY]  readPath();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      paxHeaders.put(     "path     ",  entryName);  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {      [BUGGY]  readPath();  [BUGGY]      }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {  currSize  =  0;  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	314	314	1	replace	readPath();	  if(paxHeaders.size()    >    0)    {    buffer.writeRecord(paxHeaders);    }    else    {    buffer.writeRecord(paxHeaders.get(paxHeaders.size()    -    1));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
