bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while  (actualLength  >  len)  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (actualLength  >  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  >  len)  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  while  (currentLength  >  len)  {  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (currentLength  >  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  >  len)  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  while  (len  >  0)  {  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  >  0)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  >  0)  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  while  (actualLength!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (actualLength!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  while  (actualLength  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (actualLength  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  while  (actualLength  <  len)  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (actualLength  <  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len)  {	  while    (actualLength    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  while(currentLength  >=  len)  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(currentLength  >=  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(currentLength  >=  len)  {	  while(len    >=    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  while(len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while(len    >=    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >=    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  while  (currentLength  <  len)  {  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (currentLength  <  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len)  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  while(len  >  actualLength  -  1)  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  >  actualLength  -  1)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  -  1)  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  w.write(value);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  w.write(value);  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(value);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  w.write(key);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  w.write(key);  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */;  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.length()  >  0)  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while  (len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {	  while    (len    <    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  while(LONGFILE_TRUNCATE  >=  len)  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(LONGFILE_TRUNCATE  >=  len)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(LONGFILE_TRUNCATE  >=  len)  {	  while    (actualLength    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  while(actualLength  >  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(actualLength  >  LONGFILE_TRUNCATE)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  LONGFILE_TRUNCATE)  {	  while(len    >=    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
39	[BUG]  [BUGGY]  while(len  <  =  actualLength)  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  <  =  actualLength)  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength)  {	  while(len    >=    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  while(len  >  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  >  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  while(len  >  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;    [BUGGY]  while(len  >  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]          len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while    (len    >    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
