bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(len  >  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
2	[BUG]  [BUGGY]  while(len  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
3	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
4	[BUG]  [BUGGY]  while(len  >=  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
5	[BUG]  [BUGGY]  while(len  >  0  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  0  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  0  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
6	[BUG]  [BUGGY]  while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
7	[BUG]  [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
8	[BUG]  [BUGGY]  while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
9	[BUG]  [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
10	[BUG]  [BUGGY]  while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
11	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  int  actualLength  =  h.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  h.getBytes(CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  h.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
18	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
19	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
20	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
21	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(key);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(key);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
22	[BUG]  [BUGGY]  w.write(line);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(line);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(line);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
23	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
24	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(value);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
25	[BUG]  [BUGGY]  int  len  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  w.getBytes(CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
26	[BUG]  [BUGGY]  Integer  len  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  len  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  len  =  w.getBytes(CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
27	[BUG]  [BUGGY]  while  (actualLength  >  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  >  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  >  0)  {	  while    (actualLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  while  (actualLength  >  MAX_VALUE_LENGTH)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  >  MAX_VALUE_LENGTH)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  >  MAX_VALUE_LENGTH)  {	  while    (actualLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  while(actualLength  >  len  -  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  len  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  len  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
30	[BUG]  [BUGGY]  while(len  <  actualLength  -  1)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
31	[BUG]  [BUGGY]  while(len  >=  actualLength  -  1)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  actualLength  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  actualLength  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
32	[BUG]  [BUGGY]  while(currentLength  >  len  -  1)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(currentLength  >  len  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(currentLength  >  len  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
33	[BUG]  [BUGGY]  while(len  >  actualLength  +  1)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  actualLength  +  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  +  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
34	[BUG]  [BUGGY]  while(len  >  actualLength  -  2)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  actualLength  -  2)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  -  2)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
35	[BUG]  [BUGGY]  while  (actualLength  <  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  0)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  while  (currentLength  >  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  >  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  >  0)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  while(len  <  =  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  0)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  w.write(value,  actualLength);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(value,  actualLength);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(value,  actualLength);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
39	[BUG]  [BUGGY]  w.write(key,  actualLength);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(key,  actualLength);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key,  actualLength);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
40	[BUG]  [BUGGY]  w.verifyValueWrite( "write  key: "  +  key);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.verifyValueWrite( "write  key: "  +  key);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.verifyValueWrite( "write  key: "  +  key);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
41	[BUG]  [BUGGY]  w.verifyValueWrite( "write  key  valuen ");  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.verifyValueWrite( "write  key  valuen ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.verifyValueWrite( "write  key  valuen ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
42	[BUG]  [BUGGY]  w.verifyValueWrite( "write  key  value ");  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.verifyValueWrite( "write  key  value ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.verifyValueWrite( "write  key  value ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
43	[BUG]  [BUGGY]  w.verifyValueWrite( "write  keyn ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.verifyValueWrite( "write  keyn ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.verifyValueWrite( "write  keyn ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
44	[BUG]  [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
45	[BUG]  [BUGGY]  if(value  ==  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value  ==  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value  ==  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
46	[BUG]  [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
47	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
48	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
49	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
50	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
51	[BUG]  [BUGGY]  while  (offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
52	[BUG]  [BUGGY]  while  (currentLength  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
53	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  while  (currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
56	[BUG]  [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
57	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
58	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
59	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
60	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  while  (actualLength  <  =  len)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  =  len)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  =  len)  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
68	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
72	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  ==  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  ==  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  ==  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
73	[BUG]  [BUGGY]  if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
74	[BUG]  [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
75	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  1);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  1);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  1);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
76	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  3);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  3);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length()  +  3);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
77	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
78	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  actualLength  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  actualLength  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  actualLength  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
79	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
80	[BUG]  [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  value.length()  +  value.length()  /*  blank,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
81	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  realLength  */;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  realLength  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  realLength  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
82	[BUG]  [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  value.length()  +  key.length()  /*  blank,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
83	[BUG]  [BUGGY]  while(len  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
84	[BUG]  [BUGGY]  while(len  >=  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
85	[BUG]  [BUGGY]  while(len  ==  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  ==  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  ==  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
86	[BUG]  [BUGGY]  while(actualLength  >  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  len  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
87	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
88	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)  ==  'n')  {	  while    (len    <    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
89	[BUG]  [BUGGY]  while  (currentLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
90	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  2)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  2)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.charAt(actualLength  -  2)!=  'n')  {	  while    (len    <    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
91	[BUG]  [BUGGY]  while(currentLength  <  =  len)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(currentLength  <  =  len)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(currentLength  <  =  len)  {	  while(len    <    =    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
92	[BUG]  [BUGGY]  while(len  <  actualLength  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {	  while(len    <    =    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
93	[BUG]  [BUGGY]  while(len  <  actualLength  &&  actualLength  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  actualLength  <  =  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  actualLength  <  =  0)  {	  while(len    <    =    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
94	[BUG]  [BUGGY]  while(offset  <  =  actualLength)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(offset  <  =  actualLength)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(offset  <  =  actualLength)  {	  while(len    <    =    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
95	[BUG]  [BUGGY]  while  (currentLength  <  actualLength)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  actualLength)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  actualLength)  {	  while    (currentLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
96	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  actualLength  <  =  LONGFILE_TRUNCATE)  {	  while    (currentLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
97	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
98	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  ==  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  ==  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
99	[BUG]  [BUGGY]  if(actualLength!=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength!=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength!=  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
100	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
101	[BUG]  [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
102	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
103	[BUG]  [BUGGY]  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(key,  value);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key,  value);	  w.write(value);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
104	[BUG]  [BUGGY]  w.write('n');  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write('n');  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write('n');	  w.write(value);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
105	[BUG]  [BUGGY]  w.write(key  + "n ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(key  + "n ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key  + "n ");	  w.write(value);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
106	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
107	[BUG]  [BUGGY]  int  len  =  h.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  h.getBytes(CharsetNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  h.getBytes(CharsetNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
108	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
109	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
110	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
111	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
112	[BUG]  [BUGGY]  while(actualLength  <  len  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  len  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  len  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
113	[BUG]  [BUGGY]  while(offset  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(offset  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(offset  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
114	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value.charAt(actualLength  -  1)  ==  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
115	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  2)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value.charAt(actualLength  -  2)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value.charAt(actualLength  -  2)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
116	[BUG]  [BUGGY]  while(len  >=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength    >=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
117	[BUG]  [BUGGY]  while  (actualLength  >  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  >  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  >  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength    >=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
118	[BUG]  [BUGGY]  w.write(len);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(len);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(len);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
119	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  1);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  1);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
120	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
121	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  2);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  2);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  2);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
122	[BUG]  [BUGGY]  while(offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(offset  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
123	[BUG]  [BUGGY]  while(line  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(line  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(line  <  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
124	[BUG]  [BUGGY]  while(len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  line.charAt(actualLength  -  1)  ==  'n')  {	  while(len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
125	[BUG]  [BUGGY]  while(currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(currentLength  <  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
126	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {	  while    (len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)    ==    'n')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
127	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {	  while    (len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)    ==    'n')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
128	[BUG]  [BUGGY]  while  (currentLength  >  actualLength)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  >  actualLength)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  >  actualLength)  {	  while    (currentLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
129	[BUG]  [BUGGY]  int  actualLength  =  h.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  h.getBytes(CharsetNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  h.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
130	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
131	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
132	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
133	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
134	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
135	[BUG]  [BUGGY]  while(len!=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len!=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len!=  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
136	[BUG]  [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  =  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
137	[BUG]  [BUGGY]  while(actualLength  <  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
138	[BUG]  [BUGGY]  while(actualLength  >=  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >=  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >=  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
139	[BUG]  [BUGGY]  while(actualLength!=  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength!=  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength!=  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
140	[BUG]  [BUGGY]  while(actualLength  <  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  LONGFILE_GNU)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  LONGFILE_GNU)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
141	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)  ==  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
142	[BUG]  [BUGGY]  while  (currentLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
143	[BUG]  [BUGGY]  while  (actualLength  <  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
144	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
145	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
146	[BUG]  [BUGGY]  int  len  =  h.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  h.getBytes(CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  h.getBytes(CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
147	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
148	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
149	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
150	[BUG]  [BUGGY]  while(len  >=  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  LONGFILE_GNU)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  LONGFILE_GNU)  {	  while(LONGFILE_TRUNCATE    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
151	[BUG]  [BUGGY]  while  (actualLength  <  len  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
152	[BUG]  [BUGGY]  while  (actualLength  <  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
153	[BUG]  [BUGGY]  while  (currentLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
154	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
155	[BUG]  [BUGGY]  while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  len  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
156	[BUG]  [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
157	[BUG]  [BUGGY]  while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value  <  actualLength  &&  len!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
158	[BUG]  [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value!=  null  &&  len  <  actualLength  &&  value!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
159	[BUG]  [BUGGY]  while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(offset  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
160	[BUG]  [BUGGY]  if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value.length()  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
161	[BUG]  [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
162	[BUG]  [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
163	[BUG]  [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
164	[BUG]  [BUGGY]  while  (actualLength  <  len  &&  key.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (actualLength  <  len  &&  key.length()  >  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (actualLength  <  len  &&  key.length()  >  0)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
165	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  value.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  value.length()  >  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  value.length()  >  0)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
166	[BUG]  [BUGGY]  while  (currentLength  <  len  &&  key.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (currentLength  <  len  &&  key.length()  >  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (currentLength  <  len  &&  key.length()  >  0)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
167	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.length()  >  0  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
168	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0  ||  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  0  ||  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.length()  >  0  ||  line.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
169	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
170	[BUG]  [BUGGY]  if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(line);  }	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
171	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
172	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(line);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(line);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(line);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
173	[BUG]  [BUGGY]  while(actualLength  <  =  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  =  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  =  len  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
174	[BUG]  [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value!=  null  &&  len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  'n')  {	  while    (len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)    ==    'n')    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
175	[BUG]  [BUGGY]  while(valueLen  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(valueLen  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(valueLen  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
176	[BUG]  [BUGGY]  while(value  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value  <  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
177	[BUG]  [BUGGY]  if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
178	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
179	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
180	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  1,  value.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  1,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  1,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
181	[BUG]  [BUGGY]  while(actualLength  >=  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >=  LONGFILE_GNU)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >=  LONGFILE_GNU)  {	  while(LONGFILE_TRUNCATE    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
182	[BUG]  [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)  ==  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
183	[BUG]  [BUGGY]  int  len  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(value.length);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(value.length);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
184	[BUG]  [BUGGY]  int  len  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(Keys.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
185	[BUG]  [BUGGY]  int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
186	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newlines  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
187	[BUG]  [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  len  =  key.length()  +  value.length()  /*  blank,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
188	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  empty,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  empty,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  empty,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
189	[BUG]  [BUGGY]  while  (line  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (line  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (line  <  actualLength  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
190	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  9)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.length()  >  9)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.length()  >  9)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
191	[BUG]  [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  <  actualLength  &&  key.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
192	[BUG]  [BUGGY]  while  (len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while  (len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while  (len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
193	[BUG]  [BUGGY]  while(actualLength  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  0  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
194	[BUG]  [BUGGY]  while(len  >  5  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  5  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  5  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
195	[BUG]  [BUGGY]  if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len);  }	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
196	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(len);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  w.write(len);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
197	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(value.length);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(value.length);	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
198	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(Keys.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
199	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
200	[BUG]  [BUGGY]  while(len!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len!=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
201	[BUG]  [BUGGY]  while(len!=  0  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len!=  0  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len!=  0  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
202	[BUG]  [BUGGY]  while(actualLength  >  LONGFILE_TRUNCATE  -  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  LONGFILE_TRUNCATE  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  LONGFILE_TRUNCATE  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
203	[BUG]  [BUGGY]  while(actualLength  >  LONGFILE_GNU  -  1)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  LONGFILE_GNU  -  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  LONGFILE_GNU  -  1)  {	  while(len    >    actualLength    -    1)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
204	[BUG]  [BUGGY]  while(len  >  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
205	[BUG]  [BUGGY]  while(actualLength  >  1)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  1)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
206	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  actualLength);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  actualLength);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  actualLength);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
207	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
208	[BUG]  [BUGGY]  while(actualLength  <  2  ||  actualLength  <  len)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  2  ||  actualLength  <  len)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  2  ||  actualLength  <  len)  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
209	[BUG]  [BUGGY]  while(actualLength  >  9)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  9)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  9)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
210	[BUG]  [BUGGY]  if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
211	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
212	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(Keys.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
213	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
214	[BUG]  [BUGGY]  if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
215	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
216	[BUG]  [BUGGY]  while(len  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  len  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength    >=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
217	[BUG]  [BUGGY]  w.write(value,  len);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(value,  len);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(value,  len);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
218	[BUG]  [BUGGY]  w.write(value  + "n ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(value  + "n ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(value  + "n ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
219	[BUG]  [BUGGY]  while(actualLength  >  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  LONGFILE_GNU)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  LONGFILE_GNU)  {	  while    (currentLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
220	[BUG]  [BUGGY]  while(actualLength  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  0  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
221	[BUG]  [BUGGY]  while(len  >=  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
222	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
223	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(currentLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(currentLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(currentLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
224	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.valueSet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.valueSet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.valueSet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
225	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  values.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  values.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  values.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
226	[BUG]  [BUGGY]  if(actualLength  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
227	[BUG]  [BUGGY]  if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
228	[BUG]  [BUGGY]  if(len  <  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  <  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  <  actualLength)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
229	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(value);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
230	[BUG]  [BUGGY]  int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
231	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.US_ASCII).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.US_ASCII).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.US_ASCII).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
232	[BUG]  [BUGGY]  while(len  <  =  MAX_VALUE  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  MAX_VALUE  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  MAX_VALUE  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
233	[BUG]  [BUGGY]  while(actualLength  <  =  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  =  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  =  len  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
234	[BUG]  [BUGGY]  while(actualLength  >  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {	  while    (len    <    actualLength    &&    line.getBytes(CharsetNames.UTF_8)!=    null)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
235	[BUG]  [BUGGY]  while(len  >=  4  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  4  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  4  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
236	[BUG]  [BUGGY]  while(len  >=  2  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  2  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  2  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
237	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while    (len    <    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
238	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
239	[BUG]  [BUGGY]  while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
240	[BUG]  [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(0)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  key!=  null  &&  value.charAt(0)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  key!=  null  &&  value.charAt(0)!=  '/')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
241	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
242	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  '/')  {	  while    (len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
243	[BUG]  [BUGGY]  w.write(value,  h.getValue());  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(value,  h.getValue());  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(value,  h.getValue());	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
244	[BUG]  [BUGGY]  w.write(key  + "=   "  +  value  + "n ");  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(key  + "=   "  +  value  + "n ");  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key  + "=   "  +  value  + "n ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
245	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.US_ASCII).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.US_ASCII).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.US_ASCII).length;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
246	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
247	[BUG]  [BUGGY]  while(actualLength  <  2  ||  actualLength  <  2)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  2  ||  actualLength  <  2)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  2  ||  actualLength  <  2)  {	  while    (actualLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
248	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  value);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  buffer.append(key,  value);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
249	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  buffer.append(key);  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    buffer.append(key);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
250	[BUG]  [BUGGY]  while(len  <  actualLength  &&  key.length()  >  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  key.length()  >  1)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  key.length()  >  1)  {	  while    (len    <    actualLength    &&    key.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
251	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	Integer  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(key);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
252	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(value  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(value  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
253	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
254	[BUG]  [BUGGY]  while(len  >  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
255	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
256	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(0,  value.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(0,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(0,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
257	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength,  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength,    value.length());    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
258	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  AND  newline  */;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  /*  blank,  equals  AND  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  /*  blank,  equals  AND  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
259	[BUG]  [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  key.length()  +  value.length()  *  3  /*  blank,  equals  and  newline  */;	  int    len    =    key.length()    +    value.length()    +    3    /*    blank,    equals    and    newline    */;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
260	[BUG]  [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  =  LONGFILE_TRUNCATE  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
261	[BUG]  [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  actualLength  &&  value!=  null  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
262	[BUG]  [BUGGY]  while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(value  <  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    key!=    null    &&    value.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
263	[BUG]  [BUGGY]  w.write(key,  newline);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  w.write(key,  newline);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	w.write(key,  newline);	  w.write(value);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
264	[BUG]  [BUGGY]  while(len!=  4  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len!=  4  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len!=  4  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
265	[BUG]  [BUGGY]  while(len!=  2  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len!=  2  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len!=  2  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength!=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
266	[BUG]  [BUGGY]  while(actualLength  <  100)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  100)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  100)  {	  while    (currentLength    <    len)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
267	[BUG]  [BUGGY]  while(len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while    (actualLength    >=    len    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
268	[BUG]  [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  =  LONGFILE_TRUNCATE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  =  LONGFILE_TRUNCATE  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
269	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
270	[BUG]  [BUGGY]  while(actualLength  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  while    (len    <    actualLength    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
271	[BUG]  [BUGGY]  while(len  >  8)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  8)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  8)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
272	[BUG]  [BUGGY]  while(len  >=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  0)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  0)  {	  while    (len    >    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
273	[BUG]  [BUGGY]  while(actualLength  >  100)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  >  100)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  >  100)  {	  while    (currentLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
274	[BUG]  [BUGGY]  while(len  >  currentLength)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  currentLength)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  currentLength)  {	  while    (currentLength    >    len)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
275	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  3);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  3);  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;  w.write(len  +  3);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    w.write(len);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
276	[BUG]  [BUGGY]  if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
277	[BUG]  [BUGGY]  if(line  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(line  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(line  ==  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    MAX_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
278	[BUG]  [BUGGY]  while(len  >  20  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  20  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  20  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
279	[BUG]  [BUGGY]  while(len  >  1  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  1  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  1  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
280	[BUG]  [BUGGY]  while(len  >  4  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  4  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  4  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
281	[BUG]  [BUGGY]  while(len  >  2  &&  key.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >  2  &&  key.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >  2  &&  key.charAt(actualLength  -  1)!=  'n')  {	  while(len    >    actualLength    &&    key.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
282	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  line.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    actualLength    &&    line.charAt(actualLength    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
283	[BUG]  [BUGGY]  while(actualLength  <  2  ||  actualLength  >  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(actualLength  <  2  ||  actualLength  >  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(actualLength  <  2  ||  actualLength  >  LONGFILE_TRUNCATE)  {	  while(actualLength    >    LONGFILE_TRUNCATE)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
284	[BUG]  [BUGGY]  while(len  >=  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  >=  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  >=  LONGFILE_TRUNCATE)  {	  while(LONGFILE_TRUNCATE    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
285	[BUG]  [BUGGY]  while(len  <  =  LONGFILE_TRUNCATE)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  LONGFILE_TRUNCATE)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  LONGFILE_TRUNCATE)  {	  while(LONGFILE_TRUNCATE    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
286	[BUG]  [BUGGY]  while(LONGFILE_TRUNCATE  >  len)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(LONGFILE_TRUNCATE  >  len)  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(LONGFILE_TRUNCATE  >  len)  {	  while(LONGFILE_TRUNCATE    >=    len)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
287	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
288	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  w.write(value);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  w.write(value);  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  w.write(value);  }	  if(actualLength    >    0)    {    for(int    i    =    0;    i    <    len;    i++)    {    w.write(value);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
289	[BUG]  [BUGGY]  while(len  <  =  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  while(len  <  =  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	while(len  <  =  actualLength  &&  key!=  null  &&  value.charAt(actualLength  -  1)!=  'n')  {	  while(len    <    =    actualLength)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
290	[BUG]  [BUGGY]  if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(line!=  null)  {  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(actualLength  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    if(actualLength    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
291	[BUG]  [BUGGY]  int  len  =  line.getBytes(key.length()).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  int  len  =  line.getBytes(key.length()).length;  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	int  len  =  line.getBytes(key.length()).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
292	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  <  =  0)  {  for(String  key  :  headers.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
293	[BUG]  [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  values.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;      [BUGGY]  if(actualLength  >  0)  {  for(String  key  :  values.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }  [BUGGY]            len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	474	474	1	replace	if(actualLength  >  0)  {  for(String  key  :  values.keySet())  {  line  =  key.substring(actualLength  +  value.length());  }	  if(actualLength    >    0)    {    for(String    key    :    headers.keySet())    {    line    =    key.substring(actualLength    +    value.length());    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
