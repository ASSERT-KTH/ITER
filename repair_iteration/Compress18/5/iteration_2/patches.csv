bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  writePaxHeaders(currName,  paxHeaders,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  paxHeaders,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  paxHeaders,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
2	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  bigNumberMode,  haveUnclosedEntry);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
3	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  currBytes);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  currBytes);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
4	[BUG]  [BUGGY]  writePaxHeaders(currName,  currBytes,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  currBytes,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  currBytes,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
5	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  currSize);  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  currSize);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  currSize);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode  +  1);  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode  +  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  bigNumberMode  +  1);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
7	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  bigNumberMode,  hasUnclosedEntry);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
8	[BUG]  [BUGGY]  currSize  =  1l;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  1l;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  1l;	  currSize    =    1L;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
9	[BUG]  [BUGGY]  currSize  -=  0;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  0;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  0;	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  currSize  -=  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  1;	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  currSize  -=  0l;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  0l;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  0l;	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  currSize  -=  2;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  2;	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  currSize  =  entry.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  +  1;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
14	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  2;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  2;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
15	[BUG]  [BUGGY]  currSize  =  recordSize  +  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  recordSize  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  recordSize  +  1;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
16	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  1L;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  1L;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
17	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  4;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  4;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
18	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  5;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  5;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  5;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
19	[BUG]  [BUGGY]  currSize  =  fileLength  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  fileLength  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  fileLength  +  1;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
20	[BUG]  [BUGGY]  currSize  =  fileLength  -  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  fileLength  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  fileLength  -  1;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
21	[BUG]  [BUGGY]  currSize  =  currBytes;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  currBytes;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  currBytes;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
22	[BUG]  [BUGGY]  currSize  =  longFileMode;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  longFileMode;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  longFileMode;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
23	[BUG]  [BUGGY]  currSize  =  entry.parseBigDecimal(entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigDecimal(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigDecimal(entryName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
24	[BUG]  [BUGGY]  currSize  =  entry.parseBigDecimal(currName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigDecimal(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigDecimal(currName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
25	[BUG]  [BUGGY]  currSize  =  entry.parseDirectory(entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseDirectory(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseDirectory(entryName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  currSize  =  entry.parseInteger(currName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseInteger(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseInteger(currName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
27	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  +  1;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
28	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  -  1;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
29	[BUG]  [BUGGY]  currSize  =  entry.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MIN_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MIN_VALUE;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
30	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  +  2;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
31	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  +  4;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  +  4;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
32	[BUG]  [BUGGY]  long  currSize  =  BigInteger.parseBigInteger(entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  long  currSize  =  BigInteger.parseBigInteger(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	long  currSize  =  BigInteger.parseBigInteger(entryName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
33	[BUG]  [BUGGY]  int  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
34	[BUG]  [BUGGY]  int  currSize  =  entry.parseBigInteger(currName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entry.parseBigInteger(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entry.parseBigInteger(currName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
35	[BUG]  [BUGGY]  int  currSize  =  entry.getSize();  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entry.getSize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entry.getSize();	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
36	[BUG]  [BUGGY]  int  currSize  =  entry.parseBigInteger(entryName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entry.parseBigInteger(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entry.parseBigInteger(entryName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
37	[BUG]  [BUGGY]  byte  currSize  =  BigInteger.parseBigInteger(entryName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  byte  currSize  =  BigInteger.parseBigInteger(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	byte  currSize  =  BigInteger.parseBigInteger(entryName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
38	[BUG]  [BUGGY]  char  currSize  =  BigInteger.parseBigInteger(entryName);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  char  currSize  =  BigInteger.parseBigInteger(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	char  currSize  =  BigInteger.parseBigInteger(entryName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
39	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  currName;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  currName;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  currName;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
40	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  hasUnclosedEntry;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
41	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  assemLen;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  assemLen;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  assemLen;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
42	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  hasUnclosedEntry  +  1;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
43	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry.getName();  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry.getName();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  hasUnclosedEntry.getName();	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
44	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  encoding);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  encoding);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(currName,  encoding);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
45	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currBytes);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(entryName,  currBytes);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
46	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(currName);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
47	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(encodedName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(encodedName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(encodedName);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
48	[BUG]  [BUGGY]  currSize  =  entry.getSize()  -  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  -  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  currSize  =  recordSize  -  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  recordSize  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  recordSize  -  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
51	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  -  2;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  -  2;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
52	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  /  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  /  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  /  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
53	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  -  1L;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  -  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  -  1L;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
55	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
56	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
57	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
58	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
59	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
60	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
61	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
62	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  currSize  =  0xff;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0xff;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0xff;	  currSize    =    0l;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  currSize  =  recordBuf.length;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  recordBuf.length;	  currSize    =    recordSize;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  4;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  /  4;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  |  BigInteger.MAX_VALUE  /  2;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
68	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
69	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
70	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
71	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  /  2;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  *  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  *  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  *  2;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  4;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  /  4;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2  +  1;  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  /  2  +  1;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  currSize  =  Integer.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MAX_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MAX_VALUE  +  1;	  currSize    =    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
76	[BUG]  [BUGGY]  currSize  =  Integer.MAX_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MAX_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MAX_VALUE  -  1;	  currSize    =    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
77	[BUG]  [BUGGY]  currSize  =  Integer.MAX_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MAX_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MAX_VALUE  /  2;	  currSize    =    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
78	[BUG]  [BUGGY]  currSize  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MAX_VALUE  |  Integer.MAX_VALUE;	  currSize    =    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
79	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigDecimal(currName,  hasUnclosedEntry);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigDecimal(currName,  haveUnclosedEntry);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
81	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  +  1;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
82	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  -  1;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
83	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  /  2;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
84	[BUG]  [BUGGY]  currSize  =  long.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  long.MIN_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  long.MIN_VALUE;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
85	[BUG]  [BUGGY]  currSize  =  Integer.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MIN_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MIN_VALUE  +  1;	  currSize    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  currSize  =  Integer.MIN_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MIN_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MIN_VALUE  -  1;	  currSize    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
87	[BUG]  [BUGGY]  currSize  =  Integer.MIN_VALUE  |  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MIN_VALUE  |  Integer.MAX_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MIN_VALUE  |  Integer.MAX_VALUE;	  currSize    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  currSize  =  Integer.MIN_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MIN_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MIN_VALUE  /  2;	  currSize    =    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  +  1;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
90	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  -  1;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
91	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  /  2;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
92	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  +  2;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
93	[BUG]  [BUGGY]  int  currSize  =  BigInteger.parseBigDecimal(entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  BigInteger.parseBigDecimal(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  BigInteger.parseBigDecimal(entryName);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
94	[BUG]  [BUGGY]  currSize  =  entryName.parseBigDecimal(BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigDecimal(BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigDecimal(BigInteger.MAX_VALUE);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
95	[BUG]  [BUGGY]  currSize  =  MAX_QUOTE  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  MAX_QUOTE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  MAX_QUOTE  +  1;	  currSize    =    MAX_QUOTE;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
96	[BUG]  [BUGGY]  currSize  =  MAX_QUOTE  -  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  MAX_QUOTE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  MAX_QUOTE  -  1;	  currSize    =    MAX_QUOTE;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
97	[BUG]  [BUGGY]  currSize  =  MAX_QUOTE  +  recordBuf.length();  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  MAX_QUOTE  +  recordBuf.length();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  MAX_QUOTE  +  recordBuf.length();	  currSize    =    MAX_QUOTE;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
98	[BUG]  [BUGGY]  currSize  =  MAX_QUOTE  +  recordBuf.length;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  MAX_QUOTE  +  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  MAX_QUOTE  +  recordBuf.length;	  currSize    =    MAX_QUOTE;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
99	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
100	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
101	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  currName))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  currName))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  currName))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
102	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
103	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  /  1;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  currSize  =  entry.size()  -  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.size()  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.size()  -  1;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
105	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  4;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  /  4;	  currSize    =    BigInteger.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2  +  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  /  2  +  1;	  currSize    =    BigInteger.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  *  2;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  *  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  *  2;	  currSize    =    BigInteger.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(currBytes);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(currBytes);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
109	[BUG]  [BUGGY]  currSize  =  entryName.parseBigDecimal(bigNumberMode);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigDecimal(bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigDecimal(bigNumberMode);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
110	[BUG]  [BUGGY]  currSize  =  entry.parseBigDecimal(bigNumberMode);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigDecimal(bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigDecimal(bigNumberMode);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
111	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(currBytes);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(currBytes);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
112	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(encoding);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(encoding);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
113	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
114	[BUG]  [BUGGY]  if(!entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
115	[BUG]  [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  buffer.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  buffer.writeRecord(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(entryName,  paxHeaders);  buffer.writeRecord(currBytes);	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
116	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  hasUnclosedEntry  =  true;  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  hasUnclosedEntry  =  true;  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  hasUnclosedEntry  =  true;  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
117	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  currSize  =  entry.getSize();  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  currSize  =  entry.getSize();  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  currSize  =  entry.getSize();  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
118	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  haveUnclosedEntry  =  true;  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  haveUnclosedEntry  =  true;  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  else  {  haveUnclosedEntry  =  true;  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
119	[BUG]  [BUGGY]  writePaxHeaders(encoding,  paxHeaders);  buffer.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(encoding,  paxHeaders);  buffer.writeRecord(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(encoding,  paxHeaders);  buffer.writeRecord(currBytes);	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
120	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  2;	  currSize    =    BigDecimal.MAX_VALUE    +    2;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
121	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  |  BigDecimal.MAX_VALUE  +  1;	  currSize    =    BigDecimal.MAX_VALUE    +    2;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
122	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  currSize);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  currSize);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  currSize);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
123	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  haveUnclosedEntry);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
124	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  hasUnclosedEntry);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
125	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  encoding);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  encoding);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  encoding);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
126	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  file);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  file);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  file);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
127	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  recordSize);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  recordSize);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  recordSize);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
128	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigInteger(currName,  hasUnclosedEntry);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
129	[BUG]  [BUGGY]  int  currSize  =  BigInteger.parseBigInteger(currName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  BigInteger.parseBigInteger(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  BigInteger.parseBigInteger(currName);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
130	[BUG]  [BUGGY]  currSize  =  0x7FF;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0x7FF;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0x7FF;	  currSize    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
131	[BUG]  [BUGGY]  currSize  =  0x7f;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0x7f;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0x7f;	  currSize    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
132	[BUG]  [BUGGY]  currSize  =  0x7F  ||  hasUnclosedEntry;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0x7F  ||  hasUnclosedEntry;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0x7F  ||  hasUnclosedEntry;	  currSize    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
133	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(currName,  hasUnclosedEntry);	  currSize    =    entry.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
134	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(currName,  haveUnclosedEntry);	  currSize    =    entry.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
135	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(currName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(currName,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(currName,  bigNumberMode);	  currSize    =    entry.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
136	[BUG]  [BUGGY]  currSize  -=  recordBuf.length;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  recordBuf.length;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
137	[BUG]  [BUGGY]  currSize  -=  5;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  5;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  5;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
138	[BUG]  [BUGGY]  currSize  -=  8;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  8;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  8;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
139	[BUG]  [BUGGY]  currSize  -=  recordBuf;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  recordBuf;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  recordBuf;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
140	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  /  1;	  currSize    =    BigInteger.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  +  2;	  currSize    =    BigInteger.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  4;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  +  4;	  currSize    =    BigInteger.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
143	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName,  hasUnclosedEntry);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
144	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName,  haveUnclosedEntry);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
145	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName)+  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName)+  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName)+  1;	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
146	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName,  0);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
147	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName  +  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName  +  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName  +  1);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
148	[BUG]  [BUGGY]  currSize  =  entry.MIN_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MIN_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MIN_VALUE  -  1;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
149	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  1;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  /  1;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
150	[BUG]  [BUGGY]  currSize  =  entry.getUpperBound();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getUpperBound();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getUpperBound();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
151	[BUG]  [BUGGY]  currSize  =  entry.getSize()  +  4;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  +  4;	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
152	[BUG]  [BUGGY]  currSize  =  entry.getSize()  -  4;  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  -  4;	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
153	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
154	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
155	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  paxHeaders))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
156	[BUG]  [BUGGY]  b.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  b.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	b.writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
157	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
158	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
159	[BUG]  [BUGGY]  currSize  =  entry.size()  +  1;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.size()  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.size()  +  1;	  currSize    =    entry.size();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
160	[BUG]  [BUGGY]  currSize  =  entry.size()  -  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.size()  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.size()  -  2;	  currSize    =    entry.size();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
161	[BUG]  [BUGGY]  currSize  =  entry.size()  -  4;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.size()  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.size()  -  4;	  currSize    =    entry.size();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
162	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  haveUnclosedEntry);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
163	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(currName,  paxHeaders,  hasUnclosedEntry);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
164	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  currBytes);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(currName,  currBytes);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
165	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(currName,  paxHeaders);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
166	[BUG]  [BUGGY]  currSize  =  encoding;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  encoding;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  encoding;	  currSize    =    bigNumberMode;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
167	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(currName,  entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(currName,  entryName);	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
168	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeadersForNonAsciiNames(entryName);	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
169	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
170	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  +  1;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
171	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  -  1;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
172	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  /  2;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(entryName,  paxHeaders);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
174	[BUG]  [BUGGY]  writePaxHeaders(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  hasUnclosedEntry);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
175	[BUG]  [BUGGY]  writePaxHeaders(currName,  paxHeaders,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  paxHeaders,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  paxHeaders,  haveUnclosedEntry);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
176	[BUG]  [BUGGY]  writePaxHeaders(currName,  currBytes);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  currBytes);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
177	[BUG]  [BUGGY]  writePaxHeaders(currName,  paxHeaders,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  paxHeaders,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  paxHeaders,  hasUnclosedEntry);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
178	[BUG]  [BUGGY]  _writePaxHeaders(currName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  _writePaxHeaders(currName,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	_writePaxHeaders(currName,  paxHeaders);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
179	[BUG]  [BUGGY]  writePaxHeaders(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  haveUnclosedEntry);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
180	[BUG]  [BUGGY]  currSize  =  BIGNUMBER_POSIX  +  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BIGNUMBER_POSIX  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BIGNUMBER_POSIX  +  1;	  currSize    =    BIGNUMBER_POSIX;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
181	[BUG]  [BUGGY]  currSize  =  BigNUMBER_POSIX  +  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigNUMBER_POSIX  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigNUMBER_POSIX  +  1;	  currSize    =    BIGNUMBER_POSIX;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
182	[BUG]  [BUGGY]  currSize  =  BIGNUMBER_LONGFILE_GNU;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BIGNUMBER_LONGFILE_GNU;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BIGNUMBER_LONGFILE_GNU;	  currSize    =    BIGNUMBER_POSIX;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
183	[BUG]  [BUGGY]  currSize  =  BIGNUMBER_GNU;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BIGNUMBER_GNU;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BIGNUMBER_GNU;	  currSize    =    BIGNUMBER_POSIX;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
184	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
185	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
186	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  currName);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
187	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  currBytes);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
188	[BUG]  [BUGGY]  currSize  =  entry.parseBigDecimal(BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigDecimal(BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigDecimal(BigInteger.MAX_VALUE);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
189	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  2;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  -  2;	  currSize    =    BigInteger.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
190	[BUG]  [BUGGY]  currSize  =  entry.length;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.length;	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
191	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU.length  +  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU.length  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU.length  +  1;	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
192	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU.length  -  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU.length  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU.length  -  1;	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
193	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU.length  -  2;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU.length  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU.length  -  2;	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
194	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU.length  -  4;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU.length  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU.length  -  4;	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
195	[BUG]  [BUGGY]  currSize  =  entry.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MIN_VALUE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MIN_VALUE  +  1;	  currSize    =    BigInteger.MIN_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
196	[BUG]  [BUGGY]  currSize  =  bigNumberMode  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  bigNumberMode  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  bigNumberMode  +  1;	  currSize    =    bigNumberMode;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
197	[BUG]  [BUGGY]  currSize  =  bigNumberMode  -  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  bigNumberMode  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  bigNumberMode  -  1;	  currSize    =    bigNumberMode;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
198	[BUG]  [BUGGY]  currSize  =  entry.recordSize();  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.recordSize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.recordSize();	  currSize    =    entry.size();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
199	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  0;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  0;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  0;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
200	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  8;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  8;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  8;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
201	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  1L;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  +  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  +  1L;	  currSize    =    BigInteger.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
202	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  *  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  *  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  *  1;	  currSize    =    BigInteger.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
203	[BUG]  [BUGGY]  currSize  -=  4L;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  4L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  4L;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
204	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  1L;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  -  1L;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
205	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  2;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  -  2;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
206	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  *  1;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  *  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  *  1;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
207	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  -  4;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
208	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigInteger(currName,  recordBuf);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
209	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigInteger(currName,  0);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
210	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName  -  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName  -  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigInteger(currName  -  1);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
211	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2L;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  /  2L;	  currSize    =    BigInteger.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
212	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2  +  recordBuf.length;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  /  2  +  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  /  2  +  recordBuf.length;	  currSize    =    BigInteger.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
213	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(encoding,  paxHeaders);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
214	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
215	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
216	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
217	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
218	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
219	[BUG]  [BUGGY]  if(entry.getDirectory()!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.getDirectory()!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.getDirectory()!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
220	[BUG]  [BUGGY]  if(entry.getDirectory()  ==  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.getDirectory()  ==  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.getDirectory()  ==  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
221	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  buffer.writeRecord(currBytes);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  buffer.writeRecord(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  buffer.writeRecord(currBytes);	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
222	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2L;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  /  2L;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
223	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2  +  recordBuf.length;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  /  2  +  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  /  2  +  recordBuf.length;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
224	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  -  4;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
225	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  +  2;	  currSize    =    BigInteger.MIN_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
226	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  1L;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  +  1L;	  currSize    =    BigInteger.MIN_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
227	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  4;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  +  4;	  currSize    =    BigInteger.MIN_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
228	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2  +  1;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  /  2  +  1;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
229	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2  +  recordBuf.length;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2  +  recordBuf.length;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  /  2  +  recordBuf.length;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
230	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2L;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  /  2L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  /  2L;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
231	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  +  1L;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  +  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  +  1L;	  currSize    =    BigDecimal.MAX_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
232	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  2;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  -  2;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
233	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  1L;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  -  1L;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
234	[BUG]  [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MIN_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MIN_VALUE  -  4;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
235	[BUG]  [BUGGY]  int  currSize  =  Integer.parseInteger(currName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  Integer.parseInteger(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  Integer.parseInteger(currName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
236	[BUG]  [BUGGY]  int  currSize  =  Integer.parseInt(entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  Integer.parseInt(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  Integer.parseInt(entryName);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
237	[BUG]  [BUGGY]  int  currSize  =  entryName.parseBigInteger(BigInteger.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entryName.parseBigInteger(BigInteger.MIN_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entryName.parseBigInteger(BigInteger.MIN_VALUE);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
238	[BUG]  [BUGGY]  writePaxHeaders(encoding,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(encoding,  paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(encoding,  paxHeaders);	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
239	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
240	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
241	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(entryName);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  buffer.writeRecord(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
242	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  haveUnclosedEntry  +  1;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
243	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  true;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  true;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  true;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
244	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  0;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  0;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  0;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
245	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry  =  true;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  hasUnclosedEntry  =  true;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  hasUnclosedEntry  =  true;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
246	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  BigDecimal.ZERO;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  BigDecimal.ZERO;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  BigDecimal.ZERO;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
247	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  false;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  false;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU,  haveUnclosedEntry  =  false;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
248	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName,  recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName,  recordBuf);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
249	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currBytes);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currBytes);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currBytes);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
250	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName  -  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(currName  -  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(currName  -  1);	  currSize    =    BigInteger.parseBigDecimal(currName);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
251	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  1L;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  1L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  -  1L;	  currSize    =    BigInteger.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
252	[BUG]  [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.MAX_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.MAX_VALUE  -  4;	  currSize    =    BigInteger.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
253	[BUG]  [BUGGY]  currSize  =  1)  {  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  1)  {  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  1)  {	  currSize    =    1L;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
254	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(arrayBuf,  BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(arrayBuf,  BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(arrayBuf,  BigInteger.MAX_VALUE);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
255	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  0);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  0);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
256	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(BigInteger.MAX_VALUE,  0);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
257	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  |  BigDecimal.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  |  BigDecimal.MAX_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  |  BigDecimal.MAX_VALUE;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
258	[BUG]  [BUGGY]  currSize  =  BigDecimal.BIG_SIZE;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.BIG_SIZE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.BIG_SIZE;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
259	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  recordSize;  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  recordSize;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  +  recordSize;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
260	[BUG]  [BUGGY]  currSize  =  fileLen  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  fileLen  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  fileLen  +  1;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
261	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  +  4;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  +  4;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
262	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigDecimal(currName);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
263	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(urnName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(urnName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(urnName);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
264	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(recordBuf);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(recordBuf);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
265	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(arrayName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(arrayName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(arrayName);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
266	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
267	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
268	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(currName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeadersForNonAsciiNames(currName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
269	[BUG]  [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  +  5;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MAX_VALUE  +  5;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MAX_VALUE  +  5;	  currSize    =    BigDecimal.MAX_VALUE    +    4;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
270	[BUG]  [BUGGY]  currSize  =  entry.getDirectory();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getDirectory();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getDirectory();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
271	[BUG]  [BUGGY]  currSize  =  entry.getDirectorySize();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getDirectorySize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getDirectorySize();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
272	[BUG]  [BUGGY]  currSize  =  entry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getRecordSize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getRecordSize();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
273	[BUG]  [BUGGY]  buffer.writeDirectory(recordBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(recordBuf);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
274	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  fileEncoding);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  fileEncoding);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  fileEncoding);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
275	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes,  fileSize);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes,  fileSize);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes,  fileSize);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
276	[BUG]  [BUGGY]  currSize  =  entry.parseDirectory(currName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseDirectory(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseDirectory(currName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
277	[BUG]  [BUGGY]  currSize  =  entry.parseByteBuffer(entryName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseByteBuffer(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseByteBuffer(entryName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
278	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigInteger(currName,  recordBuf);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
279	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigDecimal(currName,  recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigDecimal(currName,  recordBuf);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
280	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigInteger(currName,  0);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
281	[BUG]  [BUGGY]  currSize  =  recordLen;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  recordLen;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  recordLen;	  currSize    =    recordSize;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
282	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
283	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  currName);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(arrayBuf,  currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(arrayBuf,  currName);	  writePaxHeadersForNonAsciiNames(currName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
284	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  hasUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
285	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  hasUnclosedEntry);	  writePaxHeadersForNonAsciiNames(currName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
286	[BUG]  [BUGGY]  writePaxHeaders(currName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
287	[BUG]  [BUGGY]  writePaxHeaders(entryName,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(entryName,  encoding,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(entryName,  encoding,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
288	[BUG]  [BUGGY]  writePaxHeaders(arrayName,  encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(arrayName,  encoding,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(arrayName,  encoding,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
289	[BUG]  [BUGGY]  writePaxHeaders(encoding,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(encoding,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(encoding,  bigNumberMode);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
290	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  BIGNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  BIGNUMBER_POSIX);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  BIGNUMBER_POSIX);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
291	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  +  recordSize;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  +  recordSize;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  +  recordSize;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
292	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  +  4;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  +  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  +  4;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
293	[BUG]  [BUGGY]  currSize  =  Long.MIN_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MIN_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MIN_VALUE  +  2;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
294	[BUG]  [BUGGY]  currSize  =  0x3F;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0x3F;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0x3F;	  currSize    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
295	[BUG]  [BUGGY]  currSize  =  0x7L;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  0x7L;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  0x7L;	  currSize    =    0x7F;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
296	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(recordBuf);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(recordBuf);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
297	[BUG]  [BUGGY]  currSize  =  entryName.parseBigDecimal(arrayBuf,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigDecimal(arrayBuf,  bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigDecimal(arrayBuf,  bigNumberMode);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
298	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
299	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
300	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
301	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(currName,  paxHeaders))  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
302	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(currName,  recordBuf);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(currName,  recordBuf);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(currName,  recordBuf);	  currSize    =    entry.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
303	[BUG]  [BUGGY]  currSize  =  entry.getSize()  -  BigDecimal.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  -  BigDecimal.MIN_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  -  BigDecimal.MIN_VALUE;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
304	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  ||  bigNumberMode  ==  BIGNUMBER_POSIX;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  ||  bigNumberMode  ==  BIGNUMBER_POSIX;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  ||  bigNumberMode  ==  BIGNUMBER_POSIX;	  currSize    =    BigDecimal.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
305	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(currName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(currName);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
306	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigInteger(currName,  hasUnclosedEntry);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
307	[BUG]  [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.parseBigInteger(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.parseBigInteger(currName,  haveUnclosedEntry);	  currSize    =    BigDecimal.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
308	[BUG]  [BUGGY]  currSize  =  entry.getSize(),  haveUnclosedEntry;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize(),  haveUnclosedEntry;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize(),  haveUnclosedEntry;	  currSize    =    LONGFILE_GNU,    haveUnclosedEntry;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
309	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
310	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!addPaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry))  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
311	[BUG]  [BUGGY]  if(entry.getName().endsWith( "/ "))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(entryName);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.getName().endsWith( "/ "))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.getName().endsWith( "/ "))  {  writePaxHeadersForNonAsciiNames(entryName,  haveUnclosedEntry);  }  else  {  buffer.writeRecord(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName,    haveUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
312	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  /  2;	  currSize    =    BigDecimal.MAX_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
313	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigDecimal(entryName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigDecimal(entryName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigDecimal(entryName,  haveUnclosedEntry);	  currSize    =    BigInteger.parseBigDecimal(entryName);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
314	[BUG]  [BUGGY]  currSize  =  fileLen;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  fileLen;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  fileLen;	  currSize    =    fileLength;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
315	[BUG]  [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigDecimal.MIN_VALUE  +  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigDecimal.MIN_VALUE  +  2;	  currSize    =    BigDecimal.MAX_VALUE    +    2;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
316	[BUG]  [BUGGY]  currSize  =  entry.getLength();  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getLength();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getLength();	  currSize    =    LONGFILE_GNU.length;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
317	[BUG]  [BUGGY]  currSize  =  entry.getMIN_VALUE()  -  1;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getMIN_VALUE()  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getMIN_VALUE()  -  1;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
318	[BUG]  [BUGGY]  currSize  =  entry.min_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.min_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.min_VALUE  -  1;	  currSize    =    BigInteger.MIN_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
319	[BUG]  [BUGGY]  currSize  =  entryName  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName  +  1;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
320	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU  +  recordSize;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU  +  recordSize;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU  +  recordSize;	  currSize    =    LONGFILE_GNU    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
321	[BUG]  [BUGGY]  currSize  -=  recordSize;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  recordSize;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  recordSize;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
322	[BUG]  [BUGGY]  currSize  -=  3;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  3;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  3;	  currSize    -=    4;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
323	[BUG]  [BUGGY]  currSize  =  entry.parseDirectoryEntry(entryName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseDirectoryEntry(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseDirectoryEntry(entryName);	  currSize    =    entry.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
324	[BUG]  [BUGGY]  int  currSize  =  entryName.parseBigInteger(bigNumberMode);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entryName.parseBigInteger(bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entryName.parseBigInteger(bigNumberMode);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
325	[BUG]  [BUGGY]  int  currSize  =  entryName.parseInteger(BigInteger.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  int  currSize  =  entryName.parseInteger(BigInteger.MAX_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	int  currSize  =  entryName.parseInteger(BigInteger.MAX_VALUE);	  int    currSize    =    BigInteger.parseBigInteger(entryName);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
326	[BUG]  [BUGGY]  currSize  -=  LONGFILE_GNU;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  LONGFILE_GNU;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  LONGFILE_GNU;	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
327	[BUG]  [BUGGY]  currSize  -=  entry.getSize();  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  -=  entry.getSize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  -=  entry.getSize();	  currSize    -=    0L;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
328	[BUG]  [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  BigInteger.parseBigInteger(currName,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  BigInteger.parseBigInteger(currName,  haveUnclosedEntry);	  currSize    =    BigInteger.parseBigInteger(currName);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
329	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(bigNumberMode);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(bigNumberMode);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
330	[BUG]  [BUGGY]  currSize  =  entryName.parseBigInteger(0);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.parseBigInteger(0);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.parseBigInteger(0);	  currSize    =    entryName.parseBigInteger(bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
331	[BUG]  [BUGGY]  currSize  =  entryName.MAX_VALUE  -  1;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entryName.MAX_VALUE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entryName.MAX_VALUE  -  1;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
332	[BUG]  [BUGGY]  currSize  =  entry.maxIntValue  -  1;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.maxIntValue  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.maxIntValue  -  1;	  currSize    =    BigDecimal.MAX_VALUE    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
333	[BUG]  [BUGGY]  currSize  =  entry.getCurrentSize();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getCurrentSize();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getCurrentSize();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
334	[BUG]  [BUGGY]  currSize  =  entry.getBytes();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getBytes();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getBytes();	  currSize    =    entry.getSize();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
335	[BUG]  [BUGGY]  currSize  =  LONGFILE_TRUNCATE  +  1;  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_TRUNCATE  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_TRUNCATE  +  1;	  currSize    =    LONGFILE_TRUNCATE;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
336	[BUG]  [BUGGY]  currSize  =  LONGFILE_TRUNCATE  -  1;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_TRUNCATE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_TRUNCATE  -  1;	  currSize    =    LONGFILE_TRUNCATE;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
337	[BUG]  [BUGGY]  currSize  =  entry.MAX_VALUE  -  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MAX_VALUE  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MAX_VALUE  -  2;	  currSize    =    entry.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
338	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  haveUnclosedEntry);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
339	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
340	[BUG]  [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entry.isDirectory())  {  writePaxHeaders(currName,  encoding,  bigNumberMode);  }	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
341	[BUG]  [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode  ==  BIGNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeaders(currName,  encoding,  bigNumberMode  ==  BIGNUMBER_POSIX);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeaders(currName,  encoding,  bigNumberMode  ==  BIGNUMBER_POSIX);	  writePaxHeaders(currName,    encoding,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
342	[BUG]  [BUGGY]  currSize  =  entry.MIN_VALUE  /  2;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.MIN_VALUE  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.MIN_VALUE  /  2;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
343	[BUG]  [BUGGY]  currSize  =  entry.getSize()  /  2;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getSize()  /  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getSize()  /  2;	  currSize    =    BigInteger.MIN_VALUE    /    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
344	[BUG]  [BUGGY]  currSize  =  Integer.MAX_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Integer.MAX_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Integer.MAX_VALUE  -  4;	  currSize    =    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
345	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  -  2;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  -  2;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  -  2;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
346	[BUG]  [BUGGY]  currSize  =  Long.MAX_VALUE  -  4;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  Long.MAX_VALUE  -  4;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  Long.MAX_VALUE  -  4;	  currSize    =    Long.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
347	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
348	[BUG]  [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(entryName!=  null)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
349	[BUG]  [BUGGY]  currSize  =  LONGFILE_GNU.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  LONGFILE_GNU.MIN_VALUE;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  LONGFILE_GNU.MIN_VALUE;	  currSize    =    Long.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
350	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
351	[BUG]  [BUGGY]  if(!arrayPaxHeadersForNonAsciiNames)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!arrayPaxHeadersForNonAsciiNames)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!arrayPaxHeadersForNonAsciiNames)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
352	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
353	[BUG]  [BUGGY]  if(!arrayPaxHeaders.contains(entryName))  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!arrayPaxHeaders.contains(entryName))  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!arrayPaxHeaders.contains(entryName))  {  writePaxHeaders(currName,  paxHeaders);  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    buffer.writeRecord(currBytes);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
354	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
355	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
356	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
357	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  haveUnclosedEntry);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
358	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
359	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  else  {  buffer.writeRecord(currName);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
360	[BUG]  [BUGGY]  currSize  =  entry.getLimit();  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getLimit();  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getLimit();	  currSize    =    1L;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
361	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeadersForNonAsciiNames(entryName,  hasUnclosedEntry);  }	  writePaxHeadersForNonAsciiNames(entryName,    hasUnclosedEntry);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
362	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  currName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  currName);	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
363	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
364	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeadersForNonAsciiNames(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeadersForNonAsciiNames(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
365	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
366	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
367	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
368	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(!hasUnclosedEntry)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(currBytes);  }	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
369	[BUG]  [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	if(paxHeaders!=  null)  {  writePaxHeaders(currName,  paxHeaders);  }  else  {  buffer.writeRecord(recordBuf);  }	  writePaxHeaders(currName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
370	[BUG]  [BUGGY]  currSize  =  entry.getMIN_VALUE()  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.getMIN_VALUE()  +  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.getMIN_VALUE()  +  1;	  currSize    =    BigInteger.MIN_VALUE    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
371	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes  +  1);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes  +  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes  +  1);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
372	[BUG]  [BUGGY]  buffer.writeDirectory(entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(entryName);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(entryName);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
373	[BUG]  [BUGGY]  buffer.writeDirectory(currBytes  -  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  buffer.writeDirectory(currBytes  -  1);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	buffer.writeDirectory(currBytes  -  1);	  buffer.writeDirectory(currBytes);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
374	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  hasUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  hasUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  hasUnclosedEntry);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
375	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  haveUnclosedEntry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  haveUnclosedEntry);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MAX_VALUE,  haveUnclosedEntry);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
376	[BUG]  [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  entry.parseBigInteger(BigInteger.MIN_VALUE);  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  entry.parseBigInteger(BigInteger.MIN_VALUE);	  currSize    =    entryName.parseBigInteger(BigInteger.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
377	[BUG]  [BUGGY]  currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  LONGFILE_TRUNCATE  -  1;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  LONGFILE_TRUNCATE  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  hasUnclosedEntry?  LONGFILE_GNU  :  LONGFILE_TRUNCATE  -  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
378	[BUG]  [BUGGY]  currSize  =  hasUnclosedEntry.getSize()  -  1;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      writePaxHeaders(entryName,  paxHeaders);  }  entry.writeEntryHeader(recordBuf,  encoding,  bigNumberMode  ==  BIGNUMBER_STAR);  buffer.writeRecord(recordBuf);  currBytes  =  0;  if  (entry.isDirectory())  {      [BUGGY]  currSize  =  hasUnclosedEntry.getSize()  -  1;  [BUGGY]      }  else  {  currSize  =  entry.getSize();  }  currName  =  entryName;  haveUnclosedEntry  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.5773502691896258	324	324	1	replace	currSize  =  hasUnclosedEntry.getSize()  -  1;	  currSize    =    LONGFILE_GNU    -    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
