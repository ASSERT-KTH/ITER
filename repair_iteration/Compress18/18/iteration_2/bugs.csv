bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.values())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.values())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.values())  {	  for    (Map.Entry    <    String,    String>    h    :    headers.values())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.headers.values())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.headers.values())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  this.headers.values())  {	  for    (Map.Entry    <    String,    String>    h    :    headers.values())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.keySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.keySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.keySet())  {	  for(Map.Entry    <    String,    String>    h    :    headers.keySet())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.headers.keySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.headers.keySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  this.headers.keySet())  {	  for(Map.Entry    <    String,    String>    h    :    headers.keySet())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  for(Entry  <  String,  String>  h  :  pex.entrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Entry  <  String,  String>  h  :  pex.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Entry  <  String,  String>  h  :  pex.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  paxHeaders.entrySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  paxHeaders.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  paxHeaders.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  For(Map.Entry  <  String,  String>  h  :  pex.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For(Map.Entry  <  String,  String>  h  :  pex.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For(Map.Entry  <  String,  String>  h  :  pex.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.getKey())  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.getKey())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.getKey())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {	  for    (Map.Entry    <    String,    String>    entry    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  for  (Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for  (Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for  (Map.Entry  <  String,  String>  entry  :  headers.keySet())  {	  for    (Map.Entry    <    String,    String>    entry    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  this.headers.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  this.headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  h  :  this.headers.entrySet())  {	  For    (Map.Entry    <    String,    String>    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  headers.keySet())  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  headers.keySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  h  :  headers.keySet())  {	  For    (Map.Entry    <    String,    String>    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
13	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.headers())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.headers())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.headers())  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.headers.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.headers.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.entrySet()))  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.entrySet()))  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.entrySet()))  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.size()))  {  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.size()))  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  new  HashMap  <  String,  String>(this.headers.size()))  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  this.headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  :  this.headers.entrySet())  {	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
18	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.values())  {	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  pex.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  pex.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  :  pex.entrySet())  {	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  w.write(entryName);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write(entryName);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write(entryName);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  w.write('n');  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  pex.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  Entry  <  K,  V>  entry  =  pex.entrySet().iterator().next();  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	Entry  <  K,  V>  entry  =  pex.entrySet().iterator().next();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  Writer  w  =  new  Writer(w,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  Writer  w  =  new  Writer(w,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	Writer  w  =  new  Writer(w,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
24	[BUG]  [BUGGY]  w.append(entryName);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.append(entryName);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.append(entryName);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
25	[BUG]  [BUGGY]  w.append(entryName).append('n');  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.append(entryName).append('n');  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.append(entryName).append('n');	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  w.append('n');  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.append('n');  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.append('n');	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  w.write('n');  name  =  pex.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  name  =  pex.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');  name  =  pex.substring(0,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(pax);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(pax);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(pax);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(pex);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(headers);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(entryName);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  names.entrySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  names.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  names.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  headers.entries())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  headers.entries())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  headers.entries())  {	  for(Map.Entry    <    String,    String>    h    :    headers.keySet())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  headers.values())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  h  :  headers.values())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  h  :  headers.values())  {	  For    (Map.Entry    <    String,    String>    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  key  :  headers.entrySet())  {  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  key  :  headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  key  :  headers.entrySet())  {	  For    (Map.Entry    <    String,    String>    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  name.entrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  name.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  name.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.entries())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  pex.entries())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  pex.entries())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.getEntrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.getEntrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.getEntrySet())  {	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  Entry  h  =  pex.getEntry(entryName);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  Entry  h  =  pex.getEntry(entryName);  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	Entry  h  =  pex.getEntry(entryName);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  Integer  h  =  pex.getIntValue();  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  Integer  h  =  pex.getIntValue();  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	Integer  h  =  pex.getIntValue();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers).entrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers).entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers).entrySet())  {	  for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  pex.entrySet())  {  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  pex  :  pex.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  pex  :  pex.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.pex.entrySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  this.pex.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  this.pex.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    pex.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  For  (Map.Entry  <  String,  String>  entry  h  :  headers.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  For  (Map.Entry  <  String,  String>  entry  h  :  headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	For  (Map.Entry  <  String,  String>  entry  h  :  headers.entrySet())  {	  For    (Map.Entry    <    String,    String>    h    :    headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  h  :  this.headers.entrySet())  {  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  entry  h  :  this.headers.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  entry  h  :  this.headers.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  h  :  entryNames.entrySet())  {  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  name  =     "./PaxHeaders.X/   "  +  stripTo7Bits(entryName);    if  (name.length()  >=  TarConstants.NAMELEN)  {  name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();    [BUGGY]  for(Map.Entry  <  String,  String>  h  :  entryNames.entrySet())  {  [BUGGY]    String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {    [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	466	466	1	replace	for(Map.Entry  <  String,  String>  h  :  entryNames.entrySet())  {	  for(Map.Entry    <    String,    String>    h    :    this.headers.entrySet())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
