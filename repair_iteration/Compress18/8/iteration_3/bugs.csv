bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ".next();  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ".next();  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "   "  +  key  + "= "  +  value  + "n ".next();	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".n   ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  line  =  len  +  1  + "   "  +  key  + "= "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  + "   "  +  key  + "= "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  + "   "  +  key  + "= "  +  value  + "n ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".n   ";    	non-compiled	[CE]  <identifier>  expected	19	None	replace
3	[BUG]  [BUGGY]  line  =  len  +  key  + "= "  +  value  + ",  actualLength= ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  key  + "= "  +  value  + ",  actualLength= ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  key  + "= "  +  value  + ",  actualLength= ";	  line    =    len    +    key    +   "=   "   "    +    value    +   "   "   ";    	non-compiled	[CE]  <identifier>  expected	31	None	replace
4	[BUG]  [BUGGY]  line  =  len  +  1  + "=   "  +  key  + "n ";  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  + "=   "  +  key  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  + "=   "  +  key  + "n ";	  line    =    len    +    1    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  line  =  len  +  1  +  key  + "= "  +  value  +   "n ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  +  key  + "= "  +  value  +   "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  +  key  + "= "  +  value  +   "n ";	  line    =    len    +    1    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  line  =  len  +  1  + "= "  +  key  + "NonAsciiNames   ";  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  + "= "  +  key  + "NonAsciiNames   ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  + "= "  +  key  + "NonAsciiNames   ";	  line    =    len    +    1    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  line  =  len  +  1  + "= "  +  key  +   "NonAsciiNamesn ";  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  + "= "  +  key  +   "NonAsciiNamesn ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  + "= "  +  key  +   "NonAsciiNamesn ";	  line    =    len    +    1    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  Len  =  w.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  w.getBytes(CharsetNames.UTF_8);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  w.getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(line);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(len);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "] ";  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "] ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "] ";	  line    =    len    +   "[   "    +    key    +   "=   "   "    +    value    +   "   "   ";    	non-compiled	[CE]  <identifier>  expected	20	None	replace
13	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "= ";  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "= ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "= ";	  line    =    len    +   "[   "    +    key    +   "=   "   "    +    value    +   "   "   ";    	non-compiled	[CE]  <identifier>  expected	20	None	replace
14	[BUG]  [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ",  actualLength;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ",  actualLength;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "   "  +  key  + "= "  +  value  + "n ",  actualLength;	  line    =    len    +   "       "    +    key    +   "=   "    +    value    +   ",n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
15	[BUG]  [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + ",null ";  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + ",null ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + ": "  +  key  + "= "  +  value  + ",null ";	  line    =    len    +   "       "    +    key    +   "=   "    +    value    +   ",n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
16	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ",null] ";  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ",null] ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + ",null] ";	  line    =    len    +   "       "    +    key    +   "=   "    +    value    +   ",n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
17	[BUG]  [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + ".n ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + ".n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + ": "  +  key  + "= "  +  value  + ".n ";	  line    =    len    +   ":   "    +    key    +   "=   "    +    value    +   ".no   ";    	non-compiled	[CE]  <identifier>  expected	28	None	replace
18	[BUG]  [BUGGY]  w.write(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(LONGFILE_GNU);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(LONGFILE_GNU);	  w.write(LONGFILE_TRUNCATE);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
19	[BUG]  [BUGGY]  w.write( "n ");  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write( "n ");  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write( "n ");	  w.write(LONGFILE_TRUNCATE);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
20	[BUG]  [BUGGY]  w.write(value);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(value);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(value);	  w.write(LONGFILE_TRUNCATE);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
21	[BUG]  [BUGGY]  w.write(line,  0,  len);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line,  0,  len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line,  0,  len);	  w.write(LONGFILE_TRUNCATE);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
22	[BUG]  [BUGGY]  line  =  len  +  1  +   "=n   "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  1  +   "=n   "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  1  +   "=n   "  +  value  + "n ";	  line    =    len    +    key    +   "=n   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	27	None	replace
23	[BUG]  [BUGGY]  w.write(key,  len);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key,  len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key,  len);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  w.write(entryName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(entryName);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(entryName);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  w.write(line,  len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line,  len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line,  len);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  w.write('n',  len);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n',  len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n',  len);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	24	None	replace
27	[BUG]  [BUGGY]  w.write('n'  +  len);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n'  +  len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n'  +  len);	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	24	None	replace
28	[BUG]  [BUGGY]  w.write('N');  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('N');  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('N');	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	24	None	replace
29	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  w.toString().getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  w.toString().getBytes(CharsetNames.UTF_8);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  w.toString().getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8)+  1;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8)+  1;	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "](actualLength= "  +  actualLength  + ") ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "](actualLength= "  +  actualLength  + ") ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "](actualLength= "  +  actualLength  + ") ";	  line    =    len    +   "[   "    +    key    +   "=   "    +    value    +   "]n   ";    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ".no ";  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ".no ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + ".no ";	  line    =    len    +   "n   "    +    key    +   "=   "    +    value    +   ".no   ";    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  w.write(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(LONGFILE_TRUNCATE);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
37	[BUG]  [BUGGY]  w.write(LONGFILE_GNU);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(LONGFILE_GNU);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(LONGFILE_GNU);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(LONGFILE_TRUNCATE);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
38	[BUG]  [BUGGY]  w.write(value);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(value);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(value);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(LONGFILE_TRUNCATE);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
39	[BUG]  [BUGGY]  w.write(len);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(len);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(len);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(LONGFILE_TRUNCATE);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
40	[BUG]  [BUGGY]  w.write(line,  actualLength);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line,  actualLength);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line,  actualLength);	  w.write(len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
41	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
42	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
43	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
44	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	writePaxHeadersForNonAsciiNames(line,  headers);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
45	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsci  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsci	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
46	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  addPaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
47	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
48	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	writePaxHeadersForNonAsciiNames(line);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
49	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
50	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
51	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
52	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsci  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  addPaxHeadersForNonAsci	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
53	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  out.write(line);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  out.write(line);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  out.write(line);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
54	[BUG]  [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ".   ";  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n ".   ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "   "  +  key  + "= "  +  value  + "n ".   ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
55	[BUG]  [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + "n ".   ";  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + "n ".   ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "n "  +  key  + "= "  +  value  + "n ".   ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
56	[BUG]  [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n. ";  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "   "  +  key  + "= "  +  value  + "n. ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "   "  +  key  + "= "  +  value  + "n. ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + "n. ";  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + "n. ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "n "  +  key  + "= "  +  value  + "n. ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   ".   ";    	non-compiled	[CE]  <identifier>  expected	18	None	replace
58	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
60	[BUG]  [BUGGY]  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
61	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
62	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
63	[BUG]  [BUGGY]  w.write(key,  len);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key,  len);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key,  len);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
64	[BUG]  [BUGGY]  w.write( "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write( "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write( "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
65	[BUG]  [BUGGY]  w.write(key  + "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key  + "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key  + "n ");  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
67	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
68	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
69	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsci  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsci	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
70	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName,  headers);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName,  headers);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(entryName,  headers);	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
71	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "null ";  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "null ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "null ";	  line    =    len    +   "[   "    +    key    +   "==   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	21	None	replace
72	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "no   ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "no   ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "no   ";	  line    =    len    +   "[   "    +    key    +   "==   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	21	None	replace
73	[BUG]  [BUGGY]  w.write('#');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('#');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('#');  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
74	[BUG]  [BUGGY]  w.write('N');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('N');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('N');  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
75	[BUG]  [BUGGY]  w.write('0');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('0');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('0');  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
76	[BUG]  [BUGGY]  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
77	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);	  len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  Len  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  w.getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);	  len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(key);	  len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;  w.write(value);	  len    =    line.getBytes(CharsetNames.UTF_8).length;    w.write(line);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
82	[BUG]  [BUGGY]  line  =  len  + "( "  +  key  + "= "  +  value  + ",  actualLength= ";  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "( "  +  key  + "= "  +  value  + ",  actualLength= ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "( "  +  key  + "= "  +  value  + ",  actualLength= ";	  line    =    len    +   "(   "    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  line  =  len  + "/ "  +  key  + "== "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "/ "  +  key  + "== "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "/ "  +  key  + "== "  +  value  + "n ";	  line    =    len    +   "/   "    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
84	[BUG]  [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  w.getBytes(CharsetNames.UTF_8).length;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
87	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(line);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(line);	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames(headers);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames(headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  >  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  addPaxHeadersForNonAsciiNames(headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
89	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(entryName);	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
90	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ".next ";  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + ".next ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + ".next ";	  line    =    len    +   "[   "    +    key    +   "=   "    +    value    +   ".n   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
91	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= " "  +  value  + " ".n ";  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= " "  +  value  + " ".n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= " "  +  value  + " ".n ";	  line    =    len    +   "[   "    +    key    +   "=   "    +    value    +   ".n   ";    	non-compiled	[CE]  <identifier>  expected	16	None	replace
92	[BUG]  [BUGGY]  line  =  len  +  key  + "=' "  +  value  + "'.n ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  key  + "=' "  +  value  + "'.n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  key  + "=' "  +  value  + "'.n ";	  line    =    len    +    key    +   "=   "    +    value    +   ".n   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
93	[BUG]  [BUGGY]  line  =  len  +  key  + "=   "  +  value  + "n ".length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  key  + "=   "  +  value  + "n ".length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  key  + "=   "  +  value  + "n ".length;	  line    =    len    +    key    +   "=   "    +    value    +   ".n   ";    	non-compiled	[CE]  <identifier>  expected	14	None	replace
94	[BUG]  [BUGGY]  if(len  ==  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  ==  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  ==  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
95	[BUG]  [BUGGY]  if(len!=  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len!=  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len!=  0)  {  w.write('n');  len  =  line.getBytes(CharsetNames.UTF_8).length;  }	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
96	[BUG]  [BUGGY]  w.write('[');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('[');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('[');  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
97	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= " "  +  value  + " "]n ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= " "  +  value  + " "]n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= " "  +  value  + " "]n ";	  line    =    len    +   "[   "    +    key    +   "=   "    +    value    +   "]n   ";    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "]nn ";  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "[ "  +  key  + "= "  +  value  + "]nn ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "[ "  +  key  + "= "  +  value  + "]nn ";	  line    =    len    +   "[   "    +    key    +   "=   "    +    value    +   "]n   ";    	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  line  =  len  + ": "  +  key  + "== "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + ": "  +  key  + "== "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + ": "  +  key  + "== "  +  value  + "n ";	  line    =    len    +   ":   "    +    key    +   "=   "    +    value    +   ".no   ";    	non-compiled	[CE]  <identifier>  expected	28	None	replace
100	[BUG]  [BUGGY]  line  =  len  + "( "  +  key  + "= " "  +  value  + " " ";  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "( "  +  key  + "= " "  +  value  + " " ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "( "  +  key  + "= " "  +  value  + " " ";	  line    =    len    +   "(   "    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	12	None	replace
101	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex);  }  else  {  writePaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
102	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(value);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(value);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8);  w.write(value);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
103	[BUG]  [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  w.getBytes(CharsetNames.UTF_8);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  w.getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
104	[BUG]  [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(len);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  len  =  line.getBytes(CharsetNames.UTF_8);  w.write(len);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	len  =  line.getBytes(CharsetNames.UTF_8);  w.write(len);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
106	[BUG]  [BUGGY]  if(len  ==  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  ==  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  ==  0)  {  w.write('n');  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
107	[BUG]  [BUGGY]  w.write(key  + "n ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key  + "n ");  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key  + "n ");	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
108	[BUG]  [BUGGY]  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(key,  value);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(key,  value);	  w.write(key);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
109	[BUG]  [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + ",n ";  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "n "  +  key  + "= "  +  value  + ",n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "n "  +  key  + "= "  +  value  + ",n ";	  line    =    len    +   "       "    +    key    +   "=   "    +    value    +   ",n   ";    	non-compiled	[CE]  <identifier>  expected	17	None	replace
110	[BUG]  [BUGGY]  w.write(len  +  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(len  +  1);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(len  +  1);	  w.write(len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
111	[BUG]  [BUGGY]  w.write(line,  'n');  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line,  'n');  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line,  'n');	  w.write('n');    	non-compiled	[CE]  <identifier>  expected	24	None	replace
112	[BUG]  [BUGGY]  line  =  len  + ": "  +  key  + ",  value= "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + ": "  +  key  + ",  value= "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + ": "  +  key  + ",  value= "  +  value  + "n ";	  line    =    len    +   ":   "    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	11	None	replace
113	[BUG]  [BUGGY]  line  =  len  +  key  + ".= "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  +  key  + ".= "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  +  key  + ".= "  +  value  + "n ";	  line    =    len    +    key    +   "=n   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	27	None	replace
114	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8);	  len    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
115	[BUG]  [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + "   ";  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + ": "  +  key  + "= "  +  value  + "   ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + ": "  +  key  + "= "  +  value  + "   ";	  line    =    len    +   "       "    +    key    +   "=   "   "    +    value    +   "   "   ";    	non-compiled	[CE]  <identifier>  expected	9	None	replace
116	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
117	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
118	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  }  else  {  writePaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
119	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)w.write('n');  writePaxHeadersForNonAsciiNames(line,  headers);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
120	[BUG]  [BUGGY]  w.write(line  + "n ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line  + "n ");  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line  + "n ");	  w.write(len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
121	[BUG]  [BUGGY]  w.write(line,  assemLen);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write(line,  assemLen);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write(line,  assemLen);	  w.write(len);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
122	[BUG]  [BUGGY]  w.write('/');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('/');  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('/');  len  =  line.getBytes(CharsetNames.UTF_8).length;	  w.write('n');    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
123	[BUG]  [BUGGY]  line  =  len  + "/> "  +  key  + "= "  +  value  + "n ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  line  =  len  + "/> "  +  key  + "= "  +  value  + "n ";  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	line  =  len  + "/> "  +  key  + "= "  +  value  + "n ";	  line    =    len    +   "/   "    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	35	None	replace
124	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  writePaxHeadersForNonAsciiNames	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
125	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  buffer.append(line);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  buffer.append(line);  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)  {  w.write('n');  writePaxHeadersForNonAsciiNames(headers);  }  else  {  buffer.append(line);  }	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
126	[BUG]  [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(paxHeaders);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  w.write('n');  writePaxHeadersForNonAsciiNames(paxHeaders);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	w.write('n');  writePaxHeadersForNonAsciiNames(paxHeaders);	  w.write('n');    writePaxHeadersForNonAsciiNames(headers);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
127	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(pex);	  w.write('n');    writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
128	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(key);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
129	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(line);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(line);  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8);  w.write(line);	  len    =    line.getBytes(CharsetNames.UTF_8);    w.write(line);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
130	[BUG]  [BUGGY]  if(len  >  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  >  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  >  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
131	[BUG]  [BUGGY]  if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;      [BUGGY]  if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames();  }  [BUGGY]      actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	481	481	1	replace	if(len  ==  0)  {  w.write(line);  len  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames();  }	  w.write(line);    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
