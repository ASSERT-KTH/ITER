bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
2	[BUG]  [BUGGY]  Len  =  line.getBytes(key,  Characters.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key,  Characters.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key,  Characters.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
3	[BUG]  [BUGGY]  Len  =  line.getBytes(key.length());  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key.length());  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key.length());  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
4	[BUG]  [BUGGY]  Len  =  line.getBytes(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key);  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
5	[BUG]  [BUGGY]  Len  =  line.getBytes(key).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
6	[BUG]  [BUGGY]  Len  =  line.getBytes(Keys.UTF_8).length;  len  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(Keys.UTF_8).length;  len  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(Keys.UTF_8).length;  len  =  line.getBytes(Keys.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
7	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
8	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
9	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
10	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len  +  1);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
11	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(value,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
12	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
13	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  3;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
14	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
15	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
16	[BUG]  [BUGGY]  Integer  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
17	[BUG]  [BUGGY]  LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8).length;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
18	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(line.length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(line.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(line.length);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
19	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
20	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(key).length;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
21	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
22	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(charsetNames.UTF_8).length;	  long    actualLength    =    line.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
23	[BUG]  [BUGGY]  Long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  long    actualLength    =    line.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
24	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;	  long    actualLength    =    line.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
25	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
26	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(Characters.UTF_8).length;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(line);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(line);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(line);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  w.getBytes(CharsetNames.UTF_8);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  1;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
33	[BUG]  [BUGGY]  LONGFILE_GNU  =  wBuffer.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  wBuffer.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  wBuffer.getBytes(CharsetNames.UTF_8);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
34	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  line;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  line;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8)+  line;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
35	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(key);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
36	[BUG]  [BUGGY]  String  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  String  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	String  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  char    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  Character  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Character  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Character  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  char    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  char    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
40	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
41	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
42	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
45	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    2;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    2;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    1;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
50	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(line,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(line,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(line,  Characters.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
51	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(value,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(value,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(value,  Characters.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
52	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value.length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  value.length);	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
53	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length  +  1;	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
54	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(key).length;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
58	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
61	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
62	[BUG]  [BUGGY]  int  len  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(key).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
63	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
64	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
65	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
66	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  1;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
67	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(Characters.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(Characters.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(Characters.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
68	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(line.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(line.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(line.length);	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  Long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
72	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;	  long    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
73	[BUG]  [BUGGY]  short  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  short  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
74	[BUG]  [BUGGY]  int  len  =  headers.size()  -  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  -  1;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
75	[BUG]  [BUGGY]  int  len  =  headers.size()  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  +  1;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
76	[BUG]  [BUGGY]  int  len  =  headers.size()  -  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  -  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  -  2;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
77	[BUG]  [BUGGY]  int  len  =  headers.size()  -  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  -  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  -  4;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
78	[BUG]  [BUGGY]  int  len  =  headers.size()  -  3;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  -  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  -  3;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
79	[BUG]  [BUGGY]  int  len  =  headers.size()  +  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  +  2;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
80	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    len    +    key    +   "=       "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
81	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  + "n ";  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    len    +    key    +   "=       "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
82	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
83	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
84	[BUG]  [BUGGY]  Len  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  w.getBytes(CharacterNames.UTF_8).length;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
85	[BUG]  [BUGGY]  Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
86	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
87	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8);	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
88	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
89	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8));  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8));  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8));  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
90	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  newline);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  newline);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  newline);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  value);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  value);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  value);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8).length);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8).length);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.getBytes(CharsetNames.UTF_8).length);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  1;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
94	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  2;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
95	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(key);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(key);	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
96	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  4;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  4;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
97	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  3;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8)+  3;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
98	[BUG]  [BUGGY]  long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
99	[BUG]  [BUGGY]  short  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  short  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
100	[BUG]  [BUGGY]  long  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
101	[BUG]  [BUGGY]  char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
102	[BUG]  [BUGGY]  byte  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
103	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
104	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
105	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers.length);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers.length);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers.length);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
106	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  headers.length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
107	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
108	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
109	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
110	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  2;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
111	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8);	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
112	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)-  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)-  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8)-  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
113	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8)+  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(charsetNames.UTF_8)+  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
114	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8)+  4;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
116	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
117	[BUG]  [BUGGY]  String  key  =  currName.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  String  key  =  currName.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	String  key  =  currName.getBytes(CharsetNames.UTF_8).length;	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
118	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
119	[BUG]  [BUGGY]  Integer  len  =  currName.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  len  =  currName.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  len  =  currName.getBytes(CharsetNames.UTF_8);	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
120	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
121	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
122	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
123	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
124	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
125	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
126	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
127	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  long    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
128	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
129	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  /  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  /  1;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
130	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
131	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  long    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
132	[BUG]  [BUGGY]  short  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  short  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
133	[BUG]  [BUGGY]  String  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  String  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	String  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
134	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
135	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
136	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
137	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  /  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  /  1;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
138	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(value,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
139	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(charsetNames.UTF_8).length;	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
140	[BUG]  [BUGGY]  Integer  actualLength  =  line.getInt(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getInt(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getInt(CharsetNames.UTF_8).length;	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
141	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  2;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
142	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(value).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(value).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(value).length;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
143	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(line).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(line).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(line).length;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
144	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key).length  +  1;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
145	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key).length  -  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key).length  -  1;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
146	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
147	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
148	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
149	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
150	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
151	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
152	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
153	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
154	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames.size();  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  WritePaxHeadersForNonAsciiNames.size();  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	WritePaxHeadersForNonAsciiNames.size();	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
155	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames.size();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames.size();  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	writePaxHeadersForNonAsciiNames.size();	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
156	[BUG]  [BUGGY]  Integer  len  =  writePaxHeadersForNonAsciiNames.size();  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  len  =  writePaxHeadersForNonAsciiNames.size();  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  len  =  writePaxHeadersForNonAsciiNames.size();	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
157	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames!=  null)  {  for(int  len  =  1;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
158	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
159	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
160	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  file.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  file.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  file.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
161	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  source.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  source.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  source.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
162	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
163	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
164	[BUG]  [BUGGY]  byte  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
165	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
166	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(key).length;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
167	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  2;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
168	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(Characters.UTF_8).length;	  long    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
169	[BUG]  [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
170	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  key.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  key.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  key.length);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
171	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  -  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  -  1);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  value.length  -  1);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
172	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  +  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  +  1);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  value.length  +  1);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
173	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  value.length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  value.length);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
174	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  len);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  len);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  len);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
175	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  -  2);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length  -  2);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  value.length  -  2);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
176	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
177	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
178	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
179	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(charsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(charsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(charsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
180	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  file.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
181	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
182	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
183	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len  +  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len  +  1);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len  +  1);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
184	[BUG]  [BUGGY]  Integer  len  =  writePaxHeadersForNonAsciiNames.get(len);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  len  =  writePaxHeadersForNonAsciiNames.get(len);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  len  =  writePaxHeadersForNonAsciiNames.get(len);	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
185	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(0);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
186	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames.get(len);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames.get(len);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	writePaxHeadersForNonAsciiNames.get(len);	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
187	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
188	[BUG]  [BUGGY]  Len  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
189	[BUG]  [BUGGY]  Len  =  line.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key,  Characters.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
190	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
191	[BUG]  [BUGGY]  Len  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(Keys.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
192	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
193	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
194	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
195	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterSequences.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharacterSequences.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharacterSequences.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
196	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
197	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
198	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
199	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  /  1;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
200	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
201	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
202	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
203	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
204	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  3;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
205	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
206	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
207	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(key).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
208	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(Keys.UTF_8).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
209	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
210	[BUG]  [BUGGY]  String  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  String  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	String  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  char    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
211	[BUG]  [BUGGY]  Character  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Character  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Character  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  char    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
212	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  char    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
213	[BUG]  [BUGGY]  Char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  char    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
214	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(line,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(line,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(line,  CharacterNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
215	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(value,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(value,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(value,  CharacterNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
216	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(key,  CharacterNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
217	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value.length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value.length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  value.length;	  int    actualLength    =    buffer.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
218	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
219	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
220	[BUG]  [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value  ==  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
221	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  Len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  Len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  Len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
222	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key,  value).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  value).length;	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
223	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    buffer.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
224	[BUG]  [BUGGY]  Len  =  line.getBytes(key);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key);	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
225	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
226	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
227	[BUG]  [BUGGY]  Len  =  line.getBytes(key,  CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key,  CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key,  CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
228	[BUG]  [BUGGY]  Len  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(value.length);	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
229	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(key.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(key.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(key.length);	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
230	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(value.length  -  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(value.length  -  1);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(value.length  -  1);	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
231	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(value.length  +  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(value.length  +  1);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(value.length  +  1);	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
232	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
233	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
234	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  length;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
235	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.size();    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
236	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
237	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(key);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(key);	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
238	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
239	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  buffer.getBytes(key,  CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(key,  CharsetNames.UTF_8).length;	  byte    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
240	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
241	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
242	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line.length());  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
243	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(key,  Characters.UTF_8).length;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
244	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
245	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(value.length);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
246	[BUG]  [BUGGY]  char  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  char    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
247	[BUG]  [BUGGY]  char  actualLength  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  buffer.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  buffer.getBytes(key).length;	  char    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
248	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
249	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(charsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(charsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
250	[BUG]  [BUGGY]  WritePaxHeadersForNonAsciiNames.get(line);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  WritePaxHeadersForNonAsciiNames.get(line);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	WritePaxHeadersForNonAsciiNames.get(line);	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
251	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames.get(line);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames.get(line);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	writePaxHeadersForNonAsciiNames.get(line);	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
252	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(value);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(value);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(value);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
253	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(LONGFILE_TRUNCATE);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(LONGFILE_TRUNCATE);	  LONGFILE_GNU    =    buffer.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
254	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  5;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  5;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  5;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
255	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
256	[BUG]  [BUGGY]  int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
257	[BUG]  [BUGGY]  int  len  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(Keys.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
258	[BUG]  [BUGGY]  int  len  =  line.getBytes(key);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(key);	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
259	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(KeyNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(KeyNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(KeyNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
260	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  line.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(value,  line.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  line.length);	  int    actualLength    =    line.getBytes(key,    value.length);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
261	[BUG]  [BUGGY]  long  actualLength  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  buffer.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  buffer.getBytes(key).length;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
262	[BUG]  [BUGGY]  long  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
263	[BUG]  [BUGGY]  long  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;	  long    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
264	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
265	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
266	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(len!=  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
267	[BUG]  [BUGGY]  if(len  ==  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(len  ==  0)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
268	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
269	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(Characters.UTF_8).length;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
270	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharacterEncodings.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
271	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  w.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharacterEncodings.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
272	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  5;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  5;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  5;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
273	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  +   "n ";  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  +   "n ";  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  +   "= "  +  value  +   "n ";  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    len    +    key    +   "=       "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
274	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(key.length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  long  actualLength  =  line.getBytes(key.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(key.length);	  long    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
275	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterSequences.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterSequences.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterSequences.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
276	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
277	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(key,  Characters.UTF_8).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
278	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(value).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(value).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(value).length;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
279	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(key);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(key);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(key);	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
280	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(value);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(value);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(value);	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
281	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(Keys.UTF_8);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(Keys.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(Keys.UTF_8);	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
282	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  headers.size();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  headers.size();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  headers.size();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
283	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  /  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  /  1;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
284	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
285	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(key).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(key).length;	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
286	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
287	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(value.length);	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
288	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(value).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  buffer.getBytes(value).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(value).length;	  Integer    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
289	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
290	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(value!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
291	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  currName.length();  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
292	[BUG]  [BUGGY]  char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;	  int    actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
293	[BUG]  [BUGGY]  Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(key,  CharacterNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
294	[BUG]  [BUGGY]  int  len  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(value.length);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(value.length);	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
295	[BUG]  [BUGGY]  int  len  =  headers.size()  +  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  headers.size()  +  3;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size()  +  3;	  int    len    =    headers.size();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
296	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodings.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
297	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
298	[BUG]  [BUGGY]  Len  =  line.getBytes(charsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(charsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(charsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	57	None	replace
299	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(value,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
300	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  2;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  /  2;	  int    actualLength    =    line.getBytes(Characters.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
301	[BUG]  [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  len  =  line.getBytes(CharsetNames.UTF_8).length;	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
302	[BUG]  [BUGGY]  Integer  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
303	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(Characters.UTF_8).length;	  Integer    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
304	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames.get(len);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
305	[BUG]  [BUGGY]  int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(KeyCharacterNames.UTF_8).length;	  int    len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
306	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(0);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(0);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(0);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
307	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames();  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames();  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames();  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
308	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(characterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(characterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(characterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
309	[BUG]  [BUGGY]  byte  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  byte  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
310	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
311	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    line);    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
312	[BUG]  [BUGGY]  Len  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(charsetNames.UTF_8).length;	  Len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
313	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
314	[BUG]  [BUGGY]  int  len  =  line.getBytes(KeyCharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  len  =  line.getBytes(KeyCharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(KeyCharsetNames.UTF_8).length;	  int    len    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	58	None	replace
315	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharsetNames.UTF_8);	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
316	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII);  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII);	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
317	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
318	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.US_ASCII).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.US_ASCII).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.US_ASCII).length;	  int    actualLength    =    line.getBytes(CharacterEncodingNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
319	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
320	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  line.length();  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    writePaxHeadersForNonAsciiNames(len,    headers);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
321	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
322	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  Len    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
323	[BUG]  [BUGGY]  if(key!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(key!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(key!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
324	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  LONGFILE_GNU;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
325	[BUG]  [BUGGY]  Len  =  currName.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  currName.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  currName.getBytes(CharsetNames.UTF_8).length;	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    currName.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
326	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line  ==  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
327	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(value).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(value).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(value).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
328	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII).length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.US_ASCII).length;	  LONGFILE_GNU    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
329	[BUG]  [BUGGY]  char  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;	  int    actualLength    =    buffer.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
330	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(value.charAt(0)).length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  actualLength  =  line.getBytes(value.charAt(0)).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(value.charAt(0)).length;	  Integer    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
331	[BUG]  [BUGGY]  LONGFILE_GNU  >  LONGFILE_GNU)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  >  LONGFILE_GNU)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  >  LONGFILE_GNU)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    for(int    len    =    0;    len    <    len;    len++)    {    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
332	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  6;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  6;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  6;	  int    actualLength    =    line.getBytes(CharacterNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
333	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.BIT_LENGTH).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.BIT_LENGTH).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.BIT_LENGTH).length;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
334	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  char  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
335	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.US_ASCII).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.US_ASCII).length;  [BUGGY]      while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.US_ASCII).length;	  int    actualLength    =    line.getBytes(CharacterSequences.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
