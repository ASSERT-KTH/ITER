bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodingNames.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterEncodings.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(charsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8);	  int    actualLength    =    line.getBytes(key);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(value);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value);	  int    actualLength    =    line.getBytes(key);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
11	[BUG]  [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	short  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
12	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
13	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
17	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  Characters.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  Characters.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(Characters.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
20	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  currName.getBytes(CharsetNames.UTF_8).length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.get(len);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames(len,  line);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  writePaxHeadersForNonAsciiNames.size();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(value,  CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  2;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  2;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key,  value.length);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  value.length);	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(key).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(key).length;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(Keys.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(Keys.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(Keys.UTF_8).length;	  long    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
38	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  Integer  actualLength  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Integer  actualLength  =  line.getBytes(value.length);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Integer  actualLength  =  line.getBytes(value.length);	  int    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
40	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key.length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key.length);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key.length);	  int    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
41	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  buffer.getBytes(key).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	byte  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  CharacterNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  buffer.getBytes(key,  Characters.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  int  len  =  headers.size();  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  len  =  headers.size();  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  headers.size();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line.getBytes(CharsetNames.UTF_8).length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	LONGFILE_GNU  =  buffer.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  + "=   "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  + "=   "  +  value  + "n ";  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  len  +  key  + "=   "  +  value  + "n ";  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
52	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  4;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(key,  CharacterNames.UTF_8).length  +  4;	  int    actualLength    =    line.getBytes(key,    CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    buffer.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	if(line!=  null)  {  for(int  len  =  0;  len  <  len;  len++)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Len  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharacterNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;  len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(key).length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
60	[BUG]  [BUGGY]  long  actualLength  =  line.getBytes(value.length);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  long  actualLength  =  line.getBytes(value.length);  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	long  actualLength  =  line.getBytes(value.length);	  int    actualLength    =    line.getBytes(value.length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
61	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  len  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  len  =  line.getBytes(CharacterNames.UTF_8).length;	  int    actualLength    =    line.getBytes(Keys.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
62	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	int  actualLength  =  line.getBytes(CharacterSequences.UTF_8).length;	  int    actualLength    =    line.getBytes(key,    Characters.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;  String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	473	473	1	replace	char  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  int    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
