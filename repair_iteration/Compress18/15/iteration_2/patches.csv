bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
7	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
9	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  '/')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
10	[BUG]  [BUGGY]  if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
11	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
12	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
13	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length())!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length())!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length())!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
14	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
15	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  +  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  +  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  +  1)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
16	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  2)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  2)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  2)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
17	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entry.length());  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  entry.length());  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  entry.length());	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entry.length());  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  entry.length());  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  entry.length());	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet().iterator().next();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.get(name).iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.get(0).iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.size().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.size().iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.size().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.keySet().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.iterator().next();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next(),  name);	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
30	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >=  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
31	[BUG]  [BUGGY]  if(name  ==  null  &&  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  &&  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  &&  name.length()!=  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
32	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ALIASING)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ALIASING)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ALIASING)  {	  if(name!=    null    &&    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
33	[BUG]  [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
34	[BUG]  [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
35	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length())!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length())!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length())!=  '/')  {	  if(name.length()    ==    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
36	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
37	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  entry.lastIndexOf('.'));	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
38	[BUG]  [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
39	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  entry.lastIndexOf('.'));	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
40	[BUG]  [BUGGY]  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  name  =  entry.substring(0,  entry.lastIndexOf('.'));  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	name  =  entry.substring(0,  entry.lastIndexOf('.'));	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
41	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
42	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
43	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
44	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
45	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
46	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
47	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(name);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(name);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
48	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
49	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
50	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
51	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
52	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
53	[BUG]  [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	name  =  entry.substring(0,  entry.length()  -  1,  headers.length());	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
54	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ALIASING)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ALIASING)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NUMBER_ALIASING)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
55	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
56	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NUMBER_ALIASING  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING)    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
57	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  Name  name  =  entryName.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entryName.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entryName.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
60	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
61	[BUG]  [BUGGY]  String  name  =  entryName.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entryName.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entryName.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
62	[BUG]  [BUGGY]  name  =  entryName.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  name  =  entryName.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	name  =  entryName.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
63	[BUG]  [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
64	[BUG]  [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
65	[BUG]  [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
66	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
67	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entry.length()  ==  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
71	[BUG]  [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  name  =  entry.substring(0,  entry.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	name  =  entry.substring(0,  entry.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
72	[BUG]  [BUGGY]  if(name  ==  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
73	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()  ==  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()  ==  0)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
74	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  ||  name.length()  ==  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  ||  name.length()  ==  0)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
75	[BUG]  [BUGGY]  if(name!=  null  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
76	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >  0)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
77	[BUG]  [BUGGY]  if(name!=  null  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
78	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
80	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  entryName.length()  -  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  entryName.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  entryName.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  entryName.length()  -  1);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  entryName.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  entryName.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
82	[BUG]  [BUGGY]  name  =  entry.substring(0,  entryName.length()  -  1);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  name  =  entry.substring(0,  entryName.length()  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	name  =  entry.substring(0,  entryName.length()  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
83	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
84	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entity  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entity  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entity  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
85	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  <  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  <  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  <  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
86	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
87	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  <  =  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  <  =  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  <  =  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
88	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >  1)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >  1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >  1)  {	  if(name!=    null    &&    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
89	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
90	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
91	[BUG]  [BUGGY]  String  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  String  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	String  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
92	[BUG]  [BUGGY]  Name  name  =  entry.toString();  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.toString();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.toString();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entry  =  headers.entrySet();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entry  =  headers.entrySet();	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
94	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
95	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
96	[BUG]  [BUGGY]  if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
97	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
98	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
99	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
100	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()  ==  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()  ==  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
101	[BUG]  [BUGGY]  if(name  ==  null  &&  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  &&  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  &&  name.length()  >  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
102	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  ||  name.length()  ==  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  ||  name.length()  ==  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
103	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
104	[BUG]  [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
105	[BUG]  [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
106	[BUG]  [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)    ==    '/')    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
107	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
108	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
109	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
110	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
111	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getKey();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
112	[BUG]  [BUGGY]  if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
113	[BUG]  [BUGGY]  if(name.length()  ==  2  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  2  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  2  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
114	[BUG]  [BUGGY]  if(name.length()  ==  1  &&  name.charAt(name.length()  -  1)!=  '/'  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  &&  name.charAt(name.length()  -  1)!=  '/'  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  &&  name.charAt(name.length()  -  1)!=  '/'  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
115	[BUG]  [BUGGY]  if(name.length()  >=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  1  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
116	[BUG]  [BUGGY]  if(name.length()  ==  1  &&  name.charAt(name.length()  -  2)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  &&  name.charAt(name.length()  -  2)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  &&  name.charAt(name.length()  -  2)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
117	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
118	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(entryName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(entryName);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(entryName);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
119	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.get(name);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.get(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.get(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
120	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers!=  null  &&  headers.contains(name);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers!=  null  &&  headers.contains(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers!=  null  &&  headers.contains(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
121	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.values().contains(name);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.values().contains(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.values().contains(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
122	[BUG]  [BUGGY]  if(name.length()  ==  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
123	[BUG]  [BUGGY]  if(name.length()!=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
124	[BUG]  [BUGGY]  if(name.length()!=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
125	[BUG]  [BUGGY]  if(name.length()  >=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  0  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
126	[BUG]  [BUGGY]  if(name.length()!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  0)  {	  if(name.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
127	[BUG]  [BUGGY]  if(name.length()  <  =  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  0)  {	  if(name.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
128	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
129	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NON_ASCII)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NON_ASCII)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NON_ASCII)  {	  if(name.length()    <    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
130	[BUG]  [BUGGY]  if(name.length()  >  0,  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0,  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0,  TarConstants.NAMELEN)  {	  if(name.length()    ==    0,    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
131	[BUG]  [BUGGY]  if(name.length()  <  =  0,  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  0,  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  0,  TarConstants.NAMELEN)  {	  if(name.length()    ==    0,    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
132	[BUG]  [BUGGY]  if(name.length()  ==  0,  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0,  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0,  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0,    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
133	[BUG]  [BUGGY]  if(name.length()  >  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  1)  {	  if(name.length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
134	[BUG]  [BUGGY]  if(name.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  0)  {	  if(name.length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
135	[BUG]  [BUGGY]  if(name.length()  <  =  1)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  1)  {	  if(name.length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
136	[BUG]  [BUGGY]  if(name.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  2)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  2)  {	  if(name.length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
137	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
138	[BUG]  [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
139	[BUG]  [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  1  ||  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
140	[BUG]  [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  1  ||  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
141	[BUG]  [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  ||  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
142	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '0')  {  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)  >=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
143	[BUG]  [BUGGY]  if(name.length()  ==  0  ||  name.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  ||  name.length()  ==  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  ||  name.length()  ==  0)  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
144	[BUG]  [BUGGY]  if(name.length()  >  0,  name.length())  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0,  name.length())  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0,  name.length())  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
145	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.length()  ==  name.length())  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.length()  ==  name.length())  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.length()  ==  name.length())  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
146	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.length()  ==  0,  name.length())  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.length()  ==  0,  name.length())  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.length()  ==  0,  name.length())  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
147	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
148	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
149	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.LF_PAX_EXTENDED_HEADER_LC  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
150	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NUMBER_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
151	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.LF_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.LF_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.LF_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
152	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
153	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
154	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
155	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  >=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  >=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.length()  >=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
156	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(name.length()  -  1)!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
157	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
158	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_LENGTH)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_LENGTH)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NUMBER_LENGTH)  {	  if(name.length()    ==    TarConstants.NUMBER_LENGTH)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
159	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {	  if(name.length()    ==    TarConstants.NUMBER_LENGTH)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
160	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
161	[BUG]  [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
162	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
163	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
164	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
165	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
166	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
167	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
168	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NAMELEN  ||  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
169	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  'n')  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(name.length())!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
170	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.NAMELEN  &&  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
171	[BUG]  [BUGGY]  if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  2  ||  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
172	[BUG]  [BUGGY]  if(name.length()  <  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
173	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
174	[BUG]  [BUGGY]  if(name.length()  >  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
175	[BUG]  [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
176	[BUG]  [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  ':')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  ':')  {	  if(name.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
177	[BUG]  [BUGGY]  if(name.length()!=  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  0  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
178	[BUG]  [BUGGY]  if(name.length()  >  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  1  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  1  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    >    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
179	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ADD)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.NUMBER_ADD)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.NUMBER_ADD)  {	  if(name.length()    ==    TarConstants.NUMBER_ADD)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
180	[BUG]  [BUGGY]  if(name.length()  >  TarConstants.NUMBER_ADD)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  TarConstants.NUMBER_ADD)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  TarConstants.NUMBER_ADD)  {	  if(name.length()    ==    TarConstants.NUMBER_ADD)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
181	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_STAR)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_STAR)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NUMBER_STAR)  {	  if(name.length()    ==    TarConstants.NUMBER_ADD)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
182	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers    ==    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
183	[BUG]  [BUGGY]  if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
184	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
185	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
186	[BUG]  [BUGGY]  if(name.length()  <  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  1)  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
187	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers    ==    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
188	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
189	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  addPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
190	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  ||  name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  ||  name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
191	[BUG]  [BUGGY]  if(name.length()  >=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  0  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
192	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()  ==  TarConstants.NUMBER_LENGTH)  {	  if(name.length()    ==    TarConstants.NUMBER_LENGTH)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
193	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
194	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
195	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
196	[BUG]  [BUGGY]  if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  10  &&  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
197	[BUG]  [BUGGY]  if(name!=  null  ||  name.length()  >  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.length()  >  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.length()  >  0)  {	  if(name.length()    >    0)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
198	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
199	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length()  -  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
200	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
201	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  header  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
202	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writePaxHeadersForNonAsciiNames(name);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
203	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
204	[BUG]  [BUGGY]  if(name.length()  ==  0,  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0,  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0,  TarConstants.NUMBER_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
205	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NUMBER_ALIASING_HEADER_LC  ||  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
206	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
207	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().first();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
208	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.values().iterator().next();  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.values().iterator().next();  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.values().iterator().next();	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
209	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'),  TarConstants.NAMELEN  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
210	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.indexOf('.'));  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.indexOf('.'));  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.indexOf('.'));  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
211	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.')+  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.')+  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.')+  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
212	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  0,  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  ==  0,  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  ==  0,  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
213	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
214	[BUG]  [BUGGY]  if(name.length()  >  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  TarConstants.FIRST  ||  name.length()  <  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
215	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getKey();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
216	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getKey();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
217	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getKey();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
218	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ADD  ||  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NUMBER_ADD  ||  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NUMBER_ADD  ||  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    TarConstants.NUMBER_ADD)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
219	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers  ==  null  &&  headers.contains(name);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers  ==  null  &&  headers.contains(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers  ==  null  &&  headers.contains(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
220	[BUG]  [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  ||  name.charAt(name.length()  -  1)!=  'n')  {	  if(name.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
221	[BUG]  [BUGGY]  if(name!=  null  ||  name.indexOf(':')  >=  -1)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  ||  name.indexOf(':')  >=  -1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  ||  name.indexOf(':')  >=  -1)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
222	[BUG]  [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '0')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  1  ||  name.charAt(name.length()  -  1)  ==  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
223	[BUG]  [BUGGY]  if(name.length()  ==  4  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  4  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  4  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
224	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'r')  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'r')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'r')  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
225	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
226	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)!=  'r')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)!=  'r')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)!=  'r')  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
227	[BUG]  [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  'n'  &&  name.charAt(name.length()  -  1)  ==  'n')  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
228	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
229	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.getValue();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
230	[BUG]  [BUGGY]  if(name.length()  ==  0,  name.length()  >>  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0,  name.length()  >>  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0,  name.length()  >>  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
231	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.FIRST  ||  name.length()  ==  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
232	[BUG]  [BUGGY]  Name  name  =  entryName.substring(0,  TarConstants.NAMELEN  -  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entryName.substring(0,  TarConstants.NAMELEN  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entryName.substring(0,  TarConstants.NAMELEN  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
233	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
234	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
235	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
236	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.values())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
237	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.toString();  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
238	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  Entry.toString();  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  Entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  Entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
239	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
240	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.keySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
241	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
242	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ADD)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ADD)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_ADD)  {	  if(name.length()    ==    TarConstants.NUMBER_ADD)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
243	[BUG]  [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
244	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.FIRST  ||  name.length()  >  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
245	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_LENGTH)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  ==  TarConstants.NUMBER_LENGTH)  {	  if(name.length()    ==    TarConstants.NUMBER_LENGTH)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
246	[BUG]  [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null  &&  headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null  &&  headers.size()  >  0)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.getKey();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getKey();    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
247	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
248	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length());  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entryName.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entryName.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
249	[BUG]  [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  -  1);  }	  if(headers    ==    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
250	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(1,  entry.length()  -  1);  }	  if(headers    ==    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
251	[BUG]  [BUGGY]  if(name!=  null  &&  headers.size()  >  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  headers.size()  >  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  headers.size()  >  0)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
252	[BUG]  [BUGGY]  if(name!=  null  &&  name.indexOf('.')>  -1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.indexOf('.')>  -1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.indexOf('.')>  -1)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
253	[BUG]  [BUGGY]  if(name!=  null  &&  name.indexOf(':')>  -1)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.indexOf(':')>  -1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.indexOf(':')>  -1)  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
254	[BUG]  [BUGGY]  if(name!=  null  &&  name.endsWith( "/ "))  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.endsWith( "/ "))  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.endsWith( "/ "))  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
255	[BUG]  [BUGGY]  if(name!=  null  &&  name.endsWith( ".java "))  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.endsWith( ".java "))  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.endsWith( ".java "))  {	  if(name!=    null)    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
256	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  ==  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  ==  0)  {	  if(name.length()    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
257	[BUG]  [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  +  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  +  1;  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Entry  <  String,  String>  entryName  =  headers.entrySet().iterator().next()  +  1;	  Entry    <    String,    String>    entryName    =    headers.entrySet().iterator().next();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
258	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length()  +  1,  headers.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length()    -    1,    headers.length());    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
259	[BUG]  [BUGGY]  if(name.length()!=  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  TarConstants.NUMBER_ALIASING_HEADER_LC)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  TarConstants.NUMBER_ALIASING_HEADER_LC)  {	  if(name.length()    ==    TarConstants.NUMBER_ALIASING_HEADER_LC)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
260	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
261	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  addPaxHeaderForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    addPaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
262	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >  0  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    >    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
263	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(entryName!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.toString();  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.toString();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
264	[BUG]  [BUGGY]  if(name.length()  <  =  10  &&  name.charAt(name.length()  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  10  &&  name.charAt(name.length()  -  1)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  10  &&  name.charAt(name.length()  -  1)!=  '/')  {	  if(name.length()    ==    0,    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
265	[BUG]  [BUGGY]  if(name.length()  >  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  >  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  >  1  ||  name.charAt(name.length()  -  1)  ==  '/')  {	  if(name.length()    ==    0,    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
266	[BUG]  [BUGGY]  if(name.length()  ==  1  &&  name.charAt(0)!=  '/')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  &&  name.charAt(0)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  &&  name.charAt(0)!=  '/')  {	  if(name.length()    ==    1    &&    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
267	[BUG]  [BUGGY]  if(name.length()!=  1)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1)  {	  if(name.length()    ==    1)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
268	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(0)!=  'n')  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(0)!=  'n')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.NAMELEN  ||  name.charAt(0)!=  'n')  {	  if(name.length()    ==    TarConstants.NAMELEN    ||    name.charAt(name.length()    -    1)!=    'n')    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
269	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.length());  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.length());    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
270	[BUG]  [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	DeserializationPlugin.writePaxHeadersForNonAsciiNames(entryName);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
271	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writeStringForPaxHeadersForNonAsciiNames(entryName);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writeStringForPaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  writeStringForPaxHeadersForNonAsciiNames(entryName);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    writePaxHeadersForNonAsciiNames(entryName);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
272	[BUG]  [BUGGY]  Name  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  Name  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	Name  name  =  entry.substring(0,  TarConstants.NAMELEN  -  1);	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.getValue();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
273	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >  2)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >  2)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >  2)  {	  if(name!=    null    &&    name.length()    >    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
274	[BUG]  [BUGGY]  if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '0')  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '0')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()!=  1  &&  name.charAt(name.length()  -  1)!=  '0')  {	  if(name.length()    <    =    1    ||    name.charAt(name.length()    -    1)!=    '0')    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
275	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.put(name,  addPaxHeadersForNonAsciiNames);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.put(name,  addPaxHeadersForNonAsciiNames);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.put(name,  addPaxHeadersForNonAsciiNames);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
276	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.keySet().contains(name);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.keySet().contains(name);  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.keySet().contains(name);	  boolean    addPaxHeadersForNonAsciiNames    =    headers.contains(name);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
277	[BUG]  [BUGGY]  if(name.length()  <  =  name.length())  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  name.length())  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  name.length())  {	  if(name.length()    ==    0,    name.length())    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
278	[BUG]  [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(0)!=  '/')  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(0)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  TarConstants.FIRST  ||  name.charAt(0)!=  '/')  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
279	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  >=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  >=  0)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  >=  0)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
280	[BUG]  [BUGGY]  if(name!=  null  &&  name.length()  <  2)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null  &&  name.length()  <  2)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null  &&  name.length()  <  2)  {	  if(name!=    null    &&    name.length()    ==    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
281	[BUG]  [BUGGY]  if(name.length()  <  =  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  <  =  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  <  =  TarConstants.FIRST  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
282	[BUG]  [BUGGY]  if(name.length()  ==  0,  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0,  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0,  name.length()!=  TarConstants.NAMELEN)  {	  if(name.length()    ==    TarConstants.FIRST    ||    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
283	[BUG]  [BUGGY]  if(name.length()  ==  0  ||  name.charAt(0)!=  '/')  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  0  ||  name.charAt(0)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  0  ||  name.charAt(0)!=  '/')  {	  if(name.length()    ==    0    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
284	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entry.substring(0,  entry.lastIndexOf('.'));  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entry.substring(0,    entry.lastIndexOf('.'));    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
285	[BUG]  [BUGGY]  if(name  ==  null  ||  name.length()!=  TarConstants.NAMELEN)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name  ==  null  ||  name.length()!=  TarConstants.NAMELEN)  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name  ==  null  ||  name.length()!=  TarConstants.NAMELEN)  {	  if(name!=    null    &&    name.length()!=    TarConstants.NAMELEN)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
286	[BUG]  [BUGGY]  if(name.length()  ==  1  ||  name.charAt(0)!=  '/')  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name.length()  ==  1  ||  name.charAt(0)!=  '/')  {  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name.length()  ==  1  ||  name.charAt(0)!=  '/')  {	  if(name.length()    ==    1    ||    name.charAt(name.length()    -    1)!=    '/')    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
287	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(0,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
288	[BUG]  [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      Map<String,  String>  headers)  throws  IOException  {  String  name  =       "./PaxHeaders.X/     "  +  stripTo7Bits(entryName);        [BUGGY]  if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }  [BUGGY]      name  =  name.substring(0,  TarConstants.NAMELEN  -  1);  }  TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	459	459	1	replace	if(name!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  name  =  entryName.substring(1,  entry.length()  -  1);  }	  if(headers!=    null)    {    for(Map.Entry    <    String,    String>    entry    :    headers.entrySet())    {    name    =    entryName.substring(0,    entry.length()    -    1);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
