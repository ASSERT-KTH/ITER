bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getSyntheticPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getSyntheticPath());	  paxHeaders.put(   "path   ",    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toString());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toString());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).toString());	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entryName);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entryName);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entryName);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getPath());	  paxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put(entryName,  entry.getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getPath());	  paxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  paxHeaders.put(entryName,  path);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  path);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  path);	  paxHeaders.put(   "path   ",    path);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path ",  entry);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry);	  paxHeaders.put(   "path   ",    path);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getURL());  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getURL());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getURL());	  paxHeaders.put(   "path   ",    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getTarName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getTarName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getTarName());	  paxHeaders.put(   "path   ",    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getName());	  paxHeaders.put(   "path   ",    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getPathName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getPathName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getPathName());	  paxHeaders.put(   "path   ",    entry.getPathName());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getURI());  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry.getURI());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getURI());	  paxHeaders.put(   "path   ",    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  writePaxHeaders(entryName,  BigNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeaders(entryName,  BigNUMBER_POSIX);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  BigNUMBER_POSIX);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_POSIX);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_POSIX);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  writePaxHeaders(entryName,  entry);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeaders(entryName,  entry);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  entry);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getPath());	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getPath());	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  PaxHeaders.put( "path   ",  entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put( "path   ",  entry.getPath()  +  1);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put( "path   ",  entry.getPath()  +  1);	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  path.toString());  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  path.toString());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  path.toString());	  paxHeaders.put(   "path   ",    path);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  buffer);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  path);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  path);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  path);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encoding);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encoding);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  encoding);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encodedName);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encodedName);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  encodedName);	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getURLName());  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  entry.getURLName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getURLName());	  paxHeaders.put(   "path   ",    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getRawName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  entry.getRawName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getRawName());	  paxHeaders.put(   "path   ",    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  entry.getPath()  +  1);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getPath()  +  1);	  paxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getString());  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  entry.getString());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getString());	  paxHeaders.put(   "path   ",    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  PaxHeaders.put( "path   ",  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put( "path   ",  entry.getSyntheticPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put( "path   ",  entry.getSyntheticPath());	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  PaxHeaders.put( "path   ",  entry.getName());  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put( "path   ",  entry.getName());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put( "path   ",  entry.getName());	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  entry);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  writePaxHeaders(entryName);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeaders(entryName);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entryName,  entry);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry);	  paxHeaders.put(   "path   ",    path);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  bigNumberMode);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  bigNumberMode);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  writePaxHeadersForLongNumbers(entryName);  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getURL());  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getURL());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getURL());	  paxHeaders.put(   "path   ",    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getPath());	  paxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  + "path ");  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  PaxHeaders.put(entry.getPath()  + "path ");  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  + "path ");	  PaxHeaders.put(   "path   ",    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getPath());  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {    [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getPath());  [BUGGY]    }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(   "linkpath   ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).getPath());	  paxHeaders.put(   "path   ",    new    Path(entryName));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
