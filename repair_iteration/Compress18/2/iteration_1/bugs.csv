bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]    IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getPath());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getPath());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getName());  [CE]  illegal  start  of  type  [FE]      IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getName());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getName());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  paxHeaders.put( "path ",  path);  [CE]  illegal  start  of  type  [FE]        IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  path);  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  path);	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]          IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getSyntheticPath());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getSyntheticPath());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]            IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getURL());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getURL());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getURI());  [CE]  illegal  start  of  type  [FE]              IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getURI());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getURI());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]    [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	  	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  paxHeaders.put( "path ",  new  Path(entryName));  [CE]  illegal  start  of  type  [FE]    IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  new  Path(entryName));  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  new  Path(entryName));	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getPathName());  [CE]  illegal  start  of  type  [FE]      IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getPathName());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getPathName());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  PaxHeaders.put( "path ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]    IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  PaxHeaders.put( "path ",  entry.getPath());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put( "path ",  entry.getPath());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  paxHeaders.put( "path ",  entry.getTarName());  [CE]  illegal  start  of  type  [FE]      IOException  [CONTEXT]  }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {  [BUGGY]  paxHeaders.put( "path ",  entry.getTarName());  [BUGGY]  }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put( "linkpath ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path ",  entry.getTarName());	paxHeaders.put( "path ",  entryName);  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
