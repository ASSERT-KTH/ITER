bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entry);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
2	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cachedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  cachedName);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
3	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  encoding);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
4	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaderContainsPath);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaderContainsPath);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaderContainsPath);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
5	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  paxHeaders.put( "synthetic ",  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "synthetic ",  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "synthetic ",  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  patterns.put(entryName,  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  patterns.put(entryName,  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	patterns.put(entryName,  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  paxHeaders.put(encodedName,  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(encodedName,  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(encodedName,  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  currName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  currName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  currName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encoding);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
10	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(currName),  encoding);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(currName),  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(currName),  encoding);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encoding);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
11	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(currName),  entryName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(currName),  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(currName),  entryName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encoding);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(encoding),  entryName);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(encoding),  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(encoding),  entryName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encoding);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getTarName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getTarName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getTarName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  patterns.put(entryName,  entry.getTarName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  patterns.put(entryName,  entry.getTarName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	patterns.put(entryName,  entry.getTarName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getSimpleName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getSimpleName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getSimpleName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  paxHeaders);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  paxHeaders);	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
17	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
18	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(paxHeaders,  entry);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(paxHeaders,  entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(paxHeaders,  entry);  }	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
19	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeaders(entryName);  }  else  {  addPaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
20	[BUG]  [BUGGY]  writePaxHeaders(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  cachedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  cachedName);	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
21	[BUG]  [BUGGY]  paxHeaders.put(entry.getName(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getName(),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getName(),  entry.getPath());	  paxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
22	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getName());	  paxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
23	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getPath()  +  1);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getPath()  +  1);	  paxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
24	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getString());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getString());	  paxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
25	[BUG]  [BUGGY]  paxHeaders.put( ".path ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( ".path ",  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( ".path ",  entry.getPath());	  paxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  paxHeaders.put( ",  path   ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( ",  path   ",  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( ",  path   ",  entry.getPath());	  paxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders);	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
28	[BUG]  [BUGGY]  paxHeaders.put(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  cachedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  cachedName);	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
29	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaderContainsPath);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaderContainsPath);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaderContainsPath);	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
30	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry);	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
31	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getValue());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getValue());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getValue());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
32	[BUG]  [BUGGY]  paxHeaders.put(entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  encoding);	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
33	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getPath());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getSyntheticPath());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
36	[BUG]  [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  _writePaxHeadersForNonAsciiNames(entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	_writePaxHeadersForNonAsciiNames(entryName);	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
37	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  addPaxHeadersForNonAsciiNames  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  addPaxHeadersForNonAsciiNames  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName);  }  else  {  addPaxHeadersForNonAsciiNames	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
38	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  true);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  true);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  true);	  writePaxHeadersForNonAsciiNames(entryName);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  paxHeaders.put( "name ",  entry.getName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "name ",  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "name ",  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  paxHeaders.put( "entryName   ",  entry.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "entryName   ",  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "entryName   ",  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getString());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getString());	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
43	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath()  +  1);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getPath()  +  1);	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
44	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getLongPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getLongPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getLongPath());	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
45	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.toString());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.toString());	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
46	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getPath()  +  1);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getPath()  +  1);	  PaxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  PaxHeaders.put( ",  path   ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put( ",  path   ",  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put( ",  path   ",  entry.getPath());	  PaxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.toString());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  entry.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.toString());	  paxHeaders.put(   "path       ",    path.toString());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  paxHeaders.put(entryName,  path.toString());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  path.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  path.toString());	  paxHeaders.put(   "path       ",    path.toString());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getSyntheticPath());	  PaxHeaders.put(   "path       ",    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.toString());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.toString());	  paxHeaders.put(   "path       ",    new    Path(entryName).toString());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  PaxHeaders.put(encodedName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(encodedName,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(encodedName,  entry.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  path.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  path.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  path.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getValue());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getValue());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getValue());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entries.getPath());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entries.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entries.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toString());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toString());	  paxHeaders.put(   "path       ",    new    Path(entryName),    buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
57	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  cache);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  cache);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  cache);	  paxHeaders.put(   "path       ",    new    Path(entryName),    buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
58	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toByteArray());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toByteArray());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  buffer.toByteArray());	  paxHeaders.put(   "path       ",    new    Path(entryName),    buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	throw  new  IllegalStateException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	Thread.currentThread().interrupt();	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  allowForBigNumbers(entry);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  allowForBigNumbers(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	allowForBigNumbers(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader();  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  Thread.currentThread().getContextClassLoader();  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	Thread.currentThread().getContextClassLoader();	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(entry);  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	Thread.currentThread().setContextClassLoader(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	Throwable  cause  =  new  IllegalStateException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  allowNonAsciiNames();  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  allowNonAsciiNames();  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	allowNonAsciiNames();	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entryName);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entryName);	  paxHeaders.put(entryName,    path);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getKey());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getKey());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getKey());	  paxHeaders.put(entryName,    path);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_GNU);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_GNU);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_GNU);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
69	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  4);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  4);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  4);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  0);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  0);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  0);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_STAR);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  BigNUMBER_STAR);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  PATH);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
74	[BUG]  [BUGGY]  writePaxHeaders(entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  encoding);	  writePaxHeaders(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  writePaxHeaders(entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  bigNumberMode);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  bigNumberMode);	  writePaxHeaders(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  writePaxHeaders(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  currName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  currName);	  writePaxHeaders(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(encodedName),  entryName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(encodedName),  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(encodedName),  entryName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encodedName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
78	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  cachedName);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  cachedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  cachedName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encodedName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  writePaxHeaders(entryName,  LONGFILE_GNU);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  LONGFILE_GNU);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  LONGFILE_GNU);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  writePaxHeaders(entryName,  BIGNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  BIGNUMBER_STAR);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  BIGNUMBER_STAR);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
81	[BUG]  [BUGGY]  writePaxHeaders(entryName,  4);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  4);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  4);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
82	[BUG]  [BUGGY]  writePaxHeaders(entryName,  BigNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  BigNUMBER_STAR);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  BigNUMBER_STAR);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
83	[BUG]  [BUGGY]  writePaxHeaders(entryName,  LONGFILE_POSIX);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  LONGFILE_POSIX);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  LONGFILE_POSIX);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
84	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getPath()  + "path ");  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getPath()  + "path ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getPath()  + "path ");	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
85	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  + "/path ");  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath()  + "/path ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  + "/path ");	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
86	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getURI());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getURI());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
87	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getString());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getString());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
88	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getLowerCase());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getLowerCase());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getLowerCase());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry);	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
90	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
91	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getVersion());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getVersion());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getVersion());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
92	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.isSymbolicLink());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.isSymbolicLink());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.isSymbolicLink());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
93	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getSymbolicLink());  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getSymbolicLink());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getSymbolicLink());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
94	[BUG]  [BUGGY]  paxHeaders.put(entry.getName(),  entry.getURL());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getName(),  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getName(),  entry.getURL());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
95	[BUG]  [BUGGY]  paxHeaders.put(entry.getURL(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getURL(),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getURL(),  entry.getPath());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
96	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getURL());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getURL());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
97	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getURI());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getPath(),  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath(),  entry.getURI());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
98	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  paxHeaders);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  paxHeaders);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  paxHeaders);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
99	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
100	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  bigNumberMode);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  bigNumberMode);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  bigNumberMode);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
101	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  addPaxHeadersForLongNumbers(paxHeaders,  entry);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  addPaxHeadersForLongNumbers(paxHeaders,  entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  addPaxHeadersForLongNumbers(paxHeaders,  entry);  }	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
102	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  BigNUMBER_STAR);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  BigNUMBER_STAR);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  BigNUMBER_STAR);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
103	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  cachedName);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  cachedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  cachedName);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
104	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_STAR)  {  writePaxHeadersForLongNumbers(entryName);  }  else  {  throw  new  IllegalStateException( " ");  }	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
105	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getURLName());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getURLName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getURLName());	  paxHeaders.put(   "path       ",    entry.getURLName());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
106	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getName());	  PaxHeaders.put(   "path       ",    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
107	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getPathName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getPathName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getPathName());	  paxHeaders.put(entryName,    entry.getPathName());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
108	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
109	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
110	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_STAR  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_STAR  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_STAR  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
111	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  BigInteger.parseBigInteger(entryName)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  BigInteger.parseBigInteger(entryName)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  BigInteger.parseBigInteger(entryName)))  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  BIGNUMBER_STAR))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  BIGNUMBER_STAR))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode  ==  BIGNUMBER_STAR))  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
113	[BUG]  [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  ||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	||(bigNumberMode  ==  BIGNUMBER_POSIX  &&  bigNumberMode!=  LONGFILE_GNU))  {  throw  new  IllegalArgumentException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	throw  new  IllegalArgumentException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getRawName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getRawName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getRawName());	  paxHeaders.put(   "path       ",    entry.getRawName());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
116	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getURL());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getURL());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
117	[BUG]  [BUGGY]  paxHeaders.put( "url   ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "url   ",  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "url   ",  entry.getURL());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
118	[BUG]  [BUGGY]  paxHeaders.put(entryName,  entry.getUri());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  entry.getUri());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  entry.getUri());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
119	[BUG]  [BUGGY]  failForBigNumbers(entry);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  failForBigNumbers(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	failForBigNumbers(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
120	[BUG]  [BUGGY]  failForPaxHeaders(entry);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  failForPaxHeaders(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	failForPaxHeaders(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  failForNonAsciiNames(entry);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  failForNonAsciiNames(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	failForNonAsciiNames(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  FailForBigNumbers(entry);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  FailForBigNumbers(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	FailForBigNumbers(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addEntry(entry);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addEntry(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	Thread.currentThread().getContextClassLoader().addEntry(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(paxHeaders,  buffer);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
125	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cache);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cache);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  cache);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
126	[BUG]  [BUGGY]  PaxHeaders.put(entry.getName(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getName(),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getName(),  entry.getPath());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
127	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  paxHeaders.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  paxHeaders.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  paxHeaders.getPath());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
128	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getName());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
129	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()  +  1);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getPath()  +  1);	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
130	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getValue());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getValue());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getValue());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
131	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getName());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entryName);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
132	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getEntryName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getEntryName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getEntryName());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entryName);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
133	[BUG]  [BUGGY]  patterns.put(entryName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  patterns.put(entryName,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	patterns.put(entryName,  entry.getPath());	  paxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
134	[BUG]  [BUGGY]  păxHeaders.put(entryName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  păxHeaders.put(entryName,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	păxHeaders.put(entryName,  entry.getPath());	  paxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
135	[BUG]  [BUGGY]  paxHeaders.put( "filename ",  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "filename ",  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "filename ",  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
136	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry.getPath());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
137	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getEncodingName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getEncodingName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry.getEncodingName());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
138	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getValue());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getValue());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry.getValue());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
139	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getSourceName());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getSourceName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry.getSourceName());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
140	[BUG]  [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getSize());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName,  archiveEntry.getSize());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName,  archiveEntry.getSize());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
141	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).toPath());	  paxHeaders.put(   "path       ",    new    Path(entryName).toString());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
142	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  path.toString());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  path.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  path.toString());	  paxHeaders.put(   "path       ",    new    Path(entryName).toString());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
143	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toURI());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).toURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).toURI());	  paxHeaders.put(   "path       ",    new    Path(entryName).getPath());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
144	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getURI());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).getURI());	  paxHeaders.put(   "path       ",    new    Path(entryName).getPath());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
145	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer,  encoding);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  encodedName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  encodedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer,  encodedName);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
147	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  nameEncoding);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  nameEncoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer,  nameEncoding);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
148	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  end);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  end);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer,  end);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
149	[BUG]  [BUGGY]  safeGet(entryName)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  safeGet(entryName)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	safeGet(entryName)  {  throw  new  IllegalArgumentException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
150	[BUG]  [BUGGY]  allowNonAsciiNames(entryName);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  allowNonAsciiNames(entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	allowNonAsciiNames(entryName);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
151	[BUG]  [BUGGY]  writePaxHeaders(entryName,  0);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  0);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  0);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
152	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_POSIX);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_POSIX);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  LONGFILE_POSIX);	  writePaxHeaders(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
153	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH_SIZE);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH_SIZE);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  PATH_SIZE);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
154	[BUG]  [BUGGY]  paxHeaders.put( "urlpath   ",  entry.getURLName());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "urlpath   ",  entry.getURLName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "urlpath   ",  entry.getURLName());	  paxHeaders.put(   "path       ",    entry.getURLName());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
155	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  archiveEntry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  archiveEntry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  archiveEntry.getPath());	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
156	[BUG]  [BUGGY]  writePaxHeaders(entryName,  archiveEntry.getEncoding());  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  archiveEntry.getEncoding());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  archiveEntry.getEncoding());	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
157	[BUG]  [BUGGY]  writePaxHeaders(entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entryName,  buffer);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entryName,  buffer);	  writePaxHeaders(entryName);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
158	[BUG]  [BUGGY]  paxHeaders.put( "syntheticPath ",  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "syntheticPath ",  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "syntheticPath ",  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
159	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getURI());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getURI());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
160	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getArchivePath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getArchivePath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getArchivePath());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entryName);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
161	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  path.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  path.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  path.getPath());	  paxHeaders.put(   "path       ",    path.toString());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
162	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  path.getName());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  path.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  path.getName());	  paxHeaders.put(   "path       ",    path.toString());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
163	[BUG]  [BUGGY]  paxHeaders.put( "filepath   ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "filepath   ",  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "filepath   ",  entry.getPath());	  paxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
164	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getLinkName());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getLinkName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getLinkName());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
165	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getEncoding());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getEncoding());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getEncoding());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
166	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders.size());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
167	[BUG]  [BUGGY]  paxHeaders.put( "entryName ",  entry.getURI());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "entryName ",  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "entryName ",  entry.getURI());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
168	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(encoding),  encodedName);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(encoding),  encodedName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(encoding),  encodedName);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encodedName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
169	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encodedPath);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  encodedPath);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  encodedPath);	  paxHeaders.put(   "path       ",    new    Path(entryName),    encodedName);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
170	[BUG]  [BUGGY]  PaxHeaders.put(entryName  + "path ");  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName  + "path ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName  + "path ");	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
171	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()  + "path ");  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()  + "path ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getPath()  + "path ");	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
172	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getRawPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  entry.getRawPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getRawPath());	  paxHeaders.put(   "path       ",    entry.getRawName());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
173	[BUG]  [BUGGY]  paxHeaders.put( "url: ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "url: ",  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "url: ",  entry.getURL());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
174	[BUG]  [BUGGY]  paxHeaders.put( "entryName   ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "entryName   ",  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "entryName   ",  entry.getURL());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
175	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  buffer);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  buffer);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  buffer);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
176	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  encoding);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  encoding);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  encoding);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
177	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  BigNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  BigNUMBER_POSIX);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  BigNUMBER_POSIX);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
178	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  4);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  4);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  4);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
179	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH_POSIX);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  PATH_POSIX);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  PATH_POSIX);	  writePaxHeadersForNonAsciiNames(entryName,    BigNUMBER_POSIX);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
180	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  entry.getFileName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  entry.getFileName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  entry.getFileName());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
181	[BUG]  [BUGGY]  failForNumbers(entry);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  failForNumbers(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	failForNumbers(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
182	[BUG]  [BUGGY]  failForBooleanNumbers(entry);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  failForBooleanNumbers(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	failForBooleanNumbers(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
183	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.length);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  buffer.length);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  buffer.length);	  paxHeaders.put(   "path       ",    new    Path(entryName),    buffer);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
184	[BUG]  [BUGGY]  paxHeaders.put( "tarpath   ",  entry.getTarName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "tarpath   ",  entry.getTarName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "tarpath   ",  entry.getTarName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
185	[BUG]  [BUGGY]  safeGet(entryName)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  safeGet(entryName)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	safeGet(entryName)  {  throw  new  IllegalStateException( " ");  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
186	[BUG]  [BUGGY]  allowNonAsciiNames(entry);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  allowNonAsciiNames(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	allowNonAsciiNames(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
187	[BUG]  [BUGGY]  paxHeaders.put( "path "),  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path "),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path "),  entry.getPath());	  paxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
188	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  sourcePath);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  sourcePath);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  sourcePath);	  paxHeaders.put(   "path       ",    new    Path(entryName),    path);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
189	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entryName.toString());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  entryName.toString());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entryName.toString());	  paxHeaders.put(   "path       ",    path.toString());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
190	[BUG]  [BUGGY]  if(entry.isSymbolicLink())  {  failForBigNumbers(entry);  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(entry.isSymbolicLink())  {  failForBigNumbers(entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(entry.isSymbolicLink())  {  failForBigNumbers(entry);  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
191	[BUG]  [BUGGY]  if(entry!=  BIGNUMBER_POSIX)  {  failForBigNumbers(entry);  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(entry!=  BIGNUMBER_POSIX)  {  failForBigNumbers(entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(entry!=  BIGNUMBER_POSIX)  {  failForBigNumbers(entry);  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
192	[BUG]  [BUGGY]  if(entry.isSymbolicLink()  ||  entry.isSymbolicLink())  {  failForBigNumbers(entry);  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(entry.isSymbolicLink()  ||  entry.isSymbolicLink())  {  failForBigNumbers(entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(entry.isSymbolicLink()  ||  entry.isSymbolicLink())  {  failForBigNumbers(entry);  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
193	[BUG]  [BUGGY]  if(entry.isSymbolicLink()  ||  bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(entry.isSymbolicLink()  ||  bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(entry.isSymbolicLink()  ||  bigNumberMode  ==  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    failForBigNumbers(entry);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
194	[BUG]  [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getEncodingName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getEncodingName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "encoded  path   ",  entry.getEncodingName());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
195	[BUG]  [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getEncoding());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getEncoding());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "encoded  path   ",  entry.getEncoding());	  paxHeaders.put(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
196	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getKey());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getKey());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getKey());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entryName);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
197	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getValue());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName),  entry.getValue());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName),  entry.getValue());	  paxHeaders.put(   "path       ",    new    Path(entryName),    entryName);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
198	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getRawClass());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  new  Path(entryName).getRawClass());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  new  Path(entryName).getRawClass());	  paxHeaders.put(   "path       ",    new    Path(entryName).getPath());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
199	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()));  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getPath()));  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getPath()));	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
200	[BUG]  [BUGGY]  PaxHeaders.put(entry.getFileName(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getFileName(),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getFileName(),  entry.getPath());	  PaxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
201	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entry,  currName);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entry,  currName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entry,  currName);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
202	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  currName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  currName);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
203	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cachedPath);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  cachedPath);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  cachedPath);	  writePaxHeadersForNonAsciiNames(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
204	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BIGNUMBER_POSIX);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  BIGNUMBER_POSIX);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  BIGNUMBER_POSIX);	  writePaxHeadersForNonAsciiNames(entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
205	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry.getMode());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry.getMode());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  entry.getMode());	  writePaxHeadersForNonAsciiNames(entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
206	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry.getKey());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  entry.getKey());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  entry.getKey());	  writePaxHeadersForNonAsciiNames(entryName,    bigNumberMode);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
207	[BUG]  [BUGGY]  paxHeaders.put(   "tarName ",  entry.getTarName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(   "tarName ",  entry.getTarName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(   "tarName ",  entry.getTarName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
208	[BUG]  [BUGGY]  paxHeaders.put(   "tarname ",  entry.getTarName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(   "tarname ",  entry.getTarName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(   "tarname ",  entry.getTarName());	  paxHeaders.put(entryName,    entry.getTarName());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
209	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  +  1);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath()  +  1);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  +  1);	  PaxHeaders.put(   "path       ",    entry.getPath()    +    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
210	[BUG]  [BUGGY]  PaxHeaders.put(entry.getSyntheticPath(),  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getSyntheticPath(),  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getSyntheticPath(),  entry.getSyntheticPath());	  PaxHeaders.put(   "path       ",    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
211	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath(),  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath(),  entry.getSyntheticPath());	  PaxHeaders.put(   "path       ",    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
212	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
213	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
214	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
215	[BUG]  [BUGGY]  paxHeaders.put(   "URL ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(   "URL ",  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(   "URL ",  entry.getURL());	  paxHeaders.put(entryName,    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
216	[BUG]  [BUGGY]  PaxHeaders.put(entry.getName(),  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getName(),  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getName(),  entry.getName());	  PaxHeaders.put(   "path       ",    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
217	[BUG]  [BUGGY]  paxHeaders.put(entryName.getPath(),  entry.getPath());  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entryName.getPath(),  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entryName.getPath(),  entry.getPath());	  paxHeaders.put(entry.getPath(),    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
218	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  entryName);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  buffer,  entryName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  buffer,  entryName);	  writePaxHeadersForNonAsciiNames(entryName,    buffer);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
219	[BUG]  [BUGGY]  writePaxHeadersForLongNumbers(entryName,  entry);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForLongNumbers(entryName,  entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForLongNumbers(entryName,  entry);	  writePaxHeadersForLongNumbers(entryName);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
220	[BUG]  [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_POSIX)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  if(bigNumberMode  ==  BIGNUMBER_POSIX)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	if(bigNumberMode  ==  BIGNUMBER_POSIX)  {  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders);  }	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
221	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getCharacterIndex());  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getCharacterIndex());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getCharacterIndex());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
222	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getMode());  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getMode());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeadersForNonAsciiNames(entryName,  paxHeaders,  entry.getMode());	  writePaxHeadersForNonAsciiNames(entryName,    paxHeaders);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
223	[BUG]  [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath()));  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entryName,  paxHeaders.getPath()));  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entryName,  paxHeaders.getPath()));	  PaxHeaders.put(entryName,    paxHeaders.getPath());    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
224	[BUG]  [BUGGY]  allowInvalidArchiveEntry(entry);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  allowInvalidArchiveEntry(entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	allowInvalidArchiveEntry(entry);	  if(bigNumberMode    ==    BIGNUMBER_STAR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
225	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  + ".path ");  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath()  + ".path ");  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  + ".path ");	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
226	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  +  entryName,  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath()  +  entryName,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  +  entryName,  entry.getPath());	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
227	[BUG]  [BUGGY]  PaxHeaders.put(entry.getPath()  + "path ",  entry.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry.getPath()  + "path ",  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry.getPath()  + "path ",  entry.getPath());	  PaxHeaders.put(entry.getPath()    +   "path   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
228	[BUG]  [BUGGY]  paxHeaders.put(entry.getFileName(),  entry.getURL());  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getFileName(),  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getFileName(),  entry.getURL());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
229	[BUG]  [BUGGY]  paxHeaders.put(entry.getPath()  + ",  entry.getURL());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(entry.getPath()  + ",  entry.getURL());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(entry.getPath()  + ",  entry.getURL());	  paxHeaders.put(entry.getPath(),    entry.getURL());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
230	[BUG]  [BUGGY]  writePaxHeaders(entry,  currName);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  writePaxHeaders(entry,  currName);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	writePaxHeaders(entry,  currName);	  writePaxHeaders(entryName,    entry);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
231	[BUG]  [BUGGY]  paxHeaders.put(   "root ",  entry.getURI());  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(   "root ",  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(   "root ",  entry.getURI());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
232	[BUG]  [BUGGY]  paxHeaders.put( "filename ",  entry.getURI());  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "filename ",  entry.getURI());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "filename ",  entry.getURI());	  paxHeaders.put(entryName,    entry.getURI());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
233	[BUG]  [BUGGY]  paxHeaders.put( "synthetic  path   ",  entry.getSyntheticPath());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "synthetic  path   ",  entry.getSyntheticPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "synthetic  path   ",  entry.getSyntheticPath());	  paxHeaders.put(entryName,    entry.getSyntheticPath());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
234	[BUG]  [BUGGY]  PaxHeaders.put(ENTRY_NAME,  entry.getPath());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(ENTRY_NAME,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(ENTRY_NAME,  entry.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
235	[BUG]  [BUGGY]  PaxHeaders.put(encoding,  entry.getPath());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(encoding,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(encoding,  entry.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
236	[BUG]  [BUGGY]  PaxHeaders.put(entry,  entry.getPath());  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  PaxHeaders.put(entry,  entry.getPath());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	PaxHeaders.put(entry,  entry.getPath());	  PaxHeaders.put(entryName,    entry.getPath());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
237	[BUG]  [BUGGY]  paxHeaders.put(   "encodedPath ",  entry.getName());  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put(   "encodedPath ",  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put(   "encodedPath ",  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
238	[BUG]  [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getName());  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "encoded  path   ",  entry.getName());  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "encoded  path   ",  entry.getName());	  paxHeaders.put(entryName,    entry.getName());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
239	[BUG]  [BUGGY]  paxHeaders.put( "path   ",  entry.getPath(),  entry);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      }  if  (bigNumberMode  ==  BIGNUMBER_POSIX)  {  addPaxHeadersForBigNumbers(paxHeaders,  entry);  }  else  if  (bigNumberMode  !=  BIGNUMBER_STAR)  {  failForBigNumbers(entry);  }  if  (addPaxHeadersForNonAsciiNames  &&  !paxHeaderContainsPath  &&  !ASCII.canEncode(entryName))  {      [BUGGY]  paxHeaders.put( "path   ",  entry.getPath(),  entry);  [BUGGY]      }  if  (addPaxHeadersForNonAsciiNames  &&  (entry.isLink()  ||  entry.isSymbolicLink())  &&  !ASCII.canEncode(entry.getLinkName()))  {  paxHeaders.put(     "linkpath     ",  entry.getLinkName());  }  if  (paxHeaders.size()  >  0)  {  writePaxHeaders(entryName,  paxHeaders);  [CLASS]  TarArchiveOutputStream  [METHOD]  putArchiveEntry  [RETURN_TYPE]  void  ArchiveEntry  archiveEntry  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  OutputStream  os  out  TarBuffer  buffer  ArchiveEntry  archiveEntry  String  currName  encoding  entryName  Map  paxHeaders  ByteBuffer  encodedName  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  assemLen  bigNumberMode  blockSize  longFileMode  nameLen  recordSize  long  currBytes  currSize  TarArchiveEntry  entry  longLinkEntry  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.7071067811865475	304	304	1	replace	paxHeaders.put( "path   ",  entry.getPath(),  entry);	  paxHeaders.put(   "path       ",    new    Path(entryName),    entry);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
