bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  line  =  len  +  1  +  key  +   "= "  +  value  + ".n ";  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  len  +  1  +  key  +   "= "  +  value  + ".n ";  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  len  +  1  +  key  +   "= "  +  value  + ".n ";	  String    line    =    len    +    1    +    key    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  String  line  =  len  +  1  +  key  +   "= "  +  value  +  'n';  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  len  +  1  +  key  +   "= "  +  value  +  'n';  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  len  +  1  +  key  +   "= "  +  value  +  'n';	  String    line    =    len    +    1    +    key    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  String  line  =  value  +  len  +  key  + "= "  +  len  +   "n ";  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  value  +  len  +  key  + "= "  +  len  +   "n ";  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  value  +  len  +  key  + "= "  +  len  +   "n ";	  String    line    =    len    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  int  lineLen  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLen  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLen  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  final  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  final  int  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	final  int  len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
7	[BUG]  [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  len  =  line.getBytes(CharsetNames.UTF_8);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
8	[BUG]  [BUGGY]  final  int  len  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  final  int  len  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	final  int  len  =  line.getBytes(CharsetNames.UTF_8);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  int  lineLen  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLen  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLen  =  line.getBytes(CharsetNames.UTF_8);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  Integer  line  =  w.intValue();  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  Integer  line  =  w.intValue();  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	Integer  line  =  w.intValue();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  String  line  =  len  +   "   "  +  key  +   "=   "  +  value  +  'n';  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  len  +   "   "  +  key  +   "=   "  +  value  +  'n';  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  len  +   "   "  +  key  +   "=   "  +  value  +  'n';	  String    line    =    len    +       "       "    +    key    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  String  line  =  len  +  key  +   "=   "  +  value  +  'n';  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  len  +  key  +   "=   "  +  value  +  'n';  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  len  +  key  +   "=   "  +  value  +  'n';	  String    line    =    len    +    key    +   "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  String  line  =  value  +  1  +   "   "  +  key  +   "=   "  +  len  +   "n ";  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  value  +  1  +   "   "  +  key  +   "=   "  +  len  +   "n ";  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  value  +  1  +   "   "  +  key  +   "=   "  +  len  +   "n ";	  String    line    =    len    +    1    +       "       "    +    key    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	3	None	replace
14	[BUG]  [BUGGY]  String  line  =  len  +  1  +  value  +   "=   "  +  key  +   "n ";  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  String  line  =  len  +  1  +  value  +   "=   "  +  key  +   "n ";  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	String  line  =  len  +  1  +  value  +   "=   "  +  key  +   "n ";	  String    line    =    len    +    1    +    key    +       "=   "    +    value    +   "n   ";    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  false;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  false;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  false;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(key);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(key);  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.containsKey(key);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)  ==  false;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)  ==  false;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)  ==  false;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.isEmpty();  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.isEmpty();  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.isEmpty();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(key);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(key);  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  headers.contains(key);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  true;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  true;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	boolean  addPaxHeadersForNonAsciiNames  =  line.getBytes(CharsetNames.UTF_8)!=  true;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  while(len  >=  0)  {  len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  while(len  >=  0)  {  len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  while(len  >=  0)  {  len  =  line.getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(lineLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(lineLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(lineLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(len  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    TarArchiveEntry  pex  =  new  TarArchiveEntry(name,  TarConstants.LF_PAX_EXTENDED_HEADER_LC);  StringWriter  w  =  new  StringWriter();  for  (Map.Entry<String,  String>  h  :  headers.entrySet())  {  String  key  =  h.getKey();  String  value  =  h.getValue();  int  len  =  key.length()  +  value.length()  +  3  /*  blank,  equals  and  newline  */  +  2  /*  guess  9  <  actual  length  <  100  */;    [BUGGY]  int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(len  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.31622776601683794	472	472	1	replace	int  lineLength  =  line.getBytes(CharsetNames.UTF_8).length;  if(len  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
