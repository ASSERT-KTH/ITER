bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  if(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
9	[BUG]  [BUGGY]  if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
10	[BUG]  [BUGGY]  if(value  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(value  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  4;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
19	[BUG]  [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(w);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(w);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(pex);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(pex);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(pex);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(w,  headers);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(w,  headers);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(w,  headers);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(pex,  headers);  [CE]  <identifier>  expected  [FE]                                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(pex,  headers);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(pex,  headers);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  3;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CHARSETNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CHARSETNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CHARSETNames.UTF_8).length;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  w.write(line);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  w.write(line);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(line);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(line);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(wBuffer);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(wBuffer);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  if(actualLength!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  if(actualLength!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(actualLength!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
38	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
39	[BUG]  [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
40	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  6;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  6;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  6;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  5;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  len;  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  len;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  1;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(charsetNames.UTF_8).length  +  1;	  actualLength    =    line.getBytes(charsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharacterNames.UTF_8).length;	  actualLength    =    line.getBytes(charsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  ||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  ||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  if(line  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  if(line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
52	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  actualLength    =    line.getBytes(charsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  if(line!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
54	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
55	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
56	[BUG]  [BUGGY]  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
59	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
60	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    String  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +     "     "  +  key  +     "=   "  +  value  +     "\n   ";    [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]    }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  4;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
