bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
2	[BUG]  [BUGGY]  w.write(key);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(key);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(key);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
3	[BUG]  [BUGGY]  if(line  ==  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
4	[BUG]  [BUGGY]  if(currName!=  null)  {  w.write(line);  line  =  currName.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currName!=  null)  {  w.write(line);  line  =  currName.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currName!=  null)  {  w.write(line);  line  =  currName.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
5	[BUG]  [BUGGY]  w.write('n');  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write('n');  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write('n');  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
6	[BUG]  [BUGGY]  if(line!=  null)  {  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
7	[BUG]  [BUGGY]  if(len  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
8	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
9	[BUG]  [BUGGY]  ||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
10	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
11	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
12	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
13	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
14	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  2;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    2;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
17	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(w);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(w);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(w);	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(w);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
21	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  2;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
22	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
23	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
24	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
25	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
26	[BUG]  [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
27	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
28	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
29	[BUG]  [BUGGY]  if(line!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
30	[BUG]  [BUGGY]  line  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  line  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	line  =  line.getBytes(CharsetNames.UTF_8).length;	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
31	[BUG]  [BUGGY]  if(value!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
32	[BUG]  [BUGGY]  if(line  ==  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
33	[BUG]  [BUGGY]  Line  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Line  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Line  =  line.getBytes(CharsetNames.UTF_8).length;	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
34	[BUG]  [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(!addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(!addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
35	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
36	[BUG]  [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
37	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
38	[BUG]  [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsci  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsci	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
39	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
40	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
41	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
42	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
43	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
44	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
45	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
46	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
47	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  w.getBytes(CharsetNames.UTF_8).length;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
48	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
49	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(CharsetNames.UTF_8);	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
50	[BUG]  [BUGGY]  ||(value!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(value!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(value!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
51	[BUG]  [BUGGY]  ||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)  ==  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)  ==  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)  ==  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
52	[BUG]  [BUGGY]  ||(line  ==  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(line  ==  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(line  ==  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
53	[BUG]  [BUGGY]  ||(lines!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(lines!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(lines!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
54	[BUG]  [BUGGY]  ||(line  >=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(line  >=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(line  >=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
55	[BUG]  [BUGGY]  ||(actualLength!=  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(actualLength!=  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(actualLength!=  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
56	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  1;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  4;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
58	[BUG]  [BUGGY]  w.write(key);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(key);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(key);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
59	[BUG]  [BUGGY]  w.write('n');  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write('n');  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write('n');	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
60	[BUG]  [BUGGY]  w.write(line  + "n ");  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(line  + "n ");  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(line  + "n ");	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
61	[BUG]  [BUGGY]  w.write(entryName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(entryName);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(entryName);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
62	[BUG]  [BUGGY]  w.write(line,  0,  len);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(line,  0,  len);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(line,  0,  len);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
63	[BUG]  [BUGGY]  w.write(key,  value);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(key,  value);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(key,  value);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
64	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  4;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    4;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  3;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    1;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
66	[BUG]  [BUGGY]  if(line.getBytes(key).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
67	[BUG]  [BUGGY]  if(line.getBytes(key).length  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
68	[BUG]  [BUGGY]  if(line.getBytes(key).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
69	[BUG]  [BUGGY]  if(line.getBytes(key),  actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key),  actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key),  actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
70	[BUG]  [BUGGY]  if(len  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    >=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
71	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
72	[BUG]  [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  -  1;  }	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
73	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
74	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
75	[BUG]  [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
76	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsci  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsci  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsci	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
77	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
78	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
79	[BUG]  [BUGGY]  if(line.getBytes(value)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(value)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(value)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  if(line.getBytes(key)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
81	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
82	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
83	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex);  }	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
84	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
85	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
86	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
87	[BUG]  [BUGGY]  if(entryName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
89	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName  + "n ");  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName  + "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName  + "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
90	[BUG]  [BUGGY]  if(line.getBytes()  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes()  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes()  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
91	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
92	[BUG]  [BUGGY]  ||  w.toString().getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  w.toString().getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  w.toString().getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  ||  w.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  w.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  w.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  &&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	&&  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
96	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)  >=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
97	[BUG]  [BUGGY]  if(actualLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
98	[BUG]  [BUGGY]  if(len!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
99	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
100	[BUG]  [BUGGY]  if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
101	[BUG]  [BUGGY]  if(value!=  null)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
102	[BUG]  [BUGGY]  if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
103	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
104	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
105	[BUG]  [BUGGY]  if(actualLength  >  0)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >  0)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >  0)  {  if(actualLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
106	[BUG]  [BUGGY]  if(len!=  0)  {  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
107	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  5;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  5;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  5;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    5;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
108	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1  +  len;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
109	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  len;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
110	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2  +  len;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
111	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4  +  len;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
112	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2  +  len;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  2  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
113	[BUG]  [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_GNU  =  line.getBytes(CharsetNames.UTF_8).length;	  if(value    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
114	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  6;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  6;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  6;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    6;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
115	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  entryName);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  entryName);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  entryName);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
116	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  assemLen);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  assemLen);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  assemLen);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
117	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  0);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  0);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  0);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
118	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  true);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  true);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  true);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
119	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  cache);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  cache);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  cache);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
120	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  w);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  w);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  w);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
121	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  cached);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  cached);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  cached);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
122	[BUG]  [BUGGY]  ||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(actualLength  ==  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null);	  if(line    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
123	[BUG]  [BUGGY]  if(value!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
124	[BUG]  [BUGGY]  if(value  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
125	[BUG]  [BUGGY]  if(line.length()  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
126	[BUG]  [BUGGY]  if(value.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
127	[BUG]  [BUGGY]  if(line.length()  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
128	[BUG]  [BUGGY]  ||  line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
129	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CHARSETNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CHARSETNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CHARSETNames.UTF_8).length  +  1;	  actualLength    =    line.getBytes(CHARSETNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
130	[BUG]  [BUGGY]  if(actualLength  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    >    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
131	[BUG]  [BUGGY]  if(len  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    >    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
132	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
133	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
134	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
135	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
136	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
137	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
138	[BUG]  [BUGGY]  ActualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
139	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
140	[BUG]  [BUGGY]  ActualLength  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  w.toString().getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  w.toString().getBytes(CharsetNames.UTF_8).length;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
141	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
142	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  1;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
143	[BUG]  [BUGGY]  if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
144	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharacterNames.UTF_8).length;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
145	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  2;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
146	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharacterNames.UTF_8).length  -  1;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
147	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
148	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  3;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
149	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  3;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    3;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
150	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
151	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
152	[BUG]  [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
153	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
154	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
155	[BUG]  [BUGGY]  if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
156	[BUG]  [BUGGY]  if(len  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
157	[BUG]  [BUGGY]  if(currentLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currentLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currentLength  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
158	[BUG]  [BUGGY]  if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
159	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
160	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
161	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
162	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line,  headers);	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
163	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames(line,  headers))  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames(line,  headers))  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames(line,  headers))  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
164	[BUG]  [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(updatePaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
165	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
166	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)  ==  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
167	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  key)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  key)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  key)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
168	[BUG]  [BUGGY]  if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  currName.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  currName.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
169	[BUG]  [BUGGY]  if(len!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
170	[BUG]  [BUGGY]  if(len  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
171	[BUG]  [BUGGY]  while(line!=  null  &&  actualLength  <  line.length())  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null  &&  actualLength  <  line.length())  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null  &&  actualLength  <  line.length())  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
172	[BUG]  [BUGGY]  while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
173	[BUG]  [BUGGY]  while(line!=  null  &&  actualLength  <  line.length)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null  &&  actualLength  <  line.length)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null  &&  actualLength  <  line.length)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
174	[BUG]  [BUGGY]  if(line!=  null)  {  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
175	[BUG]  [BUGGY]  While(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  While(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	While(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
176	[BUG]  [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
177	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
178	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
179	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
180	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
181	[BUG]  [BUGGY]  if(line.getBytes()!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes()!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes()!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
182	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getIntValue(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getIntValue(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getIntValue(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
183	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  1;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
184	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
185	[BUG]  [BUGGY]  Len  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
186	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  2;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
187	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(charsetNames.UTF_8).length;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
188	[BUG]  [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  4;	  Len    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
189	[BUG]  [BUGGY]  if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
190	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
191	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
192	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
193	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
194	[BUG]  [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
195	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
196	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
197	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
198	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getIntValue(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getIntValue(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getIntValue(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
199	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
200	[BUG]  [BUGGY]  actualLength  =  line.getString(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getString(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getString(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
201	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
202	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  true);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  true);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  true);	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
203	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
204	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  headers.put(key,  line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  headers.put(key,  line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  headers.put(key,  line);  }	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
205	[BUG]  [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
206	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
207	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
208	[BUG]  [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  ==  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
209	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
210	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  actualLength;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
211	[BUG]  [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }	  if(line!=    null)    {    for(String    key    :    headers.keySet())    {    line    =    key    +   "=   "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
212	[BUG]  [BUGGY]  if(entryName!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }	  if(line!=    null)    {    for(String    key    :    headers.keySet())    {    line    =    key    +   "=   "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
213	[BUG]  [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null)  {  for(String  key  :  headers.keySet())  {  line  =  key  + "= "  +  value  + "n ";  }	  if(line!=    null)    {    for(String    key    :    headers.keySet())    {    line    =    key    +   "=   "    +    value    +   "n   ";    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
214	[BUG]  [BUGGY]  if(line.getBytes()!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes()!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes()!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes()!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
215	[BUG]  [BUGGY]  ||  line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes()!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
216	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CHARSETNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CHARSETNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CHARSETNames.UTF_8).length;	  actualLength    =    line.getBytes(CHARSETNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
217	[BUG]  [BUGGY]  if(actualLength!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
218	[BUG]  [BUGGY]  if(currentLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currentLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currentLength!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
219	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  buffer.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  buffer.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  buffer.getBytes(CharsetNames.UTF_8).length;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
220	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(key).length;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(key).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(key).length;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
221	[BUG]  [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  LONGFILE_TRUNCATE  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	LONGFILE_TRUNCATE  =  line.getBytes(charsetNames.UTF_8).length;	  LONGFILE_TRUNCATE    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	59	None	replace
222	[BUG]  [BUGGY]  if(line.getBytes(key)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
223	[BUG]  [BUGGY]  if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currName.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
224	[BUG]  [BUGGY]  if(line  >=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  >=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  >=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
225	[BUG]  [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append('n');  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
226	[BUG]  [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append( "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  else  {  buffer.append( "n ");  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
227	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
228	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(key);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
229	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  ==  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
230	[BUG]  [BUGGY]  if(value!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  0)  {  line  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
231	[BUG]  [BUGGY]  while(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
232	[BUG]  [BUGGY]  while(len!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(len!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(len!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
233	[BUG]  [BUGGY]  ||  buffer.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  buffer.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  buffer.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
234	[BUG]  [BUGGY]  ||  headers.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  headers.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  headers.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
235	[BUG]  [BUGGY]  if(actualLength  <  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  <  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  <  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    >    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
236	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  ==  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
237	[BUG]  [BUGGY]  if(len.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len.length()  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
238	[BUG]  [BUGGY]  if(line.length()!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
239	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  encoding);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  encoding);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  encoding);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
240	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  encoding);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  encoding);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  encoding);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
241	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  assemBuf);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  assemBuf);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  assemBuf);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
242	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  wOffset);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  wOffset);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  wOffset);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
243	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
244	[BUG]  [BUGGY]  if(value!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
245	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
246	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
247	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
248	[BUG]  [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  4;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    4;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
249	[BUG]  [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  -  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
250	[BUG]  [BUGGY]  actualLength  =  len.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  len.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  len.getBytes(CharsetNames.UTF_8).length  -  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
251	[BUG]  [BUGGY]  ActualLength  =  currName.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  currName.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  currName.getBytes(CharsetNames.UTF_8).length;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
252	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
253	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
254	[BUG]  [BUGGY]  if(line!=  null  ||  line.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null  ||  line.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null  ||  line.length()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
255	[BUG]  [BUGGY]  if(line  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
256	[BUG]  [BUGGY]  if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
257	[BUG]  [BUGGY]  if(actualLength!=  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength!=  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength!=  0)  {  line  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
258	[BUG]  [BUGGY]  w.write(line.getBytes(key).length);  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(line.getBytes(key).length);  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(line.getBytes(key).length);  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
259	[BUG]  [BUGGY]  w.write(value);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(value);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(value);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
260	[BUG]  [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  buffer.getBytes(CharsetNames.UTF_8).length  +  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    +    1;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
261	[BUG]  [BUGGY]  Line  w  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Line  w  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Line  w  =  line.getBytes(CharsetNames.UTF_8).length;	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
262	[BUG]  [BUGGY]  file  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  file  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	file  =  line.getBytes(CharsetNames.UTF_8).length;	  if(actualLength!=    null)    {    line    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
263	[BUG]  [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
264	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
265	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
266	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
267	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(len,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(len,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
268	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
269	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
270	[BUG]  [BUGGY]  if(line.getBytes(KeyChars.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(KeyChars.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(KeyChars.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
271	[BUG]  [BUGGY]  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
272	[BUG]  [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length!=  0)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
273	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
274	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
275	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
276	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writeP  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writeP  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writeP	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
277	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  len;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  len;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2  +  len;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    /    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
278	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  else  writePaxHeadersForNonAsciiNames(line);	  writePaxHeadersForNonAsciiNames(pex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
279	[BUG]  [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
280	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
281	[BUG]  [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length!=  0)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
282	[BUG]  [BUGGY]  if(line.getBytes(KeyCharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(KeyCharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(KeyCharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(KeyCharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(KeyCharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getString(KeyCharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
283	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getInt(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getInt(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getInt(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
284	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  wBuffer);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  wBuffer);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  wBuffer);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
285	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
286	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  addPaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
287	[BUG]  [BUGGY]  Writer  w  =  writePaxHeadersForNonAsciiNames(wBuffer);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Writer  w  =  writePaxHeadersForNonAsciiNames(wBuffer);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Writer  w  =  writePaxHeadersForNonAsciiNames(wBuffer);	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
288	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(len);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(wBuffer);  }  else  {  writePaxHeadersForNonAsciiNames(len);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
289	[BUG]  [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  ==  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
290	[BUG]  [BUGGY]  if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
291	[BUG]  [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
292	[BUG]  [BUGGY]  if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(currentLength!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
293	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
294	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  2;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  2;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  2;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
295	[BUG]  [BUGGY]  actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  buffer.getBytes(CharacterNames.UTF_8).length;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
296	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharacterNames.UTF_8).length  +  4;	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
297	[BUG]  [BUGGY]  &&(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  &&(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	&&(line!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
298	[BUG]  [BUGGY]  ||(len!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(len!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(len!=  null  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
299	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
300	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
301	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
302	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
303	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers.length);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers.length);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers.length);	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
304	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line  + "n ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line  + "n ");  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line  + "n ");	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
305	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line  +  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line  +  1);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line  +  1);	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
306	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
307	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writePaxHeadersForNonAsciiNames	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
308	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
309	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writeP  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writeP  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames!=  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  else  {  writeP	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
310	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  key;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  key;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1  +  key;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
311	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
312	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
313	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
314	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
315	[BUG]  [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(headers!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
316	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(wBuffer);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
317	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  if(addPaxHeadersForNonAsciiNames)  {  writePaxHeaders	  writePaxHeadersForNonAsciiNames(wBuffer);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
318	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.US_ASCII).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.US_ASCII).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  +=  line.getBytes(CharsetNames.US_ASCII).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    +=    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
319	[BUG]  [BUGGY]  if(w!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(w!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(w!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line!=    null)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
320	[BUG]  [BUGGY]  ActualLength  =  line.getBytes(charsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  line.getBytes(charsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  line.getBytes(charsetNames.UTF_8).length;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
321	[BUG]  [BUGGY]  ActualLength  =  len.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ActualLength  =  len.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	ActualLength  =  len.getBytes(CharsetNames.UTF_8).length;	  ActualLength    =    line.getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
322	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append( "n ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append( "n ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append( "n ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
323	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  line.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    line.append('n');    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
324	[BUG]  [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  5;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  5;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  w.getBytes(CharsetNames.UTF_8).length  +  5;	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    +    5;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
325	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  /  2;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
326	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
327	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)line  =  line.substring(0,  len);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)line  =  line.substring(0,  len);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)line  =  line.substring(0,  len);  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(line);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
328	[BUG]  [BUGGY]  if(actualLength  <  2)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  <  2)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  <  2)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    >    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
329	[BUG]  [BUGGY]  if(value!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
330	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
331	[BUG]  [BUGGY]  final  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  final  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	final  int  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;	  if(actualLength!=    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames(line);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
332	[BUG]  [BUGGY]  if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  -  1;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	15	None	replace
333	[BUG]  [BUGGY]  if(line.length()  <  =  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()  <  =  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  <  =  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
334	[BUG]  [BUGGY]  if(line.length()  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  >=  0)  {  actualLength  =  w.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
335	[BUG]  [BUGGY]  if(line.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.length()    ==    0)    {    actualLength    =    w.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
336	[BUG]  [BUGGY]  if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(len  >=  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
337	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  LONGFILE_GNU;  i++)  {  line  =  i  +  1;  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  LONGFILE_GNU;  i++)  {  line  =  i  +  1;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  LONGFILE_GNU;  i++)  {  line  =  i  +  1;  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    line    =    i    +    1;    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
338	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName).append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName).append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append(entryName).append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
339	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  i++)  {  buffer.append(entryName);  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  i++)  {  buffer.append(entryName);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  i++)  {  buffer.append(entryName);  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append(entryName);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
340	[BUG]  [BUGGY]  if(line!=  currName)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  currName)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  currName)  {  w.write(line);  line  =  w.toString().getBytes(CharsetNames.UTF_8).length;  }	  w.write(line);    line    =    w.toString().getBytes(CharsetNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
341	[BUG]  [BUGGY]  if(line.getBytes(key)!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
342	[BUG]  [BUGGY]  if(line.getBytes(key).length!=  1)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key).length!=  1)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key).length!=  1)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key).length!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
343	[BUG]  [BUGGY]  ||(len!=  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||(len!=  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||(len!=  0  &&  line.getBytes(CharsetNames.UTF_8)!=  null))  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||(line!=    null    &&    line.getBytes(CharsetNames.UTF_8)!=    null))    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
344	[BUG]  [BUGGY]  if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
345	[BUG]  [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(buffer!=  null)  {  for(int  i  =  0;  i  <  len;  i++)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
346	[BUG]  [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(writePaxHeadersForNonAsciiNames!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(writePaxHeadersForNonAsciiNames!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
347	[BUG]  [BUGGY]  if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(entryName  ==  null)  {  if(line.getBytes(CharsetNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    else    {    writePaxHeadersForNonAsciiNames    	non-compiled	[CE]  <identifier>  expected	52	None	replace
348	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  currentLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
349	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.UTF_8)!=  currName)  {  actualLength  =  line.getString(CharsetNames.UTF_8).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    currName)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
350	[BUG]  [BUGGY]  w.write(key  + "= "  +  value  + "n ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(key  + "= "  +  value  + "n ");  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(key  + "= "  +  value  + "n ");	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
351	[BUG]  [BUGGY]  w.write(key,  line);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  w.write(key,  line);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	w.write(key,  line);	  w.write(line);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
352	[BUG]  [BUGGY]  while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null  &&  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
353	[BUG]  [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line!=  null)  {  actualLength  =  line.getBytes(charsetNames.UTF_8).length;  }	  while(line!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
354	[BUG]  [BUGGY]  actualLength  =  linen.getBytes(CharsetNames.UTF_8).length  -  1;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  linen.getBytes(CharsetNames.UTF_8).length  -  1;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  linen.getBytes(CharsetNames.UTF_8).length  -  1;	  actualLength    =    w.getBytes(CharsetNames.UTF_8).length    -    1;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
355	[BUG]  [BUGGY]  if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharacterNames.UTF_8)!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
356	[BUG]  [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  actualLength  =  line.getBytes(CharacterNames.UTF_8).length;  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  actualLength    =    line.getBytes(CharacterNames.UTF_8).length;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
357	[BUG]  [BUGGY]  if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  =  line.getString(CharsetNames.US_ASCII).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  =  line.getString(CharsetNames.US_ASCII).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(CharsetNames.US_ASCII)!=  null)  {  actualLength  =  line.getString(CharsetNames.US_ASCII).length;  }	  if(line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getString(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
358	[BUG]  [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  b);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  writePaxHeadersForNonAsciiNames(line,  headers,  b);  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	writePaxHeadersForNonAsciiNames(line,  headers,  b);	  writePaxHeadersForNonAsciiNames(line,    headers);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
359	[BUG]  [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(addPaxHeadersForNonAsciiNames)writePaxHeadersForNonAsciiNames(line);  }  else  {  writePaxHeadersForNonAsciiNames(line);  }	  writePaxHeadersForNonAsciiNames(w);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
360	[BUG]  [BUGGY]  if(actualLength  <  =  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(actualLength  <  =  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(actualLength  <  =  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength    ==    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
361	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line.substring(0,  len));  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line.substring(0,  len));  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(w,  headers);  }  else  {  writePaxHeadersForNonAsciiNames(line.substring(0,  len));  }	  writePaxHeadersForNonAsciiNames(w,    headers);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
362	[BUG]  [BUGGY]  Integer  line  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Integer  line  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Integer  line  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
363	[BUG]  [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  writePaxHeadersForNonAsciiNames(pex,  headers);  }  else  {  addPaxHeadersForNonAsciiNames(line,  headers);  }	  writePaxHeadersForNonAsciiNames(pex,    headers);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
364	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8).length!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
365	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8).length  <  2)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
366	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  >  actualLength)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  >  actualLength)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8).length  >  actualLength)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
367	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8).length  ==  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
368	[BUG]  [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  <  =  LONGFILE_GNU)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  ||  line.getBytes(CharsetNames.UTF_8).length  <  =  LONGFILE_GNU)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	||  line.getBytes(CharsetNames.UTF_8).length  <  =  LONGFILE_GNU)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  ||    line.getBytes(CharsetNames.UTF_8)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
369	[BUG]  [BUGGY]  if(value!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(actualLength!=    0)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
370	[BUG]  [BUGGY]  if(line.getBytes()!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes()!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes()!=  currName)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes()!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
371	[BUG]  [BUGGY]  while(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  while(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	while(line.getBytes()!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes()!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
372	[BUG]  [BUGGY]  if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line.getBytes(key)!=  null  ||  line.getBytes(CharsetNames.UTF_8)  ==  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(line.getBytes(key)!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
373	[BUG]  [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  'n';  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  'n';  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	actualLength  =  line.getBytes(CharsetNames.UTF_8).length  +  'n';	  actualLength    =    line.getBytes(CharsetNames.UTF_8).length    -    1    +    len;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
374	[BUG]  [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  Len  =  line.getBytes(CharsetNames.UTF_8).length;  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	Len  =  line.getBytes(CharsetNames.UTF_8).length;	  if(line.getBytes(CharsetNames.UTF_8)    ==    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
375	[BUG]  [BUGGY]  if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line  >=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
376	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( ", ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( ", ");  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  len;  ++i)  {  buffer.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    len;    ++i)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
377	[BUG]  [BUGGY]  if(value!=  null  &&  value.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null  &&  value.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null  &&  value.length()  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
378	[BUG]  [BUGGY]  if(value!=  null  &&  value.length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(value!=  null  &&  value.length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(value!=  null  &&  value.length  >  0)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
379	[BUG]  [BUGGY]  if(key!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      String  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";  int  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  while  (len  !=  actualLength)  {      len  =  actualLength;  line  =  len  +       "       "  +  key  +       "=     "  +  value  +       "\n     ";      [BUGGY]  if(key!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }  [BUGGY]      }  w.write(line);  }  byte[]  data  =  w.toString().getBytes(CharsetNames.UTF_8);  pex.setSize(data.length);  putArchiveEntry(pex);  write(data);  closeArchiveEntry();  }  [CLASS]  TarArchiveOutputStream  [METHOD]  writePaxHeaders  [RETURN_TYPE]  void  String  entryName  String>  headers  [VARIABLES]  byte[]  assemBuf  data  recordBuf  wBuf  Entry  h  boolean  addPaxHeadersForNonAsciiNames  b  closed  finished  haveUnclosedEntry  paxHeaderContainsPath  ZipEncoding  ASCII  encoding  StringWriter  w  OutputStream  os  out  TarBuffer  buffer  String  currName  encoding  entryName  key  line  name  value  Map  headers  int  BIGNUMBER_ERROR  BIGNUMBER_POSIX  BIGNUMBER_STAR  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_POSIX  LONGFILE_TRUNCATE  aLen  actualLength  assemLen  bigNumberMode  blockSize  i  len  longFileMode  nameLen  num  numToWrite  recordSize  wOffset  long  currBytes  currSize  TarArchiveEntry  pex  	projects/Compress18/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	0.3779644730092272	482	482	1	replace	if(key!=  null)  {  actualLength  =  line.getBytes(CharsetNames.UTF_8).length;  }	  if(value!=    null)    {    actualLength    =    line.getBytes(CharsetNames.UTF_8).length;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
